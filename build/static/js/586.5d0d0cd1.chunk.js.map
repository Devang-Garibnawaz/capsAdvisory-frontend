{"version":3,"file":"static/js/586.5d0d0cd1.chunk.js","mappings":"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","sources":["auth/pages/AngelBrokingLogin.tsx","core/components/BoxedLayout.tsx","core/components/SettingsDrawer.tsx"],"sourcesContent":["import Box from \"@material-ui/core/Box\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport LoadingButton from \"@material-ui/lab/LoadingButton\";\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle } from \"@mui/material\";\r\nimport { useFormik } from \"formik\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\nimport * as Yup from \"yup\";\r\nimport BoxedLayout from \"../../core/components/BoxedLayout\";\r\nimport { useSnackbar } from \"../../core/contexts/SnackbarProvider\";\r\nimport { useLocalStorage } from \"../../core/hooks/useLocalStorage\";\r\nimport { useAuth } from \"../contexts/AuthProvider\";\r\nimport CheckIcon from '@mui/icons-material/Check';\r\nimport { GridCheckCircleIcon, GridCloseIcon } from \"@mui/x-data-grid\";\r\nimport { getBaseUrl } from \"../../http/globalUrl\";\r\nimport { CheckBrokerStatusService } from \"../hooks/useAngelBrokingLogin\";\r\n\r\n\r\nconst AngelBrokingLogin = () => {\r\n\r\n  const navigate = useNavigate();\r\n  const [open, setOpen] = useState(false);\r\n  const [isStatusLoading,setIsStatusLoading] = useState(false);\r\n  const snackbar = useSnackbar();\r\n  const { isAngelbrokingLoggingIn, angelBrokingLogin } = useAuth();\r\n  const [loginStatus, setLoginStatus] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchBrokerStatus();\r\n  },[])\r\n\r\n  const handleAuthentication = (clientCode: string, password: string,tOtp:string) => {\r\n    angelBrokingLogin(clientCode, password,tOtp)\r\n      .then((data) =>{\r\n        if(data?.status){\r\n            snackbar.success(data.message);\r\n            setLoginStatus(data.status);\r\n            window.localStorage.setItem(\"angelBrokingStatus\",data.status);\r\n        }\r\n        else{\r\n          snackbar.error(data.message);\r\n        }\r\n      }).catch(() => snackbar.error(\"Error\"));\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      clientCode: \"P292262\",\r\n      password: \"7230\",\r\n      tOtp:\"\",\r\n    },\r\n    validationSchema: Yup.object({\r\n      clientCode: Yup.string()\r\n        .required(\"Required\"),\r\n      password: Yup.string()\r\n        .required(\"Required\"),\r\n      tOtp: Yup.string().required(\"Required\"),\r\n    }),\r\n    onSubmit: (values) => handleAuthentication(values.clientCode, values.password, values.tOtp),\r\n  });\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const fetchBrokerStatus = async () => {\r\n    try {\r\n      const [\r\n        brokerStatus\r\n      ] = await Promise.all([\r\n        CheckBrokerStatusService()\r\n      ]);\r\n\r\n      setLoginStatus(brokerStatus.status);\r\n      window.localStorage.setItem(\"angelBrokingStatus\",brokerStatus.status);\r\n    } catch (error: any) {\r\n      snackbar.error(error.message);\r\n    }\r\n  };\r\n\r\n  const checkBrokerConnection = async () =>{\r\n    fetchBrokerStatus();\r\n    handleClickOpen();\r\n  }\r\n\r\n  return (\r\n    <Grid container component=\"main\" sx={{ height: \"100vh\" }}>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n      <DialogTitle >\r\n        {\"Angle Broking Connection Status\"}\r\n      </DialogTitle>\r\n      <DialogContent sx={{width: \"300px\", height: \"100px\",display: \"contents\"}}>\r\n        {loginStatus ? <GridCheckCircleIcon color=\"success\" sx={{fontSize:\"70px\",display: \"block\", margin: \"auto\"}} /> : <GridCloseIcon color=\"error\" sx={{fontSize:\"70px\",display: \"block\", margin: \"auto\"}} />}\r\n        <Typography sx={{display: \"table-cell\",textAlign:\"center\"}}>{loginStatus? \"Connected\" : \"Not Connected\"} </Typography>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button variant=\"outlined\" onClick={handleClose}>Close</Button>\r\n      </DialogActions>\r\n      </Dialog>\r\n      <Grid\r\n        item\r\n        xs={false}\r\n        sm={4}\r\n        md={7}\r\n        sx={{\r\n          backgroundImage: \"url(./img/startup.svg)\",\r\n          backgroundRepeat: \"no-repeat\",\r\n          bgcolor: \"background.default\",\r\n          backgroundSize: \"cover\",\r\n          backgroundPosition: \"center\",\r\n        }}\r\n      />\r\n      <Grid item xs={12} sm={8} md={5} component={Paper} square>\r\n        <BoxedLayout>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            {'Angel Broking Authentication'}\r\n          </Typography>\r\n          <Box\r\n            component=\"form\"\r\n            marginTop={3}\r\n            noValidate\r\n            onSubmit={formik.handleSubmit}\r\n          >\r\n            <TextField\r\n              margin=\"normal\"\r\n              variant=\"filled\"\r\n              required\r\n              fullWidth\r\n              id=\"clientCode\"\r\n              value={formik.values.clientCode}\r\n              onChange={formik.handleChange}\r\n              label={'Client Code'}\r\n              name=\"clientCode\"\r\n              disabled={isAngelbrokingLoggingIn}\r\n              error={formik.touched.clientCode && Boolean(formik.errors.clientCode)}\r\n              helperText={formik.touched.clientCode && formik.errors.clientCode}\r\n            />\r\n            <TextField\r\n              margin=\"normal\"\r\n              variant=\"filled\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label={'Password'}\r\n              type=\"password\"\r\n              id=\"password\"\r\n              disabled={isAngelbrokingLoggingIn}\r\n              value={formik.values.password}\r\n              onChange={formik.handleChange}\r\n              error={formik.touched.password && Boolean(formik.errors.password)}\r\n              helperText={formik.touched.password && formik.errors.password}\r\n            />\r\n            <TextField\r\n              margin=\"normal\"\r\n              variant=\"filled\"\r\n              required\r\n              fullWidth\r\n              name=\"tOtp\"\r\n              label={'T-OTP'}\r\n              type=\"numeric\"\r\n              id=\"tOtp\"\r\n              disabled={isAngelbrokingLoggingIn}\r\n              value={formik.values.tOtp}\r\n              onChange={formik.handleChange}\r\n              error={formik.touched.tOtp && Boolean(formik.errors.tOtp)}\r\n              helperText={formik.touched.tOtp && formik.errors.tOtp}\r\n            />\r\n            <LoadingButton\r\n              type=\"submit\"\r\n              fullWidth\r\n              loading={isAngelbrokingLoggingIn}\r\n              variant=\"contained\"\r\n              sx={{ mt: 3 }}\r\n            >\r\n              {'Submit'}\r\n            </LoadingButton> \r\n            <Button variant=\"outlined\" onClick={() => navigate(-1)} sx={{mt:3}}>{'Back'}</Button>\r\n            <LoadingButton loading={isStatusLoading} variant=\"outlined\" onClick={checkBrokerConnection} sx={{mt:3,ml:2}}>{'Check Status'}</LoadingButton>\r\n          </Box>\r\n        </BoxedLayout>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default AngelBrokingLogin;\r\n","import AppBar from \"@material-ui/core/AppBar\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport GlobalStyles from \"@material-ui/core/GlobalStyles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport useTheme from \"@material-ui/core/styles/useTheme\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport React, { useState } from \"react\";\r\nimport Logo from \"./Logo\";\r\nimport SettingsDrawer from \"./SettingsDrawer\";\r\n\r\ntype BoxedLayoutProps = {\r\n  children: React.ReactNode;\r\n};\r\n\r\nconst BoxedLayout = ({ children }: BoxedLayoutProps) => {\r\n  const theme = useTheme();\r\n  const [settingsOpen, setSettingsOpen] = useState(false);\r\n\r\n  const handleSettingsToggle = () => {\r\n    setSettingsOpen(!settingsOpen);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <GlobalStyles\r\n        styles={{ body: { backgroundColor: theme.palette.background.paper } }}\r\n      />\r\n      <AppBar color=\"transparent\" position=\"relative\">\r\n        <Toolbar>\r\n          <Box sx={{ flexGrow: 1 }} />\r\n          <IconButton\r\n            aria-label=\"settings\"\r\n            component=\"span\"\r\n            onClick={handleSettingsToggle}\r\n          >\r\n            <SettingsIcon />\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container component=\"main\" maxWidth=\"xs\" sx={{ mt: 6 }}>\r\n        <Box\r\n          sx={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Logo sx={{ mb: 2 }} />\r\n          {children}\r\n          <Box>\r\n            <SettingsDrawer\r\n              onDrawerToggle={handleSettingsToggle}\r\n              open={settingsOpen}\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BoxedLayout;\r\n","import Box from \"@material-ui/core/Box\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport ToggleButton from \"@material-ui/core/ToggleButton\";\r\nimport ToggleButtonGroup from \"@material-ui/core/ToggleButtonGroup\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { drawerWidth } from \"../config/layout\";\r\nimport { useSettings } from \"../contexts/SettingsProvider\";\r\n\r\ntype SettingsDrawerProps = {\r\n  onDrawerToggle: () => void;\r\n  open: boolean;\r\n};\r\n\r\nconst SettingsDrawer = ({ onDrawerToggle, open }: SettingsDrawerProps) => {\r\n  const {\r\n    changeCollapsed,\r\n    changeDirection,\r\n    changeMode,\r\n    collapsed,\r\n    direction,\r\n    mode,\r\n  } = useSettings();\r\n  const { i18n, t } = useTranslation();\r\n\r\n  const handleDirectionChange = (_: any, direction: \"ltr\" | \"rtl\") => {\r\n    changeDirection(direction);\r\n  };\r\n\r\n  const handleLanguageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    i18n.changeLanguage((event.target as HTMLInputElement).value);\r\n  };\r\n\r\n  const handleModeChange = (_: any, mode: string) => {\r\n    changeMode(mode);\r\n  };\r\n\r\n  const handleSidebarChange = (_: any, collapsed: boolean) => {\r\n    changeCollapsed(collapsed);\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      anchor=\"left\"\r\n      open={open}\r\n      onClose={onDrawerToggle}\r\n      sx={{\r\n        \"& .MuiDrawer-paper\": {\r\n          width: drawerWidth,\r\n        },\r\n      }}\r\n      variant=\"temporary\"\r\n    >\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          alignItems: \"center\",\r\n          p: 2,\r\n        }}\r\n      >\r\n        <Typography variant=\"h5\">{t(\"settings.drawer.title\")}</Typography>\r\n        <IconButton color=\"inherit\" onClick={onDrawerToggle} edge=\"end\">\r\n          <CloseIcon />\r\n        </IconButton>\r\n      </Box>\r\n      <Box sx={{ pl: 2, pr: 2 }}>\r\n        <Typography\r\n          gutterBottom\r\n          id=\"settings-language\"\r\n          marginTop={3}\r\n          variant=\"h6\"\r\n        >\r\n          {t(\"settings.drawer.language.label\")}\r\n        </Typography>\r\n        <FormControl>\r\n          <RadioGroup\r\n            aria-label=\"language\"\r\n            name=\"language-radio-group\"\r\n            onChange={handleLanguageChange}\r\n            value={i18n.language}\r\n          >\r\n            <FormControlLabel\r\n              value=\"en\"\r\n              control={<Radio />}\r\n              label={t(\"settings.drawer.language.options.en\")}\r\n            />\r\n            <FormControlLabel\r\n              value=\"fr\"\r\n              control={<Radio />}\r\n              label={t(\"settings.drawer.language.options.fr\")}\r\n            />\r\n          </RadioGroup>\r\n        </FormControl>\r\n        <Typography gutterBottom id=\"settings-mode\" marginTop={3} variant=\"h6\">\r\n          {t(\"settings.drawer.mode.label\")}\r\n        </Typography>\r\n        <ToggleButtonGroup\r\n          color=\"primary\"\r\n          value={mode}\r\n          exclusive\r\n          fullWidth\r\n          onChange={handleModeChange}\r\n        >\r\n          <ToggleButton value=\"light\">\r\n            {t(\"settings.drawer.mode.options.light\")}\r\n          </ToggleButton>\r\n          <ToggleButton value=\"dark\">\r\n            {t(\"settings.drawer.mode.options.dark\")}\r\n          </ToggleButton>\r\n        </ToggleButtonGroup>\r\n        <Typography gutterBottom id=\"settings-mode\" marginTop={3} variant=\"h6\">\r\n          {t(\"settings.drawer.direction.label\")}\r\n        </Typography>\r\n        <ToggleButtonGroup\r\n          color=\"primary\"\r\n          value={direction}\r\n          exclusive\r\n          fullWidth\r\n          onChange={handleDirectionChange}\r\n        >\r\n          <ToggleButton value=\"ltr\">\r\n            {t(\"settings.drawer.direction.options.ltr\")}\r\n          </ToggleButton>\r\n          <ToggleButton value=\"rtl\">\r\n            {t(\"settings.drawer.direction.options.rtl\")}\r\n          </ToggleButton>\r\n        </ToggleButtonGroup>\r\n        <Typography\r\n          gutterBottom\r\n          id=\"settings-sidebar\"\r\n          marginTop={3}\r\n          variant=\"h6\"\r\n        >\r\n          {t(\"settings.drawer.sidebar.label\")}\r\n        </Typography>\r\n        <ToggleButtonGroup\r\n          color=\"primary\"\r\n          value={collapsed}\r\n          exclusive\r\n          fullWidth\r\n          onChange={handleSidebarChange}\r\n        >\r\n          <ToggleButton value={true}>\r\n            {t(\"settings.drawer.sidebar.options.collapsed\")}\r\n          </ToggleButton>\r\n          <ToggleButton value={false}>\r\n            {t(\"settings.drawer.sidebar.options.full\")}\r\n          </ToggleButton>\r\n        </ToggleButtonGroup>\r\n      </Box>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default SettingsDrawer;\r\n"],"names":["navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","open","setOpen","_useState3","_useState4","isStatusLoading","snackbar","useSnackbar","_useAuth","useAuth","isAngelbrokingLoggingIn","angelBrokingLogin","_useState5","_useState6","loginStatus","setLoginStatus","useEffect","fetchBrokerStatus","formik","useFormik","initialValues","clientCode","password","tOtp","validationSchema","Yup","required","onSubmit","values","then","data","status","success","message","window","localStorage","setItem","error","catch","handleClose","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$Promise$all","_yield$Promise$all2","brokerStatus","wrap","_context","prev","next","Promise","all","CheckBrokerStatusService","sent","t0","stop","apply","arguments","checkBrokerConnection","_ref2","_callee2","_context2","_jsxs","Grid","container","component","sx","height","children","Dialog","onClose","_jsx","DialogTitle","DialogContent","width","display","GridCheckCircleIcon","color","fontSize","margin","GridCloseIcon","Typography","textAlign","DialogActions","Button","variant","onClick","item","xs","sm","md","backgroundImage","backgroundRepeat","bgcolor","backgroundSize","backgroundPosition","Paper","square","BoxedLayout","Box","marginTop","noValidate","handleSubmit","TextField","fullWidth","id","value","onChange","handleChange","label","name","disabled","touched","Boolean","errors","helperText","type","LoadingButton","loading","mt","ml","theme","useTheme","settingsOpen","setSettingsOpen","handleSettingsToggle","React","GlobalStyles","styles","body","backgroundColor","palette","background","paper","AppBar","position","Toolbar","flexGrow","IconButton","SettingsIcon","Container","maxWidth","flexDirection","alignItems","Logo","mb","SettingsDrawer","onDrawerToggle","_useSettings","useSettings","changeCollapsed","changeDirection","changeMode","collapsed","direction","mode","_useTranslation","useTranslation","i18n","t","Drawer","anchor","drawerWidth","justifyContent","p","edge","CloseIcon","pl","pr","gutterBottom","FormControl","RadioGroup","event","changeLanguage","target","language","FormControlLabel","control","Radio","ToggleButtonGroup","exclusive","_","ToggleButton"],"sourceRoot":""}