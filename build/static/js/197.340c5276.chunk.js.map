{"version":3,"file":"static/js/197.340c5276.chunk.js","mappings":"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","sources":["core/components/BoxedLayout.tsx","auth/hooks/useRegister.ts","auth/pages/Register.tsx","core/components/SettingsDrawer.tsx"],"sourcesContent":["import AppBar from \"@material-ui/core/AppBar\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport GlobalStyles from \"@material-ui/core/GlobalStyles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport useTheme from \"@material-ui/core/styles/useTheme\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport React, { useState } from \"react\";\r\nimport Logo from \"./Logo\";\r\nimport SettingsDrawer from \"./SettingsDrawer\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport { useAuth } from \"../../auth/contexts/AuthProvider\";\r\nimport { useSnackbar } from \"../../core/contexts/SnackbarProvider\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\ntype BoxedLayoutProps = {\r\n  children: React.ReactNode;\r\n};\r\n\r\nconst BoxedLayout = ({ children }: BoxedLayoutProps) => {\r\n  const theme = useTheme();\r\n  const [settingsOpen, setSettingsOpen] = useState(false);\r\n  const { logout, userInfo } = useAuth();\r\n  const snackbar = useSnackbar();\r\n  const token = localStorage.getItem('authkey');\r\n  \r\n  const handleSettingsToggle = () => {\r\n    setSettingsOpen(!settingsOpen);\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    logout().then(()=>{\r\n      <Navigate to={`/${process.env.PUBLIC_URL}`} replace/>\r\n    }).catch((err:any) =>\r\n      snackbar.error(err)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <GlobalStyles\r\n        styles={{ body: { backgroundColor: theme.palette.background.paper } }}\r\n      />\r\n      <AppBar color=\"transparent\" position=\"relative\">\r\n        <Toolbar>\r\n          <Box sx={{ flexGrow: 1 }} />\r\n          {token != '' && <IconButton\r\n            aria-label=\"logout\"\r\n            component=\"span\"\r\n            onClick={handleLogout}\r\n          >\r\n            <ExitToAppIcon />\r\n          </IconButton>}\r\n          <IconButton\r\n            aria-label=\"settings\"\r\n            component=\"span\"\r\n            onClick={handleSettingsToggle}\r\n          >\r\n            <SettingsIcon />\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container component=\"main\" maxWidth=\"xs\" sx={{ mt: 6 }}>\r\n        <Box\r\n          sx={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Logo sx={{ mb: 2 }} />\r\n          {children}\r\n          <Box>\r\n            <SettingsDrawer\r\n              onDrawerToggle={handleSettingsToggle}\r\n              open={settingsOpen}\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BoxedLayout;\r\n","import { useState } from \"react\";\r\nimport { UserInfo } from \"../types/userInfo\";\r\nimport { getBaseUrl } from \"../../http/globalUrl\";\r\n\r\nconst BASE_URL = getBaseUrl();\r\nconst GET_LOGIN_URL = 'users/register';\r\n\r\nconst registerRequest = async (userInfo: UserInfo): Promise<UserInfo> => {\r\n  userInfo.role = 'admin'; // default role assign as admin\r\n  const requestOptions = {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(userInfo)\r\n  };\r\n  const data = await (await fetch(`${BASE_URL}${GET_LOGIN_URL}`, requestOptions)).json();\r\n  return data;\r\n};\r\n\r\nexport function useRegister() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const register = async (userInfo: UserInfo) => {\r\n    try {\r\n      setIsLoading(true);\r\n      const result = await registerRequest(userInfo);\r\n      return result;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return { isRegistering: isLoading, register };\r\n}\r\n","import Box from \"@material-ui/core/Box\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport LoadingButton from \"@material-ui/lab/LoadingButton\";\r\nimport { useFormik } from \"formik\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport * as Yup from \"yup\";\r\nimport BoxedLayout from \"../../core/components/BoxedLayout\";\r\nimport { useSnackbar } from \"../../core/contexts/SnackbarProvider\";\r\nimport { useRegister } from \"../hooks/useRegister\";\r\nimport { UserInfo } from \"../types/userInfo\";\r\n\r\n\r\nconst Register = () => {\r\n  const navigate = useNavigate();\r\n  const snackbar = useSnackbar();\r\n  const { t } = useTranslation();\r\n\r\n  const { isRegistering, register } = useRegister();\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: \"\",\r\n      fullName: \"\",\r\n      password:\"\"\r\n    },\r\n    validationSchema: Yup.object({\r\n      email: Yup.string()\r\n        .email(\"Invalid email address\")\r\n        .required(t(\"common.validations.required\")),\r\n      fullName: Yup.string()\r\n        .max(20, t(\"common.validations.max\", { size: 20 }))\r\n        .required(t(\"common.validations.required\")),\r\n      password: Yup.string()\r\n        .min(8, t(\"common.validations.min\", { size: 8 }))\r\n        .required(t(\"common.validations.required\")),\r\n    }),\r\n    onSubmit: (values) => handleRegister(values),\r\n  });\r\n\r\n  const handleRegister = async (values: Partial<UserInfo>) => {\r\n    register(values as UserInfo)\r\n      .then((result) => {\r\n        if(result?.status){\r\n          snackbar.success(t(\"auth.register.notifications.success\"));\r\n          navigate(`/`);\r\n        }else{\r\n          snackbar.error(result.message);\r\n        }\r\n        \r\n      })\r\n      .catch(() => {\r\n        snackbar.error(t(\"common.errors.unexpected.subTitle\"));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <BoxedLayout>\r\n      <Typography component=\"h1\" variant=\"h5\">\r\n        {t(\"auth.register.title\")}\r\n      </Typography>\r\n      <Box\r\n        component=\"form\"\r\n        marginTop={3}\r\n        noValidate\r\n        onSubmit={formik.handleSubmit}\r\n      >\r\n        <TextField\r\n          margin=\"normal\"\r\n          required\r\n          fullWidth\r\n          id=\"fullName\"\r\n          label={'Full Name'}\r\n          name=\"fullName\"\r\n          autoComplete=\"given-name\"\r\n          disabled={isRegistering}\r\n          value={formik.values.fullName}\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.fullName && Boolean(formik.errors.fullName)}\r\n          helperText={formik.touched.fullName && formik.errors.fullName}\r\n        />\r\n        <TextField\r\n          margin=\"normal\"\r\n          required\r\n          fullWidth\r\n          id=\"email\"\r\n          label={t(\"auth.register.form.email.label\")}\r\n          name=\"email\"\r\n          autoComplete=\"email\"\r\n          disabled={isRegistering}\r\n          value={formik.values.email}\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.email && Boolean(formik.errors.email)}\r\n          helperText={formik.touched.email && formik.errors.email}\r\n        />\r\n        <TextField\r\n              margin=\"normal\"\r\n              variant=\"filled\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label={t(\"auth.login.form.password.label\")}\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n              disabled={isRegistering}\r\n              value={formik.values.password}\r\n              onChange={formik.handleChange}\r\n              error={formik.touched.password && Boolean(formik.errors.password)}\r\n              helperText={formik.touched.password && formik.errors.password}\r\n          />\r\n        <LoadingButton\r\n          type=\"submit\"\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          disabled={isRegistering}\r\n          loading={isRegistering}\r\n          sx={{ mt: 2 }}\r\n        >\r\n          {t(\"auth.register.submit\")}\r\n        </LoadingButton>\r\n        <Button\r\n          component={Link}\r\n          to={`/`}\r\n          color=\"primary\"\r\n          fullWidth\r\n          sx={{ mt: 2 }}\r\n        >\r\n          {t(\"auth.register.back\")}\r\n        </Button>\r\n      </Box>\r\n    </BoxedLayout>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import Box from \"@material-ui/core/Box\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport ToggleButton from \"@material-ui/core/ToggleButton\";\r\nimport ToggleButtonGroup from \"@material-ui/core/ToggleButtonGroup\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { drawerWidth } from \"../config/layout\";\r\nimport { useSettings } from \"../contexts/SettingsProvider\";\r\n\r\ntype SettingsDrawerProps = {\r\n  onDrawerToggle: () => void;\r\n  open: boolean;\r\n};\r\n\r\nconst SettingsDrawer = ({ onDrawerToggle, open }: SettingsDrawerProps) => {\r\n  const {\r\n    changeCollapsed,\r\n    changeDirection,\r\n    changeMode,\r\n    collapsed,\r\n    direction,\r\n    mode,\r\n  } = useSettings();\r\n  const { i18n, t } = useTranslation();\r\n\r\n  const handleDirectionChange = (_: any, direction: \"ltr\" | \"rtl\") => {\r\n    changeDirection(direction);\r\n  };\r\n\r\n  const handleLanguageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    i18n.changeLanguage((event.target as HTMLInputElement).value);\r\n  };\r\n\r\n  const handleModeChange = (_: any, mode: string) => {\r\n    changeMode(mode);\r\n  };\r\n\r\n  const handleSidebarChange = (_: any, collapsed: boolean) => {\r\n    changeCollapsed(collapsed);\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      anchor=\"left\"\r\n      open={open}\r\n      onClose={onDrawerToggle}\r\n      sx={{\r\n        \"& .MuiDrawer-paper\": {\r\n          width: drawerWidth,\r\n        },\r\n      }}\r\n      variant=\"temporary\"\r\n    >\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          alignItems: \"center\",\r\n          p: 2,\r\n        }}\r\n      >\r\n        <Typography variant=\"h5\">{t(\"settings.drawer.title\")}</Typography>\r\n        <IconButton color=\"inherit\" onClick={onDrawerToggle} edge=\"end\">\r\n          <CloseIcon />\r\n        </IconButton>\r\n      </Box>\r\n      <Box sx={{ pl: 2, pr: 2 }}>\r\n        <Typography\r\n          gutterBottom\r\n          id=\"settings-language\"\r\n          marginTop={3}\r\n          variant=\"h6\"\r\n        >\r\n          {t(\"settings.drawer.language.label\")}\r\n        </Typography>\r\n        <FormControl>\r\n          <RadioGroup\r\n            aria-label=\"language\"\r\n            name=\"language-radio-group\"\r\n            onChange={handleLanguageChange}\r\n            value={i18n.language}\r\n          >\r\n            <FormControlLabel\r\n              value=\"en\"\r\n              control={<Radio />}\r\n              label={t(\"settings.drawer.language.options.en\")}\r\n            />\r\n            <FormControlLabel\r\n              value=\"fr\"\r\n              control={<Radio />}\r\n              label={t(\"settings.drawer.language.options.fr\")}\r\n            />\r\n          </RadioGroup>\r\n        </FormControl>\r\n        <Typography gutterBottom id=\"settings-mode\" marginTop={3} variant=\"h6\">\r\n          {t(\"settings.drawer.mode.label\")}\r\n        </Typography>\r\n        <ToggleButtonGroup\r\n          color=\"primary\"\r\n          value={mode}\r\n          exclusive\r\n          fullWidth\r\n          onChange={handleModeChange}\r\n        >\r\n          <ToggleButton value=\"light\">\r\n            {t(\"settings.drawer.mode.options.light\")}\r\n          </ToggleButton>\r\n          <ToggleButton value=\"dark\">\r\n            {t(\"settings.drawer.mode.options.dark\")}\r\n          </ToggleButton>\r\n        </ToggleButtonGroup>\r\n        <Typography gutterBottom id=\"settings-mode\" marginTop={3} variant=\"h6\">\r\n          {t(\"settings.drawer.direction.label\")}\r\n        </Typography>\r\n        <ToggleButtonGroup\r\n          color=\"primary\"\r\n          value={direction}\r\n          exclusive\r\n          fullWidth\r\n          onChange={handleDirectionChange}\r\n        >\r\n          <ToggleButton value=\"ltr\">\r\n            {t(\"settings.drawer.direction.options.ltr\")}\r\n          </ToggleButton>\r\n          <ToggleButton value=\"rtl\">\r\n            {t(\"settings.drawer.direction.options.rtl\")}\r\n          </ToggleButton>\r\n        </ToggleButtonGroup>\r\n        <Typography\r\n          gutterBottom\r\n          id=\"settings-sidebar\"\r\n          marginTop={3}\r\n          variant=\"h6\"\r\n        >\r\n          {t(\"settings.drawer.sidebar.label\")}\r\n        </Typography>\r\n        <ToggleButtonGroup\r\n          color=\"primary\"\r\n          value={collapsed}\r\n          exclusive\r\n          fullWidth\r\n          onChange={handleSidebarChange}\r\n        >\r\n          <ToggleButton value={true}>\r\n            {t(\"settings.drawer.sidebar.options.collapsed\")}\r\n          </ToggleButton>\r\n          <ToggleButton value={false}>\r\n            {t(\"settings.drawer.sidebar.options.full\")}\r\n          </ToggleButton>\r\n        </ToggleButtonGroup>\r\n      </Box>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default SettingsDrawer;\r\n"],"names":["_ref","children","theme","useTheme","settingsOpen","setSettingsOpen","useState","logout","userInfo","useAuth","snackbar","useSnackbar","token","localStorage","getItem","handleSettingsToggle","_jsxs","React","_jsx","GlobalStyles","styles","body","backgroundColor","palette","background","paper","AppBar","color","position","Toolbar","Box","sx","flexGrow","IconButton","component","onClick","handleLogout","then","Navigate","catch","err","error","ExitToAppIcon","SettingsIcon","Container","maxWidth","mt","display","flexDirection","alignItems","Logo","mb","SettingsDrawer","onDrawerToggle","open","BASE_URL","getBaseUrl","useRegister","isLoading","setIsLoading","isRegistering","register","async","result","role","requestOptions","method","headers","JSON","stringify","fetch","json","registerRequest","Register","navigate","useNavigate","t","useTranslation","formik","useFormik","initialValues","email","fullName","password","validationSchema","Yup","required","max","size","min","onSubmit","values","handleRegister","status","success","message","BoxedLayout","Typography","variant","marginTop","noValidate","handleSubmit","TextField","margin","fullWidth","id","label","name","autoComplete","disabled","value","onChange","handleChange","touched","Boolean","errors","helperText","type","LoadingButton","loading","Button","Link","to","changeCollapsed","changeDirection","changeMode","collapsed","direction","mode","useSettings","i18n","Drawer","anchor","onClose","width","drawerWidth","justifyContent","p","edge","CloseIcon","pl","pr","gutterBottom","FormControl","RadioGroup","event","changeLanguage","target","language","FormControlLabel","control","Radio","ToggleButtonGroup","exclusive","handleModeChange","_","ToggleButton","handleDirectionChange","handleSidebarChange"],"sourceRoot":""}