{"version":3,"file":"static/js/516.5d704a11.chunk.js","mappings":"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","sources":["MoneyFlux/components/MoneyfluxStocksTable.tsx","MoneyFlux/hooks/useMoneyfluxStocksList.ts","MoneyFlux/pages/MoneyfluxStocksListing.tsx"],"sourcesContent":["import Box from \"@mui/material/Box\";\r\nimport { DataGrid, GridColDef, GridToolbar,GridToolbarColumnsButton, GridToolbarContainer, GridToolbarDensitySelector, GridToolbarExport, GridToolbarFilterButton } from \"@mui/x-data-grid\";\r\nimport moment from \"moment\";\r\nimport React, { useState } from \"react\";\r\nimport Empty from \"../../core/components/Empty\";\r\nimport { Moneyflux } from \"../types/Moneyflux\";\r\n\r\ntype MoneyfluxTableProps = {\r\n    moneyfluxData?: Moneyflux[];\r\n};\r\n\r\nconst MoneyfluxTable = ({\r\n    moneyfluxData = [],\r\n}: MoneyfluxTableProps) => {\r\n  \r\n  const [pageSize, setPageSize] = React.useState<number>(10);\r\n  const columns: GridColDef[] = [\r\n    { field: 'symbol', headerName: 'Symbol',align:'left',width:200 },\r\n    {\r\n      field: 'percentage',\r\n      headerName: 'Percentage',\r\n      headerAlign:'center',\r\n      type: 'number',\r\n      align:'center',\r\n      width:200\r\n    },\r\n    {\r\n      field: 'sector',\r\n      headerName: 'Sector',\r\n      headerAlign:'center',\r\n      align:'center',\r\n      width:200\r\n    },\r\n    { \r\n      field: 'date', \r\n      headerName: 'Time', \r\n      headerAlign:'center',\r\n      align:'left',\r\n      width:200,\r\n      valueGetter: (params) =>{\r\n        const date = new Date(params.row.date);\r\n        let hours = date.getHours();\r\n        let minutes = date.getMinutes();\r\n        var ampm = hours >= 12 ? 'pm' : 'am';\r\n        hours = hours % 12;\r\n        hours = hours ? hours : 12; // the hour '0' should be '12'\r\n        minutes = minutes < 10 ? (0 + minutes) : minutes;\r\n        var strTime = hours + ':' + (minutes< 10 ? '0' : '')+minutes + ' ' + ampm;\r\n        return strTime;\r\n\r\n      }\r\n    },\r\n\r\n  ];\r\n\r\n  if (moneyfluxData.length === 0) {\r\n    return <Empty title=\"No Data Found\" />;\r\n  }\r\n\r\n  function CustomToolbar() {\r\n    return (\r\n      <GridToolbarContainer sx={{padding:'1px'}}>\r\n        <GridToolbarColumnsButton sx={{padding:'14px'}} onResize={undefined} nonce={undefined} onResizeCapture={undefined} />\r\n        <GridToolbarFilterButton sx={{padding:'14px'}} onResize={undefined} nonce={undefined} onResizeCapture={undefined} />\r\n        <GridToolbarDensitySelector sx={{padding:'14px'}} onResize={undefined} nonce={undefined} onResizeCapture={undefined} />\r\n        <GridToolbarExport sx={{padding:'14px'}} />\r\n      </GridToolbarContainer>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Box sx={{\r\n                  height: '580px', \r\n                }}>\r\n        <DataGrid\r\n          rows={moneyfluxData}\r\n          disableColumnSelector={true}\r\n          columns={columns}\r\n          components={{\r\n            Toolbar: CustomToolbar,\r\n          }}\r\n          pageSize={pageSize} \r\n          getRowId={(row: any) =>  row._id}\r\n          isRowSelectable={(row:any)=>row._id}\r\n          rowsPerPageOptions={[5,10,20]}\r\n          onPageSizeChange={(newPageSize) => setPageSize(newPageSize)}\r\n        />\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\n\r\nexport default MoneyfluxTable;\r\n","import { getBaseUrl } from \"../../http/globalUrl\";\r\n\r\nconst BASE_URL = getBaseUrl();\r\nconst GET_ORDERS_DATA = 'orders';\r\nconst GET_MONEYFLUX_STOCKS_DATA = 'moneyFlux';\r\nconst query='?date=';\r\n\r\nexport const FetchMonefluxOrdersDataService = async (date:Date) => {\r\n  \r\n    let ordersData: any = [];\r\n    \r\n    let strDate = date.getFullYear()+'-'+(date.getMonth() + 1) +'-'+date.getDate();\r\n    ordersData = await (await fetch(`${BASE_URL}${GET_ORDERS_DATA}?date=${strDate}&isMoneyFlux=${true}`)).json();\r\n    \r\n    return ordersData.orderData;\r\n};\r\n\r\nexport const FetchMoneyfluxStocksDataService = async (date:Date) => {\r\n  \r\n    let data: any = [];\r\n    let strDate = date.getFullYear()+'-'+(date.getMonth() + 1) +'-'+date.getDate();\r\n    data = await (await fetch(BASE_URL+GET_MONEYFLUX_STOCKS_DATA+query+strDate)).json();\r\n    \r\n\r\n    return data.moneyFluxData;;\r\n};","import {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  CircularProgress,\r\n  Grid,\r\n  IconButton,\r\n  LinearProgress,\r\n  Skeleton,\r\n  TextField,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport { LoadingButton, DatePicker } from \"@material-ui/lab\";\r\nimport React, { useState } from \"react\";\r\nimport AdminAppBar from \"../../admin/components/AdminAppBar\";\r\nimport AdminToolbar from \"../../admin/components/AdminToolbar\";\r\nimport MoneyfluxStocksTable from \"../components/MoneyfluxStocksTable\";\r\nimport RefreshIcon from \"@mui/icons-material/Refresh\";\r\n\r\nimport {\r\n  FetchMonefluxOrdersDataService,\r\n  FetchMoneyfluxStocksDataService,\r\n} from \"../hooks/useMoneyfluxStocksList\";\r\nimport { useSnackbar } from \"../../core/contexts/SnackbarProvider\";\r\nimport { ArrowBackIos, ArrowForwardIos } from \"@material-ui/icons\";\r\nimport { GridCellParams, GridColDef } from \"@mui/x-data-grid\";\r\nimport OrdersTable from \"../../Intraday/components/OrdersTable\";\r\nimport clsx from \"clsx\";\r\n\r\nconst MoneyfluxStocksListManagement = () => {\r\n  const [dpDate, setDPDate] = useState<Date>(new Date());\r\n  const [isDataFetching, setIsDataFetching] = useState(false);\r\n  const [moneyfluxOrdersData, setMoneyfluxOrdersData] = useState<any>();\r\n  const [moneyfluxStocksData, setMoneyfluxStocksData] = useState<any>();\r\n  const [nextDisable,setNextDisable] = useState<boolean>(false);\r\n  const snackbar = useSnackbar();\r\n\r\n  const orderDataColumns: GridColDef[] = [\r\n    { field: 'symbol', headerName: 'Symbol', width: 200,align:'left' },\r\n    { field: 'orderType', headerName: 'Order Type', width: 130,headerAlign:'center',align:'center' },\r\n    {\r\n      field: 'entryPrice',\r\n      headerName: 'Entry Price',\r\n      headerAlign:'center',\r\n      type: 'number',\r\n      align:'center',\r\n      width: 130,\r\n    },\r\n    {\r\n      field: 'stopLoss',\r\n      headerName: 'Stop Loss',\r\n      headerAlign:'center',\r\n      type: 'number',\r\n      align:'center',\r\n      width: 130,\r\n    },\r\n    {\r\n      field: 'profitAndLoss',\r\n      headerName: 'Profit & Loss',\r\n      headerAlign:'center',\r\n      type: 'number',\r\n      align:'center',\r\n      width: 130,\r\n      cellClassName: (params: GridCellParams<number>) =>\r\n      clsx('super-app', {\r\n        negative: params.row.profitAndLoss < 0,\r\n        positive: params.row.profitAndLoss > 0,\r\n      }), \r\n      valueGetter: (params) =>{\r\n        return params.row.profitAndLoss.toFixed(2); \r\n      }\r\n    },\r\n    {\r\n      field: 'netpnl',\r\n      headerName: 'Net PnL',\r\n      headerAlign:'center',\r\n      type: 'number',\r\n      align:'center',\r\n      width: 130,\r\n      cellClassName: (params: GridCellParams<number>) =>\r\n      clsx('super-app', {\r\n        negative: params.row.netpnl < 0,\r\n        positive: params.row.netpnl > 0,\r\n      }), \r\n      valueGetter: (params) =>{\r\n        return params.row.netpnl.toFixed(2); \r\n      }\r\n    },\r\n    {\r\n      field: 'charges',\r\n      headerName: 'Charges',\r\n      headerAlign:'center',\r\n      type: 'number',\r\n      align:'center',\r\n      width: 110,\r\n      valueGetter: (params) =>{\r\n        return params.row.charges.toFixed(2); \r\n      }\r\n    },\r\n    {\r\n      field: 'brokerage',\r\n      headerName: 'Brokerage',\r\n      headerAlign:'center',\r\n      type: 'number',\r\n      align:'center',\r\n      width: 110,\r\n      valueGetter: (params) =>{\r\n        return params.row.brokerage.toFixed(2); \r\n      }\r\n    },\r\n    {\r\n      field: 'result',\r\n      headerName: 'Result',\r\n      headerAlign:'center',\r\n      type: 'number',\r\n      align:'center',\r\n      width: 110,\r\n    },\r\n    {\r\n      field: 'quantity',\r\n      headerName: 'Quantity',\r\n      headerAlign:'center',\r\n      type: 'number',\r\n      align:'center',\r\n      width: 130,\r\n      valueGetter: (params) =>{\r\n        return params.row.quantity > 0 ? params.row.quantity : '-'; \r\n      } \r\n    },\r\n    { \r\n      field: 'date', \r\n      headerName: 'Entry Time', \r\n      headerAlign:'center',\r\n      width: 110,\r\n      align:'left',\r\n      valueGetter: (params) =>{\r\n        const date = new Date(params.row.date);\r\n        let hours = date.getHours();\r\n        let minutes = date.getMinutes();\r\n        var ampm = hours >= 12 ? 'pm' : 'am';\r\n        hours = hours % 12;\r\n        hours = hours ? hours : 12; // the hour '0' should be '12'\r\n        minutes = minutes < 10 ? (0 + minutes) : minutes;\r\n        var strTime = hours + ':' + (minutes< 10 ? '0' : '')+minutes + ' ' + ampm;\r\n        return strTime;\r\n      } \r\n    },\r\n    { \r\n      field: 'candleTime', \r\n      headerName: 'Exit Time', \r\n      headerAlign:'center',\r\n      width: 110,\r\n      align:'left',\r\n      valueGetter: (params) =>{\r\n        const date = new Date(params.row.candleTime);\r\n        let hours = date.getHours();\r\n        let minutes = date.getMinutes();\r\n        var ampm = hours >= 12 ? 'pm' : 'am';\r\n        hours = hours % 12;\r\n        hours = hours ? hours : 12; // the hour '0' should be '12'\r\n        minutes = minutes < 10 ? (0 + minutes) : minutes;\r\n        var strTime = hours + ':' + (minutes< 10 ? '0' : '')+minutes + ' ' + ampm;\r\n        return strTime;\r\n      }\r\n    }\r\n  ];\r\n\r\n  React.useEffect(() => {\r\n    fetchRecords();\r\n    const selectedDate = `${dpDate.getDate()}-${dpDate.getMonth()}-${dpDate.getFullYear()}`;\r\n    const currDate = `${new Date().getDate()}-${new Date().getMonth()}-${new Date().getFullYear()}`;\r\n    if(selectedDate == currDate)\r\n        setNextDisable(true);\r\n      else\r\n      setNextDisable(false);\r\n  }, [dpDate]);\r\n\r\n  const fetchRecords = async () => {\r\n    try {\r\n      setIsDataFetching(true);\r\n      const [moneyFluxOrdersResult, moneyfluxStoksResult] = await Promise.all([\r\n        FetchMonefluxOrdersDataService(dpDate!),\r\n        FetchMoneyfluxStocksDataService(dpDate!),\r\n      ]);\r\n\r\n      setMoneyfluxOrdersData(moneyFluxOrdersResult);\r\n      setMoneyfluxStocksData(moneyfluxStoksResult);\r\n\r\n      setIsDataFetching(false);\r\n    } catch (error: any) {\r\n      snackbar.error(error.message);\r\n      setIsDataFetching(false);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (date: Date) => {\r\n    setDPDate(date);\r\n  };\r\n\r\n  const toggleDate = (action:string) => {\r\n    let currDate = dpDate;\r\n    if(action === 'prev'){\r\n      const newDate = new Date(dpDate.getTime() - 24 * 60 * 60 * 1000);\r\n      setDPDate(newDate);\r\n    }else if(action === 'next'){\r\n      const newDate = new Date(dpDate.getTime() + 24 * 60 * 60 * 1000);\r\n      setDPDate(newDate);\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <React.Fragment>\r\n      <AdminAppBar>\r\n        <AdminToolbar title={\"Moneyflux Stocks List\"}></AdminToolbar>\r\n      </AdminAppBar>\r\n      <Grid container spacing={2}>\r\n        <Grid item sm={4} sx={{ marginLeft: \"10px\", display: \"flex\" }}>\r\n          <DatePicker\r\n            label={\"Date\"}\r\n            onChange={(date: Date | null) => handleSubmit(date!)}\r\n            inputFormat=\"dd/MM/yyyy\"\r\n            disableFuture={true}\r\n            shouldDisableDate={(date: any) =>\r\n              date.getDay() === 0 || date.getDay() === 6\r\n            }\r\n            value={dpDate}\r\n            renderInput={(params: any) => (\r\n              <><IconButton onClick={() => toggleDate('prev')} aria-label=\"previous\" style={{height:'fit-content',width:'fit-content',marginTop:'25px',marginRight:'2px',paddingRight:'0px',borderRadius:'10px'}}>\r\n                  {\r\n                    isDataFetching ? <CircularProgress style={{height:'15px',width:'15px'}}/> : <ArrowBackIos style={{height:'15px',width:'15px'}}/>\r\n                  }\r\n                </IconButton>\r\n                <TextField {...params} id=\"date\" margin=\"normal\" name=\"start\"/>\r\n                <IconButton disabled={nextDisable} onClick={() => toggleDate('next')} aria-label=\"next\" style={{height:'fit-content',width:'fit-content',marginTop:'25px',marginLeft:'0px',paddingLeft:'4px',borderRadius:'10px'}}>\r\n                  {\r\n                    isDataFetching ? <CircularProgress style={{height:'15px',width:'15px'}}/> : <ArrowForwardIos style={{height:'15px',width:'15px'}}/>\r\n                  }\r\n                </IconButton>\r\n              </>\r\n            )}\r\n          />\r\n          <Button\r\n            sx={{\r\n              marginLeft: \"10px\",\r\n              marginTop: \"15px\",\r\n              height: \"fit-content\",\r\n            }}\r\n            onClick={fetchRecords}\r\n          >\r\n            <RefreshIcon />\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Box sx={{ width: \"100%\", marginTop: \"10px\", marginBottom: \"10px\" }}>\r\n        {isDataFetching && <LinearProgress />}\r\n      </Box>\r\n      <Grid container spacing={2}>\r\n        <Grid item sm={12} sx={{ paddingLeft: \"20px !important\" }}>\r\n          <Card variant=\"outlined\" sx={{ padding: \"20px\" }}>\r\n            <CardHeader\r\n              title={'Moneyflux Orders'}\r\n              sx={{ padding: \"5px 24px 0 24px\" }}\r\n            ></CardHeader>\r\n            <CardContent sx={{ padding: \"10px !important\" }}>\r\n              {isDataFetching ? (\r\n                <Skeleton animation=\"wave\" />\r\n              ) : (\r\n                <OrdersTable columns={orderDataColumns} ordersData={moneyfluxOrdersData} />\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item sm={12} sx={{ paddingLeft: \"20px !important\" }}>\r\n          <Card variant=\"outlined\" sx={{ padding: \"20px\" }}>\r\n            <CardHeader\r\n              title={'Moneyflux Stocks'}\r\n              sx={{ padding: \"5px 24px 0 24px\" }}\r\n            ></CardHeader>\r\n            <CardContent sx={{ padding: \"10px !important\" }}>\r\n              {isDataFetching ? (\r\n                <Skeleton animation=\"wave\" />\r\n              ) : (\r\n                <MoneyfluxStocksTable moneyfluxData={moneyfluxStocksData} />\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default MoneyfluxStocksListManagement;\r\n"],"names":["_ref","_ref$moneyfluxData","moneyfluxData","_React$useState","React","_React$useState2","_slicedToArray","pageSize","setPageSize","columns","field","headerName","align","width","headerAlign","type","valueGetter","params","date","Date","row","hours","getHours","minutes","getMinutes","ampm","length","_jsx","Empty","title","children","Box","sx","height","DataGrid","rows","disableColumnSelector","components","Toolbar","_jsxs","GridToolbarContainer","padding","GridToolbarColumnsButton","onResize","undefined","nonce","onResizeCapture","GridToolbarFilterButton","GridToolbarDensitySelector","GridToolbarExport","getRowId","_id","isRowSelectable","rowsPerPageOptions","onPageSizeChange","newPageSize","BASE_URL","getBaseUrl","FetchMonefluxOrdersDataService","_asyncToGenerator","_regeneratorRuntime","mark","_callee","ordersData","strDate","wrap","_context","prev","next","getFullYear","getMonth","getDate","fetch","concat","sent","json","abrupt","orderData","stop","_x","apply","arguments","FetchMoneyfluxStocksDataService","_ref2","_callee2","data","_context2","moneyFluxData","_x2","_useState","useState","_useState2","dpDate","setDPDate","_useState3","_useState4","isDataFetching","setIsDataFetching","_useState5","_useState6","moneyfluxOrdersData","setMoneyfluxOrdersData","_useState7","_useState8","moneyfluxStocksData","setMoneyfluxStocksData","_useState9","_useState10","nextDisable","setNextDisable","snackbar","useSnackbar","orderDataColumns","cellClassName","clsx","negative","profitAndLoss","positive","toFixed","netpnl","charges","brokerage","quantity","candleTime","fetchRecords","selectedDate","currDate","_yield$Promise$all","_yield$Promise$all2","moneyFluxOrdersResult","moneyfluxStoksResult","Promise","all","t0","error","message","handleSubmit","toggleDate","action","newDate","getTime","AdminAppBar","AdminToolbar","Grid","container","spacing","item","sm","marginLeft","display","DatePicker","label","onChange","inputFormat","disableFuture","shouldDisableDate","getDay","value","renderInput","_Fragment","IconButton","onClick","style","marginTop","marginRight","paddingRight","borderRadius","CircularProgress","ArrowBackIos","TextField","_objectSpread","id","margin","name","disabled","paddingLeft","ArrowForwardIos","Button","RefreshIcon","marginBottom","LinearProgress","Card","variant","CardHeader","CardContent","Skeleton","animation","OrdersTable","MoneyfluxStocksTable"],"sourceRoot":""}