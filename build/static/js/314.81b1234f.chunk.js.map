{"version":3,"file":"static/js/314.81b1234f.chunk.js","mappings":"gTAGA,MAAMA,EAAiBC,UAAyC,IAAlC,MAAEC,GAA0BC,EACxD,MAAM,KAAEC,SAAeC,EAAAA,EAAMC,KAAK,uBAAwB,CAAEJ,UAC5D,OAAOE,CAAI,EAGN,SAASG,IACd,MAAM,UAAEC,EAAS,YAAEC,IAAgBC,EAAAA,EAAAA,aAAYV,GAC/C,MAAO,CAAEQ,YAAWR,eAAgBS,EACtC,C,eCEA,MAkFA,EAlFuBE,KACrB,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OACX,EAAEC,IAAMC,EAAAA,EAAAA,MAER,eAAEjB,EAAc,UAAEQ,GAAcD,IAEhCW,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACblB,MAAO,IAETmB,iBAAkBC,EAAAA,GAAW,CAC3BpB,MAAOoB,EAAAA,KACJpB,MAAMc,EAAE,6BACRO,SAASP,EAAE,kCAEhBQ,SAAUrB,IAAA,IAAC,MAAED,GAAOC,EAAA,OAAKsB,EAAqBvB,EAAM,IAGhDuB,EAAuBxB,UAC3BD,EAAe,CAAEE,UACdwB,MAAK,KACJZ,EAASa,QAAQX,EAAE,8CACnBJ,EAAS,2BAAoD,IAE9DgB,OAAM,KACLd,EAASe,MAAMb,EAAE,qCAAqC,GACtD,EAGN,OACEc,EAAAA,EAAAA,MAACC,EAAAA,EAAW,CAAAC,SAAA,EACVC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,UAAU,KAAKC,QAAQ,KAAIJ,SACpChB,EAAE,gCAELiB,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACG,UAAW,EAAEL,SAAEhB,EAAE,mCAC7Bc,EAAAA,EAAAA,MAACQ,EAAAA,EAAG,CACFH,UAAU,OACVE,UAAW,EACXE,YAAU,EACVf,SAAUN,EAAOsB,aAAaR,SAAA,EAE9BC,EAAAA,EAAAA,KAACQ,EAAAA,EAAS,CACRC,OAAO,SACPnB,UAAQ,EACRoB,WAAS,EACTC,GAAG,QACHC,MAAO7B,EAAE,wCACT8B,KAAK,QACLC,aAAa,QACbC,WAAS,EACTC,SAAUzC,EACV0C,MAAOhC,EAAOiC,OAAOjD,MACrBkD,SAAUlC,EAAOmC,aACjBxB,MAAOX,EAAOoC,QAAQpD,OAASqD,QAAQrC,EAAOsC,OAAOtD,OACrDuD,WAAYvC,EAAOoC,QAAQpD,OAASgB,EAAOsC,OAAOtD,SAEpD+B,EAAAA,EAAAA,KAACyB,EAAAA,EAAa,CACZC,KAAK,SACLhB,WAAS,EACTP,QAAQ,YACRwB,MAAM,UACNX,SAAUzC,EACVqD,QAASrD,EACTsD,GAAI,CAAEC,GAAI,GAAI/B,SAEbhB,EAAE,sCAELiB,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CACL7B,UAAW8B,EAAAA,GACXC,GAAI,UACJN,MAAM,UACNjB,WAAS,EACTmB,GAAI,CAAEC,GAAI,GAAI/B,SAEbhB,EAAE,wCAGK,C,uNCvElB,MAiEA,EAjEoBb,IAAqC,IAApC,SAAE6B,GAA4B7B,EACjD,MAAMgE,GAAQC,EAAAA,EAAAA,MACPC,EAAcC,IAAmBC,EAAAA,EAAAA,WAAS,IAC3C,OAAEC,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,MACvB5D,GAAWC,EAAAA,EAAAA,MACX4D,EAAQC,aAAaC,QAAQ,WAE7BC,EAAuBA,KAC3BR,GAAiBD,EAAa,EAWhC,OACEvC,EAAAA,EAAAA,MAACiD,EAAAA,SAAc,CAAA/C,SAAA,EACbC,EAAAA,EAAAA,KAAC+C,EAAAA,EAAY,CACXC,OAAQ,CAAEC,KAAM,CAAEC,gBAAiBhB,EAAMiB,QAAQC,WAAWC,WAE9DrD,EAAAA,EAAAA,KAACsD,EAAAA,EAAM,CAAC3B,MAAM,cAAc4B,SAAS,WAAUxD,UAC7CF,EAAAA,EAAAA,MAAC2D,EAAAA,EAAO,CAAAzD,SAAA,EACNC,EAAAA,EAAAA,KAACK,EAAAA,EAAG,CAACwB,GAAI,CAAE4B,SAAU,KACX,IAATf,IAAe1C,EAAAA,EAAAA,KAAC0D,EAAAA,EAAU,CACzB,aAAW,SACXxD,UAAU,OACVyD,QAnBWC,KACnBrB,IAAS9C,MAAK,KACXoE,EAAAA,EAAoD,IACpDlE,OAAOmE,GACRjF,EAASe,MAAMkE,IAChB,EAc6B/D,UAEtBC,EAAAA,EAAAA,KAAC+D,EAAAA,EAAa,OAEhB/D,EAAAA,EAAAA,KAAC0D,EAAAA,EAAU,CACT,aAAW,WACXxD,UAAU,OACVyD,QAASd,EAAqB9C,UAE9BC,EAAAA,EAAAA,KAACgE,EAAAA,EAAY,YAInBhE,EAAAA,EAAAA,KAACiE,EAAAA,EAAS,CAAC/D,UAAU,OAAOgE,SAAS,KAAKrC,GAAI,CAAEC,GAAI,GAAI/B,UACtDF,EAAAA,EAAAA,MAACQ,EAAAA,EAAG,CACFwB,GAAI,CACFsC,QAAS,OACTC,cAAe,SACfC,WAAY,UACZtE,SAAA,EAEFC,EAAAA,EAAAA,KAACsE,EAAAA,EAAI,CAACzC,GAAI,CAAE0C,GAAI,KACfxE,GACDC,EAAAA,EAAAA,KAACK,EAAAA,EAAG,CAAAN,UACFC,EAAAA,EAAAA,KAACwE,EAAAA,EAAc,CACbC,eAAgB5B,EAChB6B,KAAMtC,aAKC,C,2MC7DrB,MA6IA,EA7IuBlE,IAAoD,IAAnD,eAAEuG,EAAc,KAAEC,GAA2BxG,EACnE,MAAM,gBACJyG,EAAe,gBACfC,EAAe,WACfC,EAAU,UACVC,EAAS,UACTC,EAAS,KACTC,IACEC,EAAAA,EAAAA,OACE,KAAEC,EAAI,EAAEnG,IAAMC,EAAAA,EAAAA,KAkBpB,OACEa,EAAAA,EAAAA,MAACsF,EAAAA,GAAM,CACLC,OAAO,OACPV,KAAMA,EACNW,QAASZ,EACT5C,GAAI,CACF,qBAAsB,CACpByD,MAAOC,EAAAA,IAGXpF,QAAQ,YAAWJ,SAAA,EAEnBF,EAAAA,EAAAA,MAACQ,EAAAA,EAAG,CACFwB,GAAI,CACFsC,QAAS,OACTqB,eAAgB,gBAChBnB,WAAY,SACZoB,EAAG,GACH1F,SAAA,EAEFC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACE,QAAQ,KAAIJ,SAAEhB,EAAE,4BAC5BiB,EAAAA,EAAAA,KAAC0D,EAAAA,EAAU,CAAC/B,MAAM,UAAUgC,QAASc,EAAgBiB,KAAK,MAAK3F,UAC7DC,EAAAA,EAAAA,KAAC2F,EAAAA,EAAS,UAGd9F,EAAAA,EAAAA,MAACQ,EAAAA,EAAG,CAACwB,GAAI,CAAE+D,GAAI,EAAGC,GAAI,GAAI9F,SAAA,EACxBC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACT6F,cAAY,EACZnF,GAAG,oBACHP,UAAW,EACXD,QAAQ,KAAIJ,SAEXhB,EAAE,qCAELiB,EAAAA,EAAAA,KAAC+F,EAAAA,EAAW,CAAAhG,UACVF,EAAAA,EAAAA,MAACmG,EAAAA,EAAU,CACT,aAAW,WACXnF,KAAK,uBACLM,SAlDoB8E,IAC5Bf,EAAKgB,eAAgBD,EAAME,OAA4BlF,MAAM,EAkDrDA,MAAOiE,EAAKkB,SAASrG,SAAA,EAErBC,EAAAA,EAAAA,KAACqG,EAAAA,EAAgB,CACfpF,MAAM,KACNqF,SAAStG,EAAAA,EAAAA,KAACuG,EAAAA,EAAK,IACf3F,MAAO7B,EAAE,0CAEXiB,EAAAA,EAAAA,KAACqG,EAAAA,EAAgB,CACfpF,MAAM,KACNqF,SAAStG,EAAAA,EAAAA,KAACuG,EAAAA,EAAK,IACf3F,MAAO7B,EAAE,+CAIfiB,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAAC6F,cAAY,EAACnF,GAAG,gBAAgBP,UAAW,EAAGD,QAAQ,KAAIJ,SACnEhB,EAAE,iCAELc,EAAAA,EAAAA,MAAC2G,EAAAA,EAAiB,CAChB7E,MAAM,UACNV,MAAO+D,EACPyB,WAAS,EACT/F,WAAS,EACTS,SArEiBuF,CAACC,EAAQ3B,KAChCH,EAAWG,EAAK,EAoEiBjF,SAAA,EAE3BC,EAAAA,EAAAA,KAAC4G,EAAAA,EAAY,CAAC3F,MAAM,QAAOlB,SACxBhB,EAAE,yCAELiB,EAAAA,EAAAA,KAAC4G,EAAAA,EAAY,CAAC3F,MAAM,OAAMlB,SACvBhB,EAAE,2CAGPiB,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAAC6F,cAAY,EAACnF,GAAG,gBAAgBP,UAAW,EAAGD,QAAQ,KAAIJ,SACnEhB,EAAE,sCAELc,EAAAA,EAAAA,MAAC2G,EAAAA,EAAiB,CAChB7E,MAAM,UACNV,MAAO8D,EACP0B,WAAS,EACT/F,WAAS,EACTS,SA9FsB0F,CAACF,EAAQ5B,KACrCH,EAAgBG,EAAU,EA6FYhF,SAAA,EAEhCC,EAAAA,EAAAA,KAAC4G,EAAAA,EAAY,CAAC3F,MAAM,MAAKlB,SACtBhB,EAAE,4CAELiB,EAAAA,EAAAA,KAAC4G,EAAAA,EAAY,CAAC3F,MAAM,MAAKlB,SACtBhB,EAAE,+CAGPiB,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACT6F,cAAY,EACZnF,GAAG,mBACHP,UAAW,EACXD,QAAQ,KAAIJ,SAEXhB,EAAE,oCAELc,EAAAA,EAAAA,MAAC2G,EAAAA,EAAiB,CAChB7E,MAAM,UACNV,MAAO6D,EACP2B,WAAS,EACT/F,WAAS,EACTS,SAxGoB2F,CAACH,EAAQ7B,KACnCH,EAAgBG,EAAU,EAuGU/E,SAAA,EAE9BC,EAAAA,EAAAA,KAAC4G,EAAAA,EAAY,CAAC3F,OAAO,EAAKlB,SACvBhB,EAAE,gDAELiB,EAAAA,EAAAA,KAAC4G,EAAAA,EAAY,CAAC3F,OAAO,EAAMlB,SACxBhB,EAAE,kDAIF,C","sources":["auth/hooks/useForgotPassword.ts","auth/pages/ForgotPassword.tsx","core/components/BoxedLayout.tsx","core/components/SettingsDrawer.tsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { useMutation } from \"react-query\";\r\n\r\nconst forgotPassword = async ({ email }: { email: string }) => {\r\n  const { data } = await axios.post(\"/api/forgot-password\", { email });\r\n  return data;\r\n};\r\n\r\nexport function useForgotPassword() {\r\n  const { isLoading, mutateAsync } = useMutation(forgotPassword);\r\n  return { isLoading, forgotPassword: mutateAsync };\r\n}\r\n","import Box from \"@material-ui/core/Box\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport LoadingButton from \"@material-ui/lab/LoadingButton\";\r\nimport { useFormik } from \"formik\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\nimport * as Yup from \"yup\";\r\nimport BoxedLayout from \"../../core/components/BoxedLayout\";\r\nimport { useSnackbar } from \"../../core/contexts/SnackbarProvider\";\r\nimport { useForgotPassword } from \"../hooks/useForgotPassword\";\r\n\r\nconst ForgotPassword = () => {\r\n  const navigate = useNavigate();\r\n  const snackbar = useSnackbar();\r\n  const { t } = useTranslation();\r\n\r\n  const { forgotPassword, isLoading } = useForgotPassword();\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: \"\",\r\n    },\r\n    validationSchema: Yup.object({\r\n      email: Yup.string()\r\n        .email(t(\"common.validations.email\"))\r\n        .required(t(\"common.validations.required\")),\r\n    }),\r\n    onSubmit: ({ email }) => handleForgotPassword(email),\r\n  });\r\n\r\n  const handleForgotPassword = async (email: string) => {\r\n    forgotPassword({ email })\r\n      .then(() => {\r\n        snackbar.success(t(\"auth.forgotPassword.notifications.success\"));\r\n        navigate(`/${process.env.PUBLIC_URL}/forgot-password-submit`);\r\n      })\r\n      .catch(() => {\r\n        snackbar.error(t(\"common.errors.unexpected.subTitle\"));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <BoxedLayout>\r\n      <Typography component=\"h1\" variant=\"h5\">\r\n        {t(\"auth.forgotPassword.title\")}\r\n      </Typography>\r\n      <Typography marginTop={3}>{t(\"auth.forgotPassword.subTitle\")}</Typography>\r\n      <Box\r\n        component=\"form\"\r\n        marginTop={3}\r\n        noValidate\r\n        onSubmit={formik.handleSubmit}\r\n      >\r\n        <TextField\r\n          margin=\"normal\"\r\n          required\r\n          fullWidth\r\n          id=\"email\"\r\n          label={t(\"auth.forgotPassword.form.email.label\")}\r\n          name=\"email\"\r\n          autoComplete=\"email\"\r\n          autoFocus\r\n          disabled={isLoading}\r\n          value={formik.values.email}\r\n          onChange={formik.handleChange}\r\n          error={formik.touched.email && Boolean(formik.errors.email)}\r\n          helperText={formik.touched.email && formik.errors.email}\r\n        />\r\n        <LoadingButton\r\n          type=\"submit\"\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          disabled={isLoading}\r\n          loading={isLoading}\r\n          sx={{ mt: 2 }}\r\n        >\r\n          {t(\"auth.forgotPassword.form.action\")}\r\n        </LoadingButton>\r\n        <Button\r\n          component={RouterLink}\r\n          to={`/${process.env.PUBLIC_URL}/login`}\r\n          color=\"primary\"\r\n          fullWidth\r\n          sx={{ mt: 2 }}\r\n        >\r\n          {t(\"auth.forgotPassword.form.back\")}\r\n        </Button>\r\n      </Box>\r\n    </BoxedLayout>\r\n  );\r\n};\r\n\r\nexport default ForgotPassword;\r\n","import AppBar from \"@material-ui/core/AppBar\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport GlobalStyles from \"@material-ui/core/GlobalStyles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport useTheme from \"@material-ui/core/styles/useTheme\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport React, { useState } from \"react\";\r\nimport Logo from \"./Logo\";\r\nimport SettingsDrawer from \"./SettingsDrawer\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport { useAuth } from \"../../auth/contexts/AuthProvider\";\r\nimport { useSnackbar } from \"../../core/contexts/SnackbarProvider\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\ntype BoxedLayoutProps = {\r\n  children: React.ReactNode;\r\n};\r\n\r\nconst BoxedLayout = ({ children }: BoxedLayoutProps) => {\r\n  const theme = useTheme();\r\n  const [settingsOpen, setSettingsOpen] = useState(false);\r\n  const { logout, userInfo } = useAuth();\r\n  const snackbar = useSnackbar();\r\n  const token = localStorage.getItem('authkey');\r\n  \r\n  const handleSettingsToggle = () => {\r\n    setSettingsOpen(!settingsOpen);\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    logout().then(()=>{\r\n      <Navigate to={`/${process.env.PUBLIC_URL}`} replace/>\r\n    }).catch((err:any) =>\r\n      snackbar.error(err)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <GlobalStyles\r\n        styles={{ body: { backgroundColor: theme.palette.background.paper } }}\r\n      />\r\n      <AppBar color=\"transparent\" position=\"relative\">\r\n        <Toolbar>\r\n          <Box sx={{ flexGrow: 1 }} />\r\n          {token != '' && <IconButton\r\n            aria-label=\"logout\"\r\n            component=\"span\"\r\n            onClick={handleLogout}\r\n          >\r\n            <ExitToAppIcon />\r\n          </IconButton>}\r\n          <IconButton\r\n            aria-label=\"settings\"\r\n            component=\"span\"\r\n            onClick={handleSettingsToggle}\r\n          >\r\n            <SettingsIcon />\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container component=\"main\" maxWidth=\"xs\" sx={{ mt: 6 }}>\r\n        <Box\r\n          sx={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Logo sx={{ mb: 2 }} />\r\n          {children}\r\n          <Box>\r\n            <SettingsDrawer\r\n              onDrawerToggle={handleSettingsToggle}\r\n              open={settingsOpen}\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BoxedLayout;\r\n","import Box from \"@material-ui/core/Box\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport ToggleButton from \"@material-ui/core/ToggleButton\";\r\nimport ToggleButtonGroup from \"@material-ui/core/ToggleButtonGroup\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { drawerWidth } from \"../config/layout\";\r\nimport { useSettings } from \"../contexts/SettingsProvider\";\r\n\r\ntype SettingsDrawerProps = {\r\n  onDrawerToggle: () => void;\r\n  open: boolean;\r\n};\r\n\r\nconst SettingsDrawer = ({ onDrawerToggle, open }: SettingsDrawerProps) => {\r\n  const {\r\n    changeCollapsed,\r\n    changeDirection,\r\n    changeMode,\r\n    collapsed,\r\n    direction,\r\n    mode,\r\n  } = useSettings();\r\n  const { i18n, t } = useTranslation();\r\n\r\n  const handleDirectionChange = (_: any, direction: \"ltr\" | \"rtl\") => {\r\n    changeDirection(direction);\r\n  };\r\n\r\n  const handleLanguageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    i18n.changeLanguage((event.target as HTMLInputElement).value);\r\n  };\r\n\r\n  const handleModeChange = (_: any, mode: string) => {\r\n    changeMode(mode);\r\n  };\r\n\r\n  const handleSidebarChange = (_: any, collapsed: boolean) => {\r\n    changeCollapsed(collapsed);\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      anchor=\"left\"\r\n      open={open}\r\n      onClose={onDrawerToggle}\r\n      sx={{\r\n        \"& .MuiDrawer-paper\": {\r\n          width: drawerWidth,\r\n        },\r\n      }}\r\n      variant=\"temporary\"\r\n    >\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          alignItems: \"center\",\r\n          p: 2,\r\n        }}\r\n      >\r\n        <Typography variant=\"h5\">{t(\"settings.drawer.title\")}</Typography>\r\n        <IconButton color=\"inherit\" onClick={onDrawerToggle} edge=\"end\">\r\n          <CloseIcon />\r\n        </IconButton>\r\n      </Box>\r\n      <Box sx={{ pl: 2, pr: 2 }}>\r\n        <Typography\r\n          gutterBottom\r\n          id=\"settings-language\"\r\n          marginTop={3}\r\n          variant=\"h6\"\r\n        >\r\n          {t(\"settings.drawer.language.label\")}\r\n        </Typography>\r\n        <FormControl>\r\n          <RadioGroup\r\n            aria-label=\"language\"\r\n            name=\"language-radio-group\"\r\n            onChange={handleLanguageChange}\r\n            value={i18n.language}\r\n          >\r\n            <FormControlLabel\r\n              value=\"en\"\r\n              control={<Radio />}\r\n              label={t(\"settings.drawer.language.options.en\")}\r\n            />\r\n            <FormControlLabel\r\n              value=\"fr\"\r\n              control={<Radio />}\r\n              label={t(\"settings.drawer.language.options.fr\")}\r\n            />\r\n          </RadioGroup>\r\n        </FormControl>\r\n        <Typography gutterBottom id=\"settings-mode\" marginTop={3} variant=\"h6\">\r\n          {t(\"settings.drawer.mode.label\")}\r\n        </Typography>\r\n        <ToggleButtonGroup\r\n          color=\"primary\"\r\n          value={mode}\r\n          exclusive\r\n          fullWidth\r\n          onChange={handleModeChange}\r\n        >\r\n          <ToggleButton value=\"light\">\r\n            {t(\"settings.drawer.mode.options.light\")}\r\n          </ToggleButton>\r\n          <ToggleButton value=\"dark\">\r\n            {t(\"settings.drawer.mode.options.dark\")}\r\n          </ToggleButton>\r\n        </ToggleButtonGroup>\r\n        <Typography gutterBottom id=\"settings-mode\" marginTop={3} variant=\"h6\">\r\n          {t(\"settings.drawer.direction.label\")}\r\n        </Typography>\r\n        <ToggleButtonGroup\r\n          color=\"primary\"\r\n          value={direction}\r\n          exclusive\r\n          fullWidth\r\n          onChange={handleDirectionChange}\r\n        >\r\n          <ToggleButton value=\"ltr\">\r\n            {t(\"settings.drawer.direction.options.ltr\")}\r\n          </ToggleButton>\r\n          <ToggleButton value=\"rtl\">\r\n            {t(\"settings.drawer.direction.options.rtl\")}\r\n          </ToggleButton>\r\n        </ToggleButtonGroup>\r\n        <Typography\r\n          gutterBottom\r\n          id=\"settings-sidebar\"\r\n          marginTop={3}\r\n          variant=\"h6\"\r\n        >\r\n          {t(\"settings.drawer.sidebar.label\")}\r\n        </Typography>\r\n        <ToggleButtonGroup\r\n          color=\"primary\"\r\n          value={collapsed}\r\n          exclusive\r\n          fullWidth\r\n          onChange={handleSidebarChange}\r\n        >\r\n          <ToggleButton value={true}>\r\n            {t(\"settings.drawer.sidebar.options.collapsed\")}\r\n          </ToggleButton>\r\n          <ToggleButton value={false}>\r\n            {t(\"settings.drawer.sidebar.options.full\")}\r\n          </ToggleButton>\r\n        </ToggleButtonGroup>\r\n      </Box>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default SettingsDrawer;\r\n"],"names":["forgotPassword","async","email","_ref","data","axios","post","useForgotPassword","isLoading","mutateAsync","useMutation","ForgotPassword","navigate","useNavigate","snackbar","useSnackbar","t","useTranslation","formik","useFormik","initialValues","validationSchema","Yup","required","onSubmit","handleForgotPassword","then","success","catch","error","_jsxs","BoxedLayout","children","_jsx","Typography","component","variant","marginTop","Box","noValidate","handleSubmit","TextField","margin","fullWidth","id","label","name","autoComplete","autoFocus","disabled","value","values","onChange","handleChange","touched","Boolean","errors","helperText","LoadingButton","type","color","loading","sx","mt","Button","RouterLink","to","theme","useTheme","settingsOpen","setSettingsOpen","useState","logout","userInfo","useAuth","token","localStorage","getItem","handleSettingsToggle","React","GlobalStyles","styles","body","backgroundColor","palette","background","paper","AppBar","position","Toolbar","flexGrow","IconButton","onClick","handleLogout","Navigate","err","ExitToAppIcon","SettingsIcon","Container","maxWidth","display","flexDirection","alignItems","Logo","mb","SettingsDrawer","onDrawerToggle","open","changeCollapsed","changeDirection","changeMode","collapsed","direction","mode","useSettings","i18n","Drawer","anchor","onClose","width","drawerWidth","justifyContent","p","edge","CloseIcon","pl","pr","gutterBottom","FormControl","RadioGroup","event","changeLanguage","target","language","FormControlLabel","control","Radio","ToggleButtonGroup","exclusive","handleModeChange","_","ToggleButton","handleDirectionChange","handleSidebarChange"],"sourceRoot":""}