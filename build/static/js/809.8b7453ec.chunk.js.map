{"version":3,"file":"static/js/809.8b7453ec.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/Card/cardClasses.js","../node_modules/@mui/material/Card/Card.js","../node_modules/@mui/icons-material/Login.js","accountManager/components/BrokerCard.tsx","../node_modules/@mui/icons-material/Visibility.js","../node_modules/@mui/icons-material/Refresh.js","accountManager/components/ConnectBroker.tsx","accountManager/pages/accountManager.tsx","../node_modules/@mui/icons-material/Delete.js","../node_modules/@mui/material/Stack/Stack.js","candleOperations/hooks/candleServices.tsx","../node_modules/@mui/icons-material/SaveAlt.js","../node_modules/@mui/icons-material/Edit.js","../node_modules/@mui/icons-material/PersonAddAlt.js"],"sourcesContent":["import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getCardUtilityClass(slot) {\n  return generateUtilityClass('MuiCard', slot);\n}\nconst cardClasses = generateUtilityClasses('MuiCard', ['root']);\nexport default cardClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"raised\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport Paper from '../Paper';\nimport { getCardUtilityClass } from './cardClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardUtilityClass, classes);\n};\nconst CardRoot = styled(Paper, {\n  name: 'MuiCard',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    overflow: 'hidden'\n  };\n});\nconst Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCard'\n  });\n  const {\n      className,\n      raised = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    raised\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardRoot, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : undefined,\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised: chainPropTypes(PropTypes.bool, props => {\n    if (props.raised && props.variant === 'outlined') {\n      return new Error('MUI: Combining `raised={true}` with `variant=\"outlined\"` has no effect.');\n    }\n    return null;\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Card;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M11 7 9.6 8.4l2.6 2.6H2v2h10.2l-2.6 2.6L11 17l5-5-5-5zm9 12h-8v2h8c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-8v2h8v14z\"\n}), 'Login');\nexports.default = _default;","import React from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  Typography,\r\n  Switch,\r\n  IconButton,\r\n  Stack,\r\n  Grid,\r\n  CircularProgress,\r\n  useTheme\r\n} from '@mui/material';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\n\r\ninterface StatBoxProps {\r\n  label: string;\r\n  value: number;\r\n}\r\n\r\nconst StatBox: React.FC<StatBoxProps> = ({ label, value }) => {\r\n  const theme = useTheme();\r\n  return (\r\n    <Box sx={{ textAlign: 'center' }}>\r\n      <Typography variant=\"body2\" sx={{ \r\n        color: theme.palette.mode === 'dark' ? '#6B7280' : '#64748B'\r\n      }}>\r\n        {label}\r\n      </Typography>\r\n      <Typography variant=\"h6\" sx={{ \r\n        color: theme.palette.mode === 'dark' ? 'white' : '#1E293B',\r\n        mt: 1 \r\n      }}>\r\n        {value}\r\n      </Typography>\r\n    </Box>\r\n  );\r\n};\r\n\r\ninterface BrokerCardProps {\r\n  name: string;\r\n  margin: number;\r\n  isTrading: boolean;\r\n  stats: {\r\n    inGroup?: number;\r\n    pnl?: number;\r\n    margin?: number;\r\n    position?: any;\r\n    orders?: {\r\n      orders?: any;\r\n      total?: number;\r\n      cancelled?: number;\r\n      complete?: number;\r\n      pending?: number;\r\n      rejected?: number;\r\n    };\r\n    pending?: number;\r\n    complete?: number;\r\n    reject?: number;\r\n    cancel?: number;\r\n  };\r\n  onToggleTrading: () => void;\r\n  onRefresh: () => void;\r\n  onDelete: () => void;\r\n  onView: () => void;\r\n  onUpdateQuantity?: () => void;\r\n  isToggling?: boolean;\r\n  isActionButtonVisible?: boolean;\r\n}\r\n\r\nconst BrokerCard: React.FC<BrokerCardProps> = ({\r\n  name,\r\n  margin,\r\n  isTrading,\r\n  stats,\r\n  onToggleTrading,\r\n  onRefresh,\r\n  onDelete,\r\n  onView,\r\n  onUpdateQuantity,\r\n  isToggling = false,\r\n  isActionButtonVisible = true\r\n}) => {\r\n  const theme = useTheme();\r\n  \r\n  return (\r\n    <Card\r\n      sx={{\r\n        backgroundColor: theme.palette.mode === 'dark' ? '#1A1C1E' : '#FFFFFF',\r\n        borderRadius: 1,\r\n        p: 2,\r\n        boxShadow: theme.palette.mode === 'dark' \r\n          ? '0 4px 6px -1px rgba(0, 0, 0, 0.5)' \r\n          : '0 4px 6px -1px rgba(0, 0, 0, 0.1)',\r\n      }}\r\n    >\r\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n        <Box sx={{ display: 'flex', alignItems: 'center', flex: 1 }}>\r\n          <Box\r\n            sx={{\r\n              width: 8,\r\n              height: 8,\r\n              borderRadius: '50%',\r\n              backgroundColor: isTrading ? '#22C55E' : '#DC2626',\r\n              mr: 2,\r\n            }}\r\n          />\r\n          <Typography variant=\"subtitle1\" sx={{ \r\n            color: theme.palette.mode === 'dark' ? '#9CA3AF' : '#64748B',\r\n            flex: 1 \r\n          }}>\r\n            {name}\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\" sx={{ \r\n            color: theme.palette.mode === 'dark' ? 'white' : '#1E293B',\r\n            ml: 1 \r\n          }}>\r\n            Margin {stats.margin}\r\n          </Typography>\r\n        </Box>\r\n      </Box>\r\n\r\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n        <Typography sx={{ \r\n          color: theme.palette.mode === 'dark' ? '#6B7280' : '#64748B',\r\n          mr: 1 \r\n        }}>\r\n          Trading\r\n        </Typography>\r\n        {isToggling ? (\r\n          <CircularProgress size={24} sx={{ color: isTrading ? '#22C55E' : '#DC2626' }} />\r\n        ) : (\r\n          <Switch\r\n            checked={isTrading}\r\n            onChange={onToggleTrading}\r\n            sx={{\r\n              '& .MuiSwitch-thumb': {\r\n                backgroundColor: isTrading ? '#22C55E' : '#DC2626',\r\n              },\r\n              '& .MuiSwitch-track': {\r\n                backgroundColor: isTrading ? '#22C55E !important' : '#DC2626 !important',\r\n              }\r\n            }}\r\n          />\r\n        )}\r\n        <Box sx={{ flex: 1 }} />\r\n        {isActionButtonVisible ? <Stack direction=\"row\" spacing={1}>\r\n          <IconButton\r\n            size=\"small\"\r\n            sx={{ \r\n              backgroundColor: '#706d6d',\r\n              '&:hover': { backgroundColor: '#3e3e3e' }\r\n            }}\r\n            onClick={onUpdateQuantity}\r\n          >\r\n            <EditIcon fontSize=\"small\" sx={{ color: 'white' }} />\r\n          </IconButton>\r\n          <IconButton\r\n            size=\"small\"\r\n            sx={{ \r\n              backgroundColor: '#DC2626',\r\n              '&:hover': { backgroundColor: '#B91C1C' }\r\n            }}\r\n            onClick={onDelete}\r\n          >\r\n            <DeleteIcon fontSize=\"small\" sx={{ color: 'white' }} />\r\n          </IconButton>\r\n          <IconButton\r\n            size=\"small\"\r\n            sx={{ \r\n              backgroundColor: '#F59E0B',\r\n              '&:hover': { backgroundColor: '#D97706' }\r\n            }}\r\n            onClick={onRefresh}\r\n          >\r\n            <RefreshIcon fontSize=\"small\" sx={{ color: 'white' }} />\r\n          </IconButton>\r\n          <IconButton\r\n            size=\"small\"\r\n            sx={{ \r\n              backgroundColor: '#3B82F6',\r\n              '&:hover': { backgroundColor: '#2563EB' }\r\n            }}\r\n            onClick={onView}\r\n          >\r\n            <VisibilityIcon fontSize=\"small\" sx={{ color: 'white' }} />\r\n          </IconButton>\r\n        </Stack> : <Typography variant='h5' sx={{ color: '#0EA5E9',\r\n              fontWeight: 600 \r\n            }}> Master Account</Typography>}\r\n      </Box>\r\n\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={3}>\r\n          <StatBox label=\"In Group\" value={stats.inGroup || 0} />\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <StatBox label=\"P&L\" value={stats.pnl || 0} />\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <StatBox label=\"POS\" value={stats?.position?.length || 0} />\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <StatBox label=\"Orders\" value={stats?.orders?.total || 0} />\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <StatBox label=\"Pending\" value={stats?.orders?.pending || 0} />\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <StatBox label=\"Complete\" value={stats?.orders?.complete || 0} />\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <StatBox label=\"Reject\" value={stats?.orders?.rejected || 0} />\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <StatBox label=\"Cancel\" value={stats?.orders?.cancelled || 0} />\r\n        </Grid>\r\n      </Grid>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default BrokerCard; ","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\"\n}), 'Visibility');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\"\n}), 'Refresh');\nexports.default = _default;","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  Button,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  IconButton,\r\n  Box,\r\n  Typography,\r\n  CircularProgress,\r\n} from '@mui/material';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport { SelectChangeEvent } from '@mui/material/Select';\r\nimport { getAvailableBrokersList, addDematAccount } from '../hooks/accountManagementService';\r\nimport { useSnackbar } from '../../core/contexts/SnackbarProvider';\r\n\r\ninterface ConnectionInfo {\r\n  show: boolean;\r\n  placeholder: string | null;\r\n}\r\n\r\ninterface BrokerConnectionInfo {\r\n  username: ConnectionInfo;\r\n  password: ConnectionInfo;\r\n  two_fa: ConnectionInfo;\r\n  api_key: ConnectionInfo;\r\n  secret_key: ConnectionInfo;\r\n  totp_key: ConnectionInfo;\r\n  app_id: ConnectionInfo;\r\n}\r\n\r\ninterface Broker {\r\n  id: string;\r\n  brokerName: string;\r\n  connection_info: BrokerConnectionInfo;\r\n}\r\n\r\ninterface BrokerDetails {\r\n  broker: string;\r\n  nickname: string;\r\n  mobileNo: string;\r\n  email: string;\r\n  quantity: string;\r\n  [key: string]: string; // Allow dynamic fields based on connection_info\r\n}\r\n\r\ninterface ConnectBrokerProps {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onSubmit: (data: BrokerDetails) => void;\r\n}\r\n\r\nconst ConnectBroker: React.FC<ConnectBrokerProps> = ({ open, onClose, onSubmit }) => {\r\n  const [brokersList, setBrokersList] = useState<Broker[]>([]);\r\n  const [selectedBroker, setSelectedBroker] = useState<Broker | null>(null);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  const snackbar = useSnackbar();\r\n\r\n  const [formData, setFormData] = useState<BrokerDetails>({\r\n    broker: '',\r\n    nickname: '',\r\n    mobileNo: '',\r\n    email: '',\r\n    quantity: '',\r\n  });\r\n\r\n  const fetchBrokersList = async () => {\r\n    try {\r\n      const brokersList = await getAvailableBrokersList();\r\n      if(brokersList?.status) {\r\n        setBrokersList(brokersList.brokersList);\r\n      }else{\r\n        snackbar.error(brokersList.message);\r\n        setBrokersList([]);\r\n        onClose();\r\n      }\r\n    } catch (error:any) {\r\n      snackbar.error('Error fetching brokers list:'+ error.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() =>{\r\n    fetchBrokersList();\r\n  },[]);\r\n\r\n  const handleInputChange = (field: string) => (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    setFormData({\r\n      ...formData,\r\n      [field]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const handleSelectChange = (event: SelectChangeEvent<unknown>) => {\r\n    const brokerName = event.target.value as string;\r\n    const broker = brokersList.find(b => b.brokerName === brokerName);\r\n    \r\n    setSelectedBroker(broker || null);\r\n    \r\n    // Reset form data but keep the broker name\r\n    const newFormData: BrokerDetails = {\r\n      broker: brokerName,\r\n      nickname: '',\r\n      mobileNo: '',\r\n      email: '',\r\n      quantity: ''\r\n    };\r\n    \r\n    // Initialize fields based on connection_info\r\n    if (broker) {\r\n      Object.entries(broker.connection_info).forEach(([key, info]) => {\r\n        if (info.show) {\r\n          newFormData[key] = '';\r\n        }\r\n      });\r\n    }\r\n    \r\n    setFormData(newFormData);\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    \r\n    try {\r\n      setIsSubmitting(true);\r\n      \r\n      // Call the API to add the demat account\r\n      const response = await addDematAccount(formData);\r\n      \r\n      if (response.status) {\r\n        snackbar.success('Demat account added successfully');\r\n        onSubmit(formData);\r\n        onClose();\r\n      } else {\r\n        snackbar.error(response.message || 'Failed to add demat account');\r\n      }\r\n    } catch (error: any) {\r\n      snackbar.error('Error adding demat account: ' + error.message);\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // Function to render dynamic form fields based on connection_info\r\n  const renderDynamicFields = () => {\r\n    if (!selectedBroker) return null;\r\n    \r\n    return Object.entries(selectedBroker.connection_info).map(([key, info]) => {\r\n      if (!info.show) return null;\r\n      \r\n      const isPassword = key === 'password';\r\n      \r\n      return (\r\n        <TextField\r\n          key={key}\r\n          label={info.placeholder || key}\r\n          type={isPassword ? \"password\" : \"text\"}\r\n          value={formData[key] || ''}\r\n          onChange={handleInputChange(key)}\r\n          fullWidth\r\n          required\r\n          inputProps={key === 'password' ? { maxLength: 4 } : undefined}\r\n          sx={{\r\n            input: { color: 'white' },\r\n            label: { color: 'grey.500' },\r\n            '& .MuiOutlinedInput-root': {\r\n              backgroundColor: '#2D2D2D',\r\n              '& fieldset': {\r\n                borderColor: 'rgba(255, 255, 255, 0.23)',\r\n              },\r\n            },\r\n          }}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Dialog \r\n      open={open} \r\n      onClose={onClose}\r\n      maxWidth=\"md\"\r\n      fullWidth\r\n      PaperProps={{\r\n        style: {\r\n          backgroundColor: '#1E1E1E',\r\n          color: '#FFFFFF',\r\n        },\r\n      }}\r\n    >\r\n      <DialogTitle>\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n          <Typography variant=\"h6\">Add Demat Account</Typography>\r\n          <IconButton onClick={onClose} size=\"small\" sx={{ color: 'white' }}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </Box>\r\n      </DialogTitle>\r\n      <form onSubmit={handleSubmit}>\r\n        <DialogContent>\r\n          <Box display=\"grid\" gridTemplateColumns=\"repeat(2, 1fr)\" gap={3}>\r\n            <FormControl fullWidth variant=\"outlined\">\r\n              <InputLabel id=\"broker-label\" sx={{ color: 'grey.500' }}>Broker</InputLabel>\r\n              <Select\r\n                labelId=\"broker-label\"\r\n                value={formData.broker}\r\n                onChange={handleSelectChange}\r\n                label=\"Broker\"\r\n                sx={{\r\n                  backgroundColor: '#2D2D2D',\r\n                  color: 'white',\r\n                  '& .MuiOutlinedInput-notchedOutline': {\r\n                    borderColor: 'rgba(255, 255, 255, 0.23)',\r\n                  },\r\n                }}\r\n              >\r\n                <MenuItem value=\"\">Select Broker</MenuItem>\r\n                {brokersList?.map((broker) => (\r\n                  <MenuItem key={broker.id} value={broker.brokerName}>\r\n                    {broker.brokerName.toUpperCase()}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <TextField\r\n              label=\"Nickname\"\r\n              value={formData.nickname}\r\n              onChange={handleInputChange('nickname')}\r\n              fullWidth\r\n              required\r\n              sx={{\r\n                input: { color: 'white' },\r\n                label: { color: 'grey.500' },\r\n                '& .MuiOutlinedInput-root': {\r\n                  backgroundColor: '#2D2D2D',\r\n                  '& fieldset': {\r\n                    borderColor: 'rgba(255, 255, 255, 0.23)',\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n\r\n            <TextField\r\n              label=\"Mobile No.\"\r\n              value={formData.mobileNo}\r\n              onChange={handleInputChange('mobileNo')}\r\n              fullWidth\r\n              required\r\n              sx={{\r\n                input: { color: 'white' },\r\n                label: { color: 'grey.500' },\r\n                '& .MuiOutlinedInput-root': {\r\n                  backgroundColor: '#2D2D2D',\r\n                  '& fieldset': {\r\n                    borderColor: 'rgba(255, 255, 255, 0.23)',\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n\r\n            <TextField\r\n              label=\"Email\"\r\n              type=\"email\"\r\n              value={formData.email}\r\n              onChange={handleInputChange('email')}\r\n              fullWidth\r\n              required\r\n              sx={{\r\n                input: { color: 'white' },\r\n                label: { color: 'grey.500' },\r\n                '& .MuiOutlinedInput-root': {\r\n                  backgroundColor: '#2D2D2D',\r\n                  '& fieldset': {\r\n                    borderColor: 'rgba(255, 255, 255, 0.23)',\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n\r\n            <TextField\r\n              label=\"Quantity.\"\r\n              value={formData.quantity === '' ? 0 : formData.quantity}\r\n              onChange={handleInputChange('quantity')}\r\n              fullWidth\r\n              required\r\n              type=\"number\"\r\n              inputProps={{ min: \"0\", step: \"1\" }}\r\n              sx={{\r\n                input: { color: 'white' },\r\n                label: { color: 'grey.500' },\r\n                '& .MuiOutlinedInput-root': {\r\n                  backgroundColor: '#2D2D2D',\r\n                  '& fieldset': {\r\n                    borderColor: 'rgba(255, 255, 255, 0.23)',\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n\r\n            {/* Render dynamic fields based on connection_info */}\r\n            {renderDynamicFields()}\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions sx={{ padding: 3 }}>\r\n          <Button \r\n            onClick={onClose}\r\n            variant=\"contained\"\r\n            color=\"error\"\r\n            sx={{ textTransform: 'none' }}\r\n            disabled={isSubmitting}\r\n          >\r\n            Close\r\n          </Button>\r\n          <Button \r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            sx={{ textTransform: 'none' }}\r\n            disabled={isSubmitting}\r\n          >\r\n            {isSubmitting ? <CircularProgress size={24} color=\"inherit\" /> : 'Add'}\r\n          </Button>\r\n        </DialogActions>\r\n      </form>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default ConnectBroker;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport AdminAppBar from \"../../admin/components/AdminAppBar\";\r\nimport AdminToolbar from \"../../admin/components/AdminToolbar\";\r\nimport PersonAddAltIcon from '@mui/icons-material/PersonAddAlt';\r\nimport LoginIcon from '@mui/icons-material/Login';\r\nimport { Box, Button, Grid, CircularProgress, Typography, Dialog, IconButton, DialogTitle, DialogContent, TextField, DialogActions } from \"@mui/material\";\r\nimport ConnectBroker from \"../components/ConnectBroker\";\r\nimport BrokerCard from \"../components/BrokerCard\";\r\nimport { useSnackbar } from \"../../core/contexts/SnackbarProvider\";\r\nimport { getDematAccounts, updateDematAccountTradeToggle, deleteDematAccount, autoLoginUsers, updateQuantity } from \"../hooks/accountManagementService\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport { fetchOptionContracts, fetchSymbolList } from \"../../candleOperations/hooks/candleServices\";\r\nimport SaveAltIcon from \"@mui/icons-material/SaveAlt\";\r\n\r\n\r\ninterface DematAccount {\r\n  id: string;\r\n  referenceUserId: string;\r\n  email: string;\r\n  fullName: string;\r\n  broker: string;\r\n  clientId: string;\r\n  pinNumber: string;\r\n  totpSecret: string;\r\n  apiKey: string;\r\n  isMaster: boolean;\r\n  isTradeEnable: boolean;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  quantityToTrade: number\r\n  stats: {\r\n    inGroup: number;\r\n    pnl: number;\r\n    margin: number;\r\n    position?: any;\r\n    orders?: {\r\n      orders?: any;\r\n      total?: number;\r\n      cancelled?: number;\r\n      complete?: number;\r\n      pending?: number;\r\n      rejected?: number;\r\n    };\r\n    pending: number;\r\n    complete: number;\r\n    reject: number;\r\n    cancel: number;\r\n  };\r\n}\r\n\r\ninterface BrokerAccount {\r\n  id: string;\r\n  name: string;\r\n  margin: number;\r\n  isTrading: boolean;\r\n  stats: {\r\n    inGroup: number;\r\n    pnl: number;\r\n    margin: number;\r\n    position?: any;\r\n    orders?: {\r\n      orders?: any;\r\n      total?: number;\r\n      cancelled?: number;\r\n      complete?: number;\r\n      pending?: number;\r\n      rejected?: number;\r\n    };\r\n    pending: number;\r\n    complete: number;\r\n    reject: number;\r\n    cancel: number;\r\n  };\r\n}\r\n\r\nconst AccountManager = () => {\r\n  const [isConnectBrokerOpen, setIsConnectBrokerOpen] = useState(false);\r\n  const [brokerAccounts, setBrokerAccounts] = useState<BrokerAccount[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [loading, setLoading] = useState<string | null>(null);\r\n  const [togglingAccountId, setTogglingAccountId] = useState<string | null>(null);\r\n  const [openEditQty, setOpenEditQty] = useState<boolean>(false);\r\n  const [editAccountData, setEditAccountData] = useState<any>(null);\r\n  const [updatedQty, setUpdatedQty] = useState<Number>(0);\r\n  const snackbar = useSnackbar();\r\n  const navigate = useNavigate();\r\n\r\n  // Function to fetch broker accounts\r\n  const fetchBrokerAccounts = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      \r\n      const response = await getDematAccounts();\r\n      \r\n      if (response.status) {\r\n        // Transform the demat accounts into the format expected by BrokerCard\r\n        const transformedAccounts = response.dematAccounts.map((account: DematAccount) => ({\r\n          id: account.id,\r\n          name: `${account.fullName}-${account.broker}-${account.clientId}`,\r\n          isTrading: account.isTradeEnable,\r\n          quantityToTrade: account.quantityToTrade,\r\n          stats: {\r\n            inGroup: account.stats.inGroup || 0,\r\n            pnl: account.stats.pnl || 0,\r\n            margin: account.stats.margin || 0,\r\n            position: account.stats.position || 0,\r\n            orders: account.stats.orders || 0,\r\n            \r\n          },\r\n        }));\r\n        \r\n        setBrokerAccounts(transformedAccounts);\r\n      } else {\r\n        snackbar.error(response.message || 'Failed to fetch demat accounts');\r\n      }\r\n    } catch (error: any) {\r\n      snackbar.error('Error fetching broker accounts: ' + error.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchBrokerAccounts();\r\n  }, []);\r\n\r\n  const handleOpenConnectBroker = () => {\r\n    setIsConnectBrokerOpen(true);\r\n  };\r\n\r\n  const handleAutoLoginAll = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const response = await autoLoginUsers();\r\n      \r\n      if (response.status) {\r\n        if (response?.results.some((x:any) => x.status === false)){\r\n          const failedDetails = response.results\r\n          .filter((x: any) => x.status === false)\r\n          .map((x: any) => `Client ID: ${x.clientId} - Error: ${x.message || 'Unknown error'}`)\r\n          .join('\\n');\r\n          snackbar.error(\r\n          `Auto login completed with some failures:\\n${failedDetails}`\r\n          );\r\n          \r\n        }else{\r\n          snackbar.success('Auto login initiated for all users');\r\n        }\r\n      } else {\r\n        snackbar.error(response.message || 'Failed to initiate auto login');\r\n      }\r\n    } catch (error: any) {\r\n      snackbar.error('Error initiating auto login: ' + error.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCloseConnectBroker = () => {\r\n    setIsConnectBrokerOpen(false);\r\n  };\r\n\r\n  const handleSubmitBrokerDetails = (data: any) => {\r\n    // The actual API call is now handled in the ConnectBroker component\r\n    // We just need to refresh the list of broker accounts\r\n    fetchBrokerAccounts();\r\n  };\r\n\r\n  const handleToggleTrading = async (accountId: string) => {\r\n    try {\r\n      setTogglingAccountId(accountId);\r\n      \r\n      // Find the current account to get its current trading status\r\n      const account = brokerAccounts.find(acc => acc.id === accountId);\r\n      if (!account) return;\r\n      \r\n      // Call the API to toggle the trading status\r\n      const response = await updateDematAccountTradeToggle(accountId, !account.isTrading);\r\n      \r\n      if (response.status) {\r\n        // Update the local state to reflect the change\r\n        setBrokerAccounts(accounts =>\r\n          accounts.map(acc =>\r\n            acc.id === accountId\r\n              ? { ...acc, isTrading: !acc.isTrading }\r\n              : acc\r\n          )\r\n        );\r\n        \r\n        snackbar.success(`Trading ${!account.isTrading ? 'enabled' : 'disabled'} successfully`);\r\n      } else {\r\n        snackbar.error(response.message || 'Failed to update trading status');\r\n      }\r\n    } catch (error: any) {\r\n      snackbar.error('Error updating trading status: ' + error.message);\r\n    } finally {\r\n      setTogglingAccountId(null);\r\n    }\r\n  };\r\n\r\n  const handleRefresh = () => {\r\n    fetchBrokerAccounts();\r\n  };\r\n\r\n  const handleDelete = async (accountId: string) => {\r\n    try {\r\n      const response = await deleteDematAccount(accountId);\r\n      \r\n      if (response.status) {\r\n        setBrokerAccounts(accounts =>\r\n          accounts.filter(account => account.id !== accountId)\r\n        );\r\n        snackbar.success('Demat account deleted successfully');\r\n      } else {\r\n        snackbar.error(response.message || 'Failed to delete demat account');\r\n      }\r\n    } catch (error: any) {\r\n      snackbar.error('Error deleting demat account: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const handleView = (accountId: string) => {\r\n    navigate(`/admin/account/${accountId}`);\r\n  };\r\n\r\n  const handleUpdateQty = (account:any) =>{\r\n    setOpenEditQty(true);\r\n    setEditAccountData(account);\r\n    setUpdatedQty(account?.quantityToTrade || 1)\r\n  }\r\n\r\n  const handleSubmitQtyUpdate = async () =>{\r\n    const data = {\r\n      ...editAccountData,\r\n      quantityToTrade: updatedQty\r\n    }\r\n    const response = await updateQuantity(data);\r\n    if (response.status) {\r\n        snackbar.success('Quantity is updated!');\r\n        setOpenEditQty(false);\r\n        setBrokerAccounts((prev) =>\r\n          prev.map((x) =>\r\n            x.id === data.id\r\n              ? { ...x, quantityToTrade: data.quantityToTrade } // update quantity\r\n              : x\r\n          )\r\n        );\r\n    } else {\r\n        snackbar.error(response.message || 'Failed to update quantity');\r\n    }\r\n  }\r\n\r\n  const handleSaveSymbolList = async () => {\r\n    try {\r\n      setLoading(\"saveSymbolList\");\r\n      const response = await fetchSymbolList();\r\n      if (response.status) {\r\n        snackbar.success(response.message);\r\n      } else {\r\n        snackbar.error(response.message);\r\n      }\r\n    } catch (error) {\r\n      snackbar.error(\"Failed to save symbol list\");\r\n    } finally {\r\n      setLoading(null);\r\n    }\r\n  };\r\n\r\n  const handleFetchOptionContracts = async () =>{\r\n    try {\r\n        setLoading(\"fetchOptionContracts\");\r\n        const response = await fetchOptionContracts();\r\n        if(response.status){\r\n        snackbar.success(response.message);\r\n        }else{\r\n        snackbar.error(\"Failed to fetch option contracts\");\r\n        }\r\n      \r\n    } catch (error) {\r\n      snackbar.error(\"Failed to fetch option contracts\");\r\n    }finally{\r\n      setLoading(null);\r\n\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <AdminAppBar>\r\n        <AdminToolbar title={\"Account Manager\"}></AdminToolbar>\r\n      </AdminAppBar>\r\n\r\n      <Box sx={{ p: 3 }}>\r\n        <Box sx={{ mb: 2, display: 'flex', gap: 2 }}>\r\n          <Button \r\n            component=\"label\"  \r\n            variant=\"contained\" \r\n            tabIndex={-1} \r\n            startIcon={<PersonAddAltIcon />}\r\n            onClick={handleOpenConnectBroker}\r\n            disabled={isLoading}\r\n            sx={{\r\n                py: 0.5,\r\n                px: 1.5,\r\n                textTransform: 'none',\r\n                fontSize: '0.875rem'}}\r\n          > \r\n            Connect Broker\r\n          </Button>\r\n\r\n          <Button \r\n            component=\"label\"\r\n            variant=\"contained\" \r\n            tabIndex={-1} \r\n            startIcon={<LoginIcon />}\r\n            onClick={handleAutoLoginAll}\r\n            disabled={isLoading}\r\n            sx={{\r\n                py: 0.5,\r\n                px: 1.5,\r\n                textTransform: 'none',\r\n                fontSize: '0.875rem'}}\r\n          > \r\n            Auto Login All\r\n          </Button>\r\n          <Button\r\n                        variant=\"contained\"\r\n                        startIcon={<SaveAltIcon />}\r\n                        onClick={handleSaveSymbolList}\r\n                        disabled={loading === \"saveSymbolList\"}\r\n                        sx={{\r\n                          py: 0.5,\r\n                          px: 1.5,\r\n                          textTransform: 'none',\r\n                          fontSize: '0.875rem'}}\r\n                      >\r\n                        {loading === \"saveSymbolList\" ? (\r\n                          <CircularProgress size={24} />\r\n                        ) : (\r\n                          \"Update Symbol List\"\r\n                        )}\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            startIcon={<SaveAltIcon />}\r\n            onClick={handleFetchOptionContracts}\r\n            disabled={loading === \"fetchOptionContracts\"}\r\n            sx={{\r\n              py: 0.5,\r\n              px: 1.5,\r\n              textTransform: 'none',\r\n              fontSize: '0.875rem'}}\r\n          >\r\n            {loading === \"fetchOptionContracts\" ? (\r\n              <CircularProgress size={24} />\r\n            ) : (\r\n              \"Fetch Option Contracts\"\r\n            )}\r\n          </Button>\r\n        </Box>\r\n        \r\n        \r\n        {isLoading ? (\r\n          <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\r\n            <CircularProgress />\r\n          </Box>\r\n        ) : (\r\n          <Box \r\n            sx={{ \r\n              display: 'grid',\r\n              gridTemplateColumns: {\r\n                xs: '1fr',                    // 1 card per row on mobile\r\n                sm: 'repeat(2, 1fr)',         // 2 cards per row on small screens\r\n                md: 'repeat(3, 1fr)',         // 3 cards per row on medium and larger screens\r\n              },\r\n              gap: 3,\r\n            }}\r\n          >\r\n            {brokerAccounts.length > 0 ? (\r\n              brokerAccounts.map((account) => (\r\n                <BrokerCard\r\n                  key={account.id}\r\n                  name={account.name}\r\n                  margin={account.margin}\r\n                  isTrading={account.isTrading}\r\n                  stats={account.stats}\r\n                  onToggleTrading={() => handleToggleTrading(account.id)}\r\n                  onRefresh={() => handleRefresh()}\r\n                  onDelete={() => handleDelete(account.id)}\r\n                  onView={() => handleView(account.id)}\r\n                  onUpdateQuantity={() => handleUpdateQty(account)}\r\n                  isToggling={togglingAccountId === account.id}\r\n                />\r\n              ))\r\n            ) : (\r\n              <Box sx={{ gridColumn: '1 / -1', textAlign: 'center', mt: 4 }}>\r\n                <Typography variant=\"h6\" color=\"text.secondary\">\r\n                  No demat accounts found. Connect a broker to get started.\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n          </Box>\r\n        )}\r\n      </Box>\r\n\r\n      <ConnectBroker\r\n        open={isConnectBrokerOpen}\r\n        onClose={handleCloseConnectBroker}\r\n        onSubmit={handleSubmitBrokerDetails}\r\n      />\r\n\r\n        <Dialog open={openEditQty} \r\n          onClose={() => setOpenEditQty(!openEditQty)}\r\n          maxWidth=\"sm\"\r\n          fullWidth\r\n          PaperProps={{\r\n            sx: {\r\n              backgroundColor: theme => theme.palette.mode === 'dark' ? '#1E1E1E' : '#FFFFFF',\r\n              color: theme => theme.palette.mode === 'dark' ? '#FFFFFF' : '#1E293B',\r\n            },\r\n          }}\r\n        >\r\n          <DialogTitle>\r\n            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n              <Typography variant=\"h6\" sx={{ \r\n                color: theme => theme.palette.mode === 'dark' ? '#FFFFFF' : '#1E293B'\r\n              }}>\r\n                Edit Quantity\r\n              </Typography>\r\n              <IconButton \r\n                onClick={() => setOpenEditQty(!openEditQty)} \r\n                size=\"small\" \r\n                sx={{ \r\n                  color: theme => theme.palette.mode === 'dark' ? 'white' : '#64748B'\r\n                }}\r\n              >\r\n                <CloseIcon />\r\n              </IconButton>\r\n            </Box>\r\n          </DialogTitle>\r\n          <DialogContent>\r\n              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n                <TextField\r\n                  label=\"Quantity\"\r\n                  type=\"number\"\r\n                  value={updatedQty || 1}\r\n                  onChange={(e) => setUpdatedQty(Number(e.target.value))}\r\n                  fullWidth\r\n                  required\r\n                  inputProps={{ min: \"0\", step: \"1\" }}\r\n                  sx={{\r\n                    mt:2,\r\n                    input: { \r\n                      color: theme => theme.palette.mode === 'dark' ? 'white' : '#1E293B'\r\n                    },\r\n                    label: { \r\n                      color: theme => theme.palette.mode === 'dark' ? 'grey.500' : '#64748B'\r\n                    },\r\n                    '& .MuiOutlinedInput-root': {\r\n                      backgroundColor: theme => theme.palette.mode === 'dark' ? '#2D2D2D' : '#F8FAFC',\r\n                      '& fieldset': {\r\n                        borderColor: theme => theme.palette.mode === 'dark'\r\n                          ? 'rgba(255, 255, 255, 0.23)'\r\n                          : 'rgba(0, 0, 0, 0.23)',\r\n                      },\r\n                      '&:hover fieldset': {\r\n                        borderColor: theme => theme.palette.mode === 'dark'\r\n                          ? 'rgba(255, 255, 255, 0.4)'\r\n                          : 'rgba(0, 0, 0, 0.4)',\r\n                      },\r\n                    },\r\n                  }}\r\n                />\r\n              </Box>\r\n          </DialogContent>\r\n          <DialogActions sx={{ padding: 3 }}>\r\n                  <Button \r\n                    onClick={() => setOpenEditQty(!openEditQty)}\r\n                    variant=\"contained\"\r\n                    color=\"error\"\r\n                    type=\"button\"\r\n                    sx={{ textTransform: 'none' }}\r\n                  >\r\n                    Cancel\r\n                </Button>\r\n                <Button \r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    disabled={updatedQty === 0}\r\n                    onClick={handleSubmitQtyUpdate}\r\n                    sx={{ textTransform: 'none' }}\r\n                  >\r\n                    Update\r\n                </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AccountManager;\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\nexports.default = _default;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"component\", \"direction\", \"spacing\", \"divider\", \"children\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { createUnarySpacing, getValue, handleBreakpoints, mergeBreakpointsInOrder, unstable_extendSxProp as extendSxProp, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\nimport { deepmerge } from '@mui/utils';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\n\n/**\n * Return an array with the separator React element interspersed between\n * each React node of the input children.\n *\n * > joinChildren([1,2,3], 0)\n * [1,0,2,0,3]\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction joinChildren(children, separator) {\n  const childrenArray = React.Children.toArray(children).filter(Boolean);\n  return childrenArray.reduce((output, child, index) => {\n    output.push(child);\n    if (index < childrenArray.length - 1) {\n      output.push( /*#__PURE__*/React.cloneElement(separator, {\n        key: `separator-${index}`\n      }));\n    }\n    return output;\n  }, []);\n}\nconst getSideFromDirection = direction => {\n  return {\n    row: 'Left',\n    'row-reverse': 'Right',\n    column: 'Top',\n    'column-reverse': 'Bottom'\n  }[direction];\n};\nexport const style = ({\n  ownerState,\n  theme\n}) => {\n  let styles = _extends({\n    display: 'flex',\n    flexDirection: 'column'\n  }, handleBreakpoints({\n    theme\n  }, resolveBreakpointValues({\n    values: ownerState.direction,\n    breakpoints: theme.breakpoints.values\n  }), propValue => ({\n    flexDirection: propValue\n  })));\n  if (ownerState.spacing) {\n    const transformer = createUnarySpacing(theme);\n    const base = Object.keys(theme.breakpoints.values).reduce((acc, breakpoint) => {\n      if (typeof ownerState.spacing === 'object' && ownerState.spacing[breakpoint] != null || typeof ownerState.direction === 'object' && ownerState.direction[breakpoint] != null) {\n        acc[breakpoint] = true;\n      }\n      return acc;\n    }, {});\n    const directionValues = resolveBreakpointValues({\n      values: ownerState.direction,\n      base\n    });\n    const spacingValues = resolveBreakpointValues({\n      values: ownerState.spacing,\n      base\n    });\n    if (typeof directionValues === 'object') {\n      Object.keys(directionValues).forEach((breakpoint, index, breakpoints) => {\n        const directionValue = directionValues[breakpoint];\n        if (!directionValue) {\n          const previousDirectionValue = index > 0 ? directionValues[breakpoints[index - 1]] : 'column';\n          directionValues[breakpoint] = previousDirectionValue;\n        }\n      });\n    }\n    const styleFromPropValue = (propValue, breakpoint) => {\n      return {\n        '& > :not(style) + :not(style)': {\n          margin: 0,\n          [`margin${getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: getValue(transformer, propValue)\n        }\n      };\n    };\n    styles = deepmerge(styles, handleBreakpoints({\n      theme\n    }, spacingValues, styleFromPropValue));\n  }\n  styles = mergeBreakpointsInOrder(theme.breakpoints, styles);\n  return styles;\n};\nconst StackRoot = styled('div', {\n  name: 'MuiStack',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    return [styles.root];\n  }\n})(style);\nconst Stack = /*#__PURE__*/React.forwardRef(function Stack(inProps, ref) {\n  const themeProps = useThemeProps({\n    props: inProps,\n    name: 'MuiStack'\n  });\n  const props = extendSxProp(themeProps);\n  const {\n      component = 'div',\n      direction = 'column',\n      spacing = 0,\n      divider,\n      children\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = {\n    direction,\n    spacing\n  };\n  return /*#__PURE__*/_jsx(StackRoot, _extends({\n    as: component,\n    ownerState: ownerState,\n    ref: ref\n  }, other, {\n    children: divider ? joinChildren(children, divider) : children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Stack.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Defines the `flex-direction` style property.\n   * It is applied for all screen sizes.\n   * @default 'column'\n   */\n  direction: PropTypes.oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),\n  /**\n   * Add an element between each child.\n   */\n  divider: PropTypes.node,\n  /**\n   * Defines the space between immediate children.\n   * @default 0\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\n   * The system prop, which allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Stack;","import { getBaseUrl } from '../../http/globalUrl';\r\nimport { getRequiredHeaders } from '../../services/userService';\r\n\r\nconst BASE_URL = getBaseUrl();\r\nconst FETCH_SYMBOL_LIST = 'candles/fetchSymbolList';\r\nconst GET_SYMBOL_DETAILS = 'candles/getSymbolDetails';\r\nconst POST_OPTION_CONTRACTS = 'candles/fetchOptionContracts'\r\n\r\nexport const fetchOptionContracts = async () =>{\r\n    try {\r\n        const response = await fetch(`${BASE_URL}${POST_OPTION_CONTRACTS}`, {\r\n        method: 'POST',\r\n        headers: await getRequiredHeaders(),\r\n        body: JSON.stringify({index: 'NIFTY'})\r\n    });\r\n        const json = await response.json();\r\n        return json;\r\n    } catch (error) {\r\n        throw new Error('Failed to fetch symbol list');\r\n    }\r\n}\r\n\r\nexport async function fetchSymbolList() {\r\n    try {\r\n        const response = await fetch(`${BASE_URL}${FETCH_SYMBOL_LIST}`, {\r\n            method: 'POST',\r\n            headers: await getRequiredHeaders(),\r\n        });\r\n        const json = await response.json();\r\n        return json;\r\n    } catch (error) {\r\n        console.log('Error fetching symbol list:', error);\r\n        throw new Error('Failed to fetch symbol list');\r\n    }\r\n}\r\n\r\nexport async function getSymbolDetails(symbol: string) {\r\n    try {\r\n        const response = await fetch(`${BASE_URL}${GET_SYMBOL_DETAILS}`, {\r\n            method: 'POST',\r\n            headers: await getRequiredHeaders(),\r\n            body: JSON.stringify({symbol: symbol}),\r\n        });\r\n        const json = await response.json();\r\n        return json;\r\n    } catch (error) {\r\n        console.log('Error fetching symbol details:', error);\r\n    }\r\n}\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 12v7H5v-7H3v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zm-6 .67 2.59-2.58L17 11.5l-5 5-5-5 1.41-1.41L11 12.67V3h2z\"\n}), 'SaveAlt');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M13 8c0-2.21-1.79-4-4-4S5 5.79 5 8s1.79 4 4 4 4-1.79 4-4zm-2 0c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zM1 18v2h16v-2c0-2.66-5.33-4-8-4s-8 1.34-8 4zm2 0c.2-.71 3.3-2 6-2 2.69 0 5.78 1.28 6 2H3zm17-3v-3h3v-2h-3V7h-2v3h-3v2h3v3h2z\"\n}), 'PersonAddAlt');\nexports.default = _default;"],"names":["getCardUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardRoot","styled","Paper","name","overridesResolver","props","styles","root","overflow","React","inProps","ref","useThemeProps","className","raised","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","_jsx","clsx","elevation","undefined","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","StatBox","_ref","label","value","theme","useTheme","_jsxs","Box","sx","textAlign","children","Typography","variant","color","palette","mode","mt","_ref2","_stats$position","_stats$orders","_stats$orders2","_stats$orders3","_stats$orders4","_stats$orders5","margin","isTrading","stats","onToggleTrading","onRefresh","onDelete","onView","onUpdateQuantity","isToggling","isActionButtonVisible","Card","backgroundColor","borderRadius","p","boxShadow","display","alignItems","mb","flex","width","height","mr","ml","CircularProgress","size","Switch","checked","onChange","Stack","direction","spacing","IconButton","onClick","EditIcon","fontSize","DeleteIcon","RefreshIcon","VisibilityIcon","fontWeight","Grid","container","item","xs","inGroup","pnl","position","length","orders","total","pending","complete","rejected","cancelled","open","onClose","onSubmit","brokersList","setBrokersList","useState","selectedBroker","setSelectedBroker","isSubmitting","setIsSubmitting","snackbar","useSnackbar","formData","setFormData","broker","nickname","mobileNo","email","quantity","useEffect","async","getAvailableBrokersList","status","error","message","fetchBrokersList","handleInputChange","field","event","target","Dialog","maxWidth","fullWidth","PaperProps","style","DialogTitle","justifyContent","CloseIcon","preventDefault","response","addDematAccount","success","DialogContent","gridTemplateColumns","gap","FormControl","InputLabel","id","Select","labelId","brokerName","find","b","newFormData","Object","entries","connection_info","forEach","key","info","show","borderColor","MenuItem","map","toUpperCase","TextField","required","input","type","inputProps","min","step","_ref3","isPassword","placeholder","maxLength","DialogActions","padding","Button","textTransform","disabled","AccountManager","isConnectBrokerOpen","setIsConnectBrokerOpen","brokerAccounts","setBrokerAccounts","isLoading","setIsLoading","loading","setLoading","togglingAccountId","setTogglingAccountId","openEditQty","setOpenEditQty","editAccountData","setEditAccountData","updatedQty","setUpdatedQty","navigate","useNavigate","fetchBrokerAccounts","getDematAccounts","transformedAccounts","dematAccounts","account","fullName","clientId","isTradeEnable","quantityToTrade","AdminAppBar","AdminToolbar","title","component","tabIndex","startIcon","PersonAddAltIcon","handleOpenConnectBroker","py","px","LoginIcon","autoLoginUsers","results","some","x","failedDetails","filter","join","SaveAltIcon","fetchSymbolList","fetchOptionContracts","sm","md","BrokerCard","accountId","acc","updateDematAccountTradeToggle","accounts","handleToggleTrading","deleteDematAccount","handleDelete","handleView","handleUpdateQty","gridColumn","ConnectBroker","handleCloseConnectBroker","data","flexDirection","e","Number","updateQuantity","prev","joinChildren","separator","childrenArray","toArray","Boolean","reduce","output","child","index","push","StackRoot","handleBreakpoints","resolveBreakpointValues","values","breakpoints","propValue","transformer","createUnarySpacing","base","keys","breakpoint","directionValues","spacingValues","previousDirectionValue","styleFromPropValue","row","column","getValue","deepmerge","mergeBreakpointsInOrder","themeProps","extendSxProp","divider","as","BASE_URL","getBaseUrl","FETCH_SYMBOL_LIST","fetch","method","headers","getRequiredHeaders","body","JSON","stringify","json","Error","console","log"],"sourceRoot":""}