{"version":3,"file":"static/js/461.60364ba8.chunk.js","mappings":"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","sources":["bankNifty/hooks/bankNiftyServices.tsx","bankNifty/components/OrdersTable.tsx","bankNifty/pages/BankNiftyOrders.tsx"],"sourcesContent":["import {getBaseUrl} from '../../http/globalUrl'\r\n\r\nconst BASE_URL = getBaseUrl();\r\nconst GET_SYMBOL_TOKEN_LIST ='orders/getSymbolToken';\r\nconst GET_OPTION_CHAIN_LIST ='orders/getOptionChainData';\r\nconst GET_FRVP_COUNT = 'orders/getPrevData';\r\nconst GET_ORDERS_DATA = 'orders';\r\n\r\nexport async function getSymbolTokenList(){\r\n\r\n    try {\r\n        const response = await fetch(`${BASE_URL}${GET_SYMBOL_TOKEN_LIST}`);\r\n        const json = await response.json();\r\n        return json.data;\r\n    } catch (error) {\r\n        console.log('Error fetching data:', error);\r\n        throw new Error('Failed to fetch data');\r\n    }\r\n}\r\n\r\nexport async function getBankNiftyExpiryList(){\r\n\r\n    try {\r\n        const response = await fetch(`${BASE_URL}${GET_OPTION_CHAIN_LIST}?symbol=BANKNIFTY&index=NFO`);\r\n        const json = await response.json();\r\n        return [...json.data?.expiryDates?.monthEnd,...json.data?.expiryDates?.week];\r\n    } catch (error) {\r\n        console.log('Error fetching data:', error);\r\n        throw new Error('Failed to fetch data');\r\n    }\r\n}\r\n\r\nexport async function getFRVPCount(fromDate:string, toDate:string, interval:string, symbolToken:string){\r\n    const query = `?fromDate=${fromDate}&toDate=${toDate}&interval=${interval}&symbolToken=${symbolToken}`;\r\n    try {\r\n        const response = await fetch(`${BASE_URL}${GET_FRVP_COUNT}${query}`);\r\n        const json = await response.json();\r\n        return json.data;\r\n    } catch (error) {\r\n        console.log('Error fetching data:', error);\r\n        throw new Error('Failed to fetch data');\r\n    }\r\n}\r\n\r\nexport const FetchOrdersDataService = async (date:Date,symbol:string = '') => {\r\n    try {\r\n      let ordersDataFinal: any = []; \r\n      const query='?date=';\r\n      let strDate = date.getFullYear()+'-'+(date.getMonth() + 1) +'-'+date.getDate();\r\n        const response = await fetch(`${BASE_URL}${GET_ORDERS_DATA}${query}${strDate}`);\r\n        const json = await response.json();\r\n        \r\n        if(symbol != \"\"){\r\n          json.orderData.filter((item:any)=>{\r\n            if(item.symbol?.toUpperCase().includes(symbol.toUpperCase())){\r\n              ordersDataFinal.push(item);\r\n            }\r\n          });\r\n        }\r\n        else{\r\n          ordersDataFinal = json.orderData;\r\n        }\r\n        return ordersDataFinal;\r\n\r\n      } catch (error) {\r\n        console.log('Error fetching data:', error);\r\n        throw new Error('Failed to fetch data');\r\n      }\r\n};\r\n\r\n\r\n\r\n\r\n","import React, { useState } from \"react\";\r\nimport Empty from \"../../core/components/Empty\";\r\nimport { Orders } from \"../types/orders\";\r\nimport moment from \"moment\";\r\nimport { DataGrid, GridColDef, GridToolbarColumnsButton, GridToolbarContainer, GridToolbarDensitySelector, GridToolbarExport, GridToolbarFilterButton } from \"@mui/x-data-grid\";\r\nimport Box from '@mui/material/Box';\r\n\r\ntype OrdersTableProps = {\r\n  ordersData?: Orders[];\r\n  columns: GridColDef[];\r\n};\r\n\r\nconst OrdersTable = ({\r\n  ordersData = [],\r\n  columns=[]\r\n}: OrdersTableProps) => {\r\n\r\n  const [pageSize, setPageSize] = React.useState<number>(20);\r\n\r\n  if (ordersData.length === 0) {\r\n    return <Empty title=\"No Data Found\" />;\r\n  }\r\n\r\n  function CustomToolbar() {\r\n    return (\r\n      <GridToolbarContainer sx={{padding:'1px'}}>\r\n        <GridToolbarColumnsButton sx={{padding:'14px'}} onResize={undefined} nonce={undefined} onResizeCapture={undefined} />\r\n        <GridToolbarFilterButton sx={{padding:'14px'}} onResize={undefined} nonce={undefined} onResizeCapture={undefined} />\r\n        <GridToolbarDensitySelector sx={{padding:'14px'}} onResize={undefined} nonce={undefined} onResizeCapture={undefined} />\r\n        <GridToolbarExport sx={{padding:'14px'}} />\r\n      </GridToolbarContainer>\r\n    );\r\n  }\r\n  return (\r\n    \r\n      <Box sx={{\r\n                  height: '580px', \r\n                  width: '100%',\r\n                  '& .super-app-theme--cell': {\r\n                    backgroundColor: 'rgba(224, 183, 60, 0.55)',\r\n                    color: '#1a3e72',\r\n                    fontWeight: '600',\r\n                  },\r\n                  '& .super-app.negative': {\r\n                    color: '#f35631',\r\n                    fontWeight: '600',\r\n                  },\r\n                  '& .super-app.positive': {\r\n                    color: '#10b983',\r\n                    fontWeight: '600',\r\n                  }\r\n                }}>\r\n        <DataGrid\r\n          rows={ordersData}\r\n          disableColumnSelector={true}\r\n          columns={columns}\r\n          isRowSelectable={(row:any)=>row._id}\r\n          components={{\r\n            Toolbar: CustomToolbar,\r\n          }}\r\n          density=\"compact\"\r\n          pageSize={pageSize}\r\n          onPageSizeChange={(newPageSize) => setPageSize(newPageSize)} \r\n          getRowId={(row: any) =>  row._id}\r\n          rowsPerPageOptions={[5,10,20,100]}\r\n        />\r\n      </Box>\r\n    \r\n  );\r\n};\r\n\r\n\r\nexport default OrdersTable;","import React, { useState } from \"react\";\r\nimport AdminAppBar from \"../../admin/components/AdminAppBar\";\r\nimport AdminToolbar from \"../../admin/components/AdminToolbar\";\r\nimport { Card, CardContent, CardHeader, CircularProgress, Grid, IconButton, Skeleton, TextField } from \"@mui/material\";\r\nimport OrdersTable from \"../components/OrdersTable\";\r\nimport { GridCellParams, GridColDef } from \"@mui/x-data-grid\";\r\nimport clsx from \"clsx\";\r\nimport { DatePicker, LoadingButton } from \"@material-ui/lab\";\r\nimport { ArrowBackIos, ArrowForwardIos } from \"@material-ui/icons\";\r\nimport { FetchOrdersDataService } from \"../hooks/bankNiftyServices\";\r\nimport { useSnackbar } from \"../../core/contexts/SnackbarProvider\";\r\nimport RefreshIcon from \"@mui/icons-material/Refresh\";\r\n\r\nconst BankNiftyOrders = () => {\r\n\r\n    const orderDataColumns: GridColDef[] = [\r\n        { field: 'symbol', headerName: 'Symbol', width: 250,align:'left' },\r\n        { field: 'orderType', headerName: 'Order Type', width: 130,headerAlign:'center',align:'center' },\r\n        { field: 'interval', headerName: 'Interval', width: 130,headerAlign:'center',align:'center' },\r\n        {\r\n          field: 'entryPrice',\r\n          headerName: 'Entry Price',\r\n          headerAlign:'center',\r\n          type: 'number',\r\n          align:'center',\r\n          width: 130,\r\n        },\r\n        {\r\n          field: 'stopLoss',\r\n          headerName: 'Stop Loss',\r\n          headerAlign:'center',\r\n          type: 'number',\r\n          align:'center',\r\n          width: 130,\r\n        },\r\n        {\r\n            field: 'target',\r\n            headerName: 'Target',\r\n            headerAlign:'center',\r\n            type: 'number',\r\n            align:'center',\r\n            width: 130,\r\n        },\r\n        // {\r\n        //   field: 'profitAndLoss',\r\n        //   headerName: 'Profit & Loss',\r\n        //   headerAlign:'center',\r\n        //   type: 'number',\r\n        //   align:'center',\r\n        //   width: 130,\r\n        //   cellClassName: (params: GridCellParams<number>) =>\r\n        //   clsx('super-app', {\r\n        //     negative: params.row.profitAndLoss < 0,\r\n        //     positive: params.row.profitAndLoss > 0,\r\n        //   }), \r\n        //   valueGetter: (params) =>{\r\n        //     return params.row.profitAndLoss.toFixed(2); \r\n        //   }\r\n        // },\r\n        // {\r\n        //   field: 'netpnl',\r\n        //   headerName: 'Net PnL',\r\n        //   headerAlign:'center',\r\n        //   type: 'number',\r\n        //   align:'center',\r\n        //   width: 130,\r\n        //   cellClassName: (params: GridCellParams<number>) =>\r\n        //   clsx('super-app', {\r\n        //     negative: params.row.netpnl < 0,\r\n        //     positive: params.row.netpnl > 0,\r\n        //   }), \r\n        //   valueGetter: (params) =>{\r\n        //     return params.row.netpnl.toFixed(2); \r\n        //   }\r\n        // },\r\n        // {\r\n        //   field: 'charges',\r\n        //   headerName: 'Charges',\r\n        //   headerAlign:'center',\r\n        //   type: 'number',\r\n        //   align:'center',\r\n        //   width: 110,\r\n        //   valueGetter: (params) =>{\r\n        //     return params.row.charges.toFixed(2); \r\n        //   }\r\n        // },\r\n        // {\r\n        //   field: 'brokerage',\r\n        //   headerName: 'Brokerage',\r\n        //   headerAlign:'center',\r\n        //   type: 'number',\r\n        //   align:'center',\r\n        //   width: 110,\r\n        //   valueGetter: (params) =>{\r\n        //     return params.row.brokerage.toFixed(2); \r\n        //   }\r\n        // },\r\n        // {\r\n        //   field: 'result',\r\n        //   headerName: 'Result',\r\n        //   headerAlign:'center',\r\n        //   type: 'number',\r\n        //   align:'center',\r\n        //   width: 110,\r\n        // },\r\n        {\r\n          field: 'quantity',\r\n          headerName: 'Quantity',\r\n          headerAlign:'center',\r\n          type: 'number',\r\n          align:'center',\r\n          width: 130,\r\n          valueGetter: (params) =>{\r\n            return params.row.quantity > 0 ? params.row.quantity : '-'; \r\n          } \r\n        },\r\n        { \r\n          field: 'date', \r\n          headerName: 'Entry Time', \r\n          headerAlign:'center',\r\n          width: 110,\r\n          align:'left',\r\n          valueGetter: (params) =>{\r\n            const date = new Date(params.row.date);\r\n            let hours = date.getHours();\r\n            let minutes = date.getMinutes();\r\n            var ampm = hours >= 12 ? 'pm' : 'am';\r\n            hours = hours % 12;\r\n            hours = hours ? hours : 12; // the hour '0' should be '12'\r\n            minutes = minutes < 10 ? (0 + minutes) : minutes;\r\n            var strTime = hours + ':' + (minutes< 10 ? '0' : '')+minutes + ' ' + ampm;\r\n            return strTime;\r\n          } \r\n        },\r\n        { \r\n          field: 'candleTime', \r\n          headerName: 'Exit Time', \r\n          headerAlign:'center',\r\n          width: 110,\r\n          align:'left',\r\n          valueGetter: (params) =>{\r\n            const date = new Date(params.row.candleTime);\r\n            let hours = date.getHours();\r\n            let minutes = date.getMinutes();\r\n            var ampm = hours >= 12 ? 'pm' : 'am';\r\n            hours = hours % 12;\r\n            hours = hours ? hours : 12; // the hour '0' should be '12'\r\n            minutes = minutes < 10 ? (0 + minutes) : minutes;\r\n            var strTime = hours + ':' + (minutes< 10 ? '0' : '')+minutes + ' ' + ampm;\r\n            return strTime;\r\n          }\r\n        }\r\n    ];\r\n\r\n    const [dpDate, setDPDate] = useState<Date>(new Date());\r\n    const [isDataFetching, setIsDataFetching] = useState(false);\r\n    const [nextDisable,setNextDisable] = useState<boolean>(false);\r\n    const [ordersData, setOrdersData] = useState<any>();\r\n    const snackbar = useSnackbar();\r\n    \r\n    React.useEffect(() => {\r\n        const fetchData = async () => {\r\n          try {\r\n            setIsDataFetching(true);\r\n            await fetchRecords();\r\n            setIsDataFetching(false);\r\n          } catch (error: any) {\r\n            setIsDataFetching(false);\r\n            snackbar.error(error.message);\r\n          }\r\n        };\r\n    \r\n        fetchData(); \r\n        const selectedDate = `${dpDate.getDate()}-${dpDate.getMonth()}-${dpDate.getFullYear()}`;\r\n        const currDate = `${new Date().getDate()}-${new Date().getMonth()}-${new Date().getFullYear()}`;\r\n        if(selectedDate == currDate)\r\n            setNextDisable(true);\r\n          else\r\n          setNextDisable(false);\r\n    }, [dpDate]);\r\n\r\n    const fetchRecords = async () => {\r\n        const ordersData = await FetchOrdersDataService(dpDate!);\r\n        setOrdersData(ordersData);\r\n    };\r\n\r\n    const saveDate = (date: Date) => {\r\n        setDPDate(date);\r\n    };\r\n\r\n    const toggleDate = (action:string) => {\r\n        if(action === 'prev'){\r\n            const newDate = new Date(dpDate.getTime() - 24 * 60 * 60 * 1000);\r\n            setDPDate(newDate);\r\n        }else if(action === 'next'){\r\n            const newDate = new Date(dpDate.getTime() + 24 * 60 * 60 * 1000);\r\n            setDPDate(newDate);\r\n        }\r\n    };\r\n\r\n    return(\r\n        <React.Fragment>\r\n          <AdminAppBar>\r\n            <AdminToolbar title={\"Bank Orders\"}></AdminToolbar>\r\n          </AdminAppBar>\r\n          <Grid container spacing={2}>\r\n            <Grid item sm={6}>\r\n            <DatePicker\r\n                label={\"Date\"}\r\n                onChange={(date: Date | null) => saveDate(date!)}\r\n                inputFormat=\"dd/MM/yyyy\"\r\n                disableFuture={true}\r\n                shouldDisableDate={(date:any) => date.getDay() === 0 || date.getDay() === 6}\r\n                value={dpDate}\r\n                renderInput={(params: any) => (\r\n                <><IconButton onClick={() => toggleDate('prev')} aria-label=\"previous\" style={{height:'fit-content',width:'fit-content',marginTop:'25px',marginRight:'2px',paddingRight:'0px',borderRadius:'10px'}}>\r\n                    {\r\n                        isDataFetching ? <CircularProgress style={{height:'15px',width:'15px'}}/> : <ArrowBackIos style={{height:'15px',width:'15px'}}/>\r\n                    }\r\n                    </IconButton>\r\n                    <TextField {...params} id=\"date\" margin=\"normal\" name=\"start\"/>\r\n                    <IconButton disabled={nextDisable} onClick={() => toggleDate('next')} aria-label=\"next\" style={{height:'fit-content',width:'fit-content',marginTop:'25px',marginLeft:'0px',paddingLeft:'4px',borderRadius:'10px'}}>\r\n                    {\r\n                        isDataFetching ? <CircularProgress style={{height:'15px',width:'15px'}}/> : <ArrowForwardIos style={{height:'15px',width:'15px'}}/>\r\n                    }\r\n                    </IconButton>\r\n                </>\r\n                )}\r\n            />\r\n            <LoadingButton\r\n                      sx={{\r\n                        marginLeft: \"10px\",\r\n                        marginTop: \"15px\",\r\n                        width: \"fit-content\",\r\n                      }}\r\n                      loading={isDataFetching}\r\n                      onClick={fetchRecords}>\r\n                      <RefreshIcon />\r\n              </LoadingButton>\r\n            </Grid>\r\n            <Grid item sm={12} sx={{ paddingLeft: \"20px !important\" }}>\r\n                <Card variant=\"outlined\" sx={{ padding: \"20px\" }}>\r\n                    <CardHeader\r\n                    title={'Orders Data'}\r\n                    sx={{ padding: \"5px 24px 0 24px\" }}\r\n                    ></CardHeader>\r\n                    <CardContent sx={{ padding: \"10px !important\" }}>\r\n                    {isDataFetching ? (\r\n                        <Skeleton animation=\"wave\" />\r\n                    ) : (\r\n                        <OrdersTable columns={orderDataColumns} ordersData={ordersData} />\r\n                    )}\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n          </Grid>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default BankNiftyOrders"],"names":["BASE_URL","getBaseUrl","GET_SYMBOL_TOKEN_LIST","GET_OPTION_CHAIN_LIST","GET_FRVP_COUNT","async","getSymbolTokenList","response","fetch","json","data","error","console","log","Error","getBankNiftyExpiryList","_json$data","_json$data$expiryDate","_json$data2","_json$data2$expiryDat","expiryDates","monthEnd","week","getFRVPCount","fromDate","toDate","interval","symbolToken","query","FetchOrdersDataService","date","symbol","arguments","length","undefined","ordersDataFinal","strDate","getFullYear","getMonth","getDate","orderData","filter","item","_item$symbol","toUpperCase","includes","push","_ref","ordersData","columns","pageSize","setPageSize","React","_jsx","Empty","title","Box","sx","height","width","backgroundColor","color","fontWeight","children","DataGrid","rows","disableColumnSelector","isRowSelectable","row","_id","components","Toolbar","_jsxs","GridToolbarContainer","padding","GridToolbarColumnsButton","onResize","nonce","onResizeCapture","GridToolbarFilterButton","GridToolbarDensitySelector","GridToolbarExport","density","onPageSizeChange","newPageSize","getRowId","rowsPerPageOptions","BankNiftyOrders","orderDataColumns","field","headerName","align","headerAlign","type","valueGetter","params","quantity","Date","hours","getHours","minutes","getMinutes","ampm","candleTime","dpDate","setDPDate","useState","isDataFetching","setIsDataFetching","nextDisable","setNextDisable","setOrdersData","snackbar","useSnackbar","fetchRecords","message","fetchData","selectedDate","currDate","toggleDate","action","newDate","getTime","AdminAppBar","AdminToolbar","Grid","container","spacing","sm","DatePicker","label","onChange","saveDate","inputFormat","disableFuture","shouldDisableDate","getDay","value","renderInput","_Fragment","IconButton","onClick","style","marginTop","marginRight","paddingRight","borderRadius","CircularProgress","ArrowBackIos","TextField","id","margin","name","disabled","marginLeft","paddingLeft","ArrowForwardIos","LoadingButton","loading","RefreshIcon","Card","variant","CardHeader","CardContent","Skeleton","animation","OrdersTable"],"sourceRoot":""}