{"version":3,"file":"static/js/695.d700479f.chunk.js","mappings":"wjBA0BA,MA8EA,EA9EgDA,IAAkD,IAAjD,KAAEC,EAAI,QAAEC,EAAO,SAAEC,EAAQ,eAAEC,GAAgBJ,EAC1F,MAAOK,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,IAW3C,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CACLR,KAAMA,EACNC,QAASA,EACTQ,SAAS,KACTC,WAAS,EACTC,WAAY,CACVC,MAAO,CACLC,gBAAiB,UACjBC,MAAO,YAETC,SAAA,EAEFC,EAAAA,EAAAA,KAACC,EAAAA,EAAW,CAAAF,UACVR,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACC,QAAQ,OAAOC,WAAW,SAASC,eAAe,gBAAeN,SAAA,EACpEC,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,KAAIR,SAAC,sBACzBC,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACC,QAASxB,EAASyB,KAAK,QAAQC,GAAI,CAAEb,MAAO,SAAUC,UAChEC,EAAAA,EAAAA,KAACY,EAAAA,EAAS,YAIhBrB,EAAAA,EAAAA,MAAA,QAAML,SA9BY2B,IACpBA,EAAMC,iBACN5B,EAAS,CACP6B,KAAM3B,EACN4B,QAAS,KAEX3B,EAAa,GAAG,EAwBeU,SAAA,EAC3BC,EAAAA,EAAAA,KAACiB,EAAAA,EAAa,CAAAlB,UACZC,EAAAA,EAAAA,KAACE,EAAAA,EAAG,CAACS,GAAI,CAAER,QAAS,OAAQe,cAAe,SAAUC,IAAK,GAAIpB,UAC5DC,EAAAA,EAAAA,KAACoB,EAAAA,EAAS,CACRC,MAAM,aACNC,MAAOlC,EACPmC,SAAWC,GAAMnC,EAAamC,EAAEC,OAAOH,OACvC5B,WAAS,EACTgC,UAAQ,EACRf,GAAI,CACFgB,MAAO,CAAE7B,MAAO,SAChBuB,MAAO,CAAEvB,MAAO,YAChB,2BAA4B,CAC1BD,gBAAiB,UACjB,aAAc,CACZ+B,YAAa,sCAOzBrC,EAAAA,EAAAA,MAACsC,EAAAA,EAAa,CAAClB,GAAI,CAAEmB,QAAS,GAAI/B,SAAA,EAChCC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CACLtB,QAASxB,EACTsB,QAAQ,YACRT,MAAM,QACNa,GAAI,CAAEqB,cAAe,QAASjC,SAC/B,YAGDC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CACLE,KAAK,SACL1B,QAAQ,YACRT,MAAM,UACNa,GAAI,CAAEqB,cAAe,QAASjC,SAC/B,yBAKE,E,qECjGb,MAAMmC,GAAWC,EAAAA,EAAAA,KAqFVC,eAAeC,IACpB,IACE,MAAMC,QAAgBC,EAAAA,EAAAA,KAChBC,QAAiBC,MAAM,GAAGP,oBAAyB,CACvDQ,OAAQ,MACRJ,QAASA,IAIX,aADmBE,EAASG,MAE9B,CAAE,MAAOC,GAEP,MADAC,QAAQC,IAAI,yBAA0BF,GAChC,IAAIG,MAAM,yBAClB,CACF,C,0BC3EA,MAmMA,EAnMwDhE,IAMjD,IANkD,KACvDC,EAAI,QACJC,EAAO,SACPC,EAAQ,eACRC,EAAc,kBACd6D,EAAoB,IACrBjE,EACC,MAAOkE,EAAiBC,IAAsB5D,EAAAA,EAAAA,UAAS,KAChD6D,EAAYC,IAAiB9D,EAAAA,EAAAA,UAAS,MACtC+D,EAAQC,IAAahE,EAAAA,EAAAA,WAAS,IAGrCiE,EAAAA,EAAAA,YAAU,KACHvE,IACHkE,EAAmB,IACnBE,EAAc,KACdE,GAAU,GACZ,GACC,CAACtE,IAEJ,MAAMwE,EAAcA,KAClBN,EAAmB,IACnBE,EAAc,KACdE,GAAU,GACVrE,GAAS,EAaLwE,EAAoBtE,EAAeuE,QACvCC,IAAYX,EAAkBY,SAASD,EAAQE,MAGjD,OACEtE,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CACLR,KAAMA,EACNC,QAASuE,EACT/D,SAAS,KACTC,WAAS,EACTC,WAAY,CACVgB,GAAI,CACFd,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,UACtElE,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,YAE9DjE,SAAA,EAEFC,EAAAA,EAAAA,KAACC,EAAAA,EAAW,CAAAF,UACVR,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACC,QAAQ,OAAOC,WAAW,SAASC,eAAe,gBAAeN,SAAA,EACpEC,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,KAAKI,GAAI,CAC3Bb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,WAC5DjE,SAAC,uBAGHC,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CACTC,QAAS+C,EACT9C,KAAK,QACLC,GAAI,CACFb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,QAAU,WAC1DjE,UAEFC,EAAAA,EAAAA,KAACY,EAAAA,EAAS,YAKhBZ,EAAAA,EAAAA,KAACiB,EAAAA,EAAa,CAAAlB,UACZR,EAAAA,EAAAA,MAAA,QAAML,SA/CU2B,IACpBA,EAAMC,iBACN5B,EAAS,CACP+E,UAAWhB,EACXE,WAAYe,WAAWf,GACvBE,WAEFG,GAAa,EAwCoBzD,SAAA,EAC3BR,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACS,GAAI,CAAER,QAAS,OAAQe,cAAe,SAAUC,IAAK,GAAIpB,SAAA,EAC5DR,EAAAA,EAAAA,MAAC4E,EAAAA,EAAW,CAACzE,WAAS,EAAAK,SAAA,EACpBC,EAAAA,EAAAA,KAACoE,EAAAA,EAAU,CAACP,GAAG,qBAAqBlD,GAAI,CACtCb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,WAAa,WAC7DjE,SAAC,kBAGHC,EAAAA,EAAAA,KAACqE,EAAAA,EAAM,CACLC,QAAQ,qBACRhD,MAAO2B,EACP1B,SAAWC,GAAM0B,EAAmB1B,EAAEC,OAAOH,OAC7CI,UAAQ,EACRf,GAAI,CACFb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,QAAU,UAC1DnE,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,UACtE,qCAAsC,CACpCpC,YAAakC,GAAgC,SAAvBA,EAAMC,QAAQC,KAChC,4BACA,uBAEN,2CAA4C,CAC1CpC,YAAakC,GAAgC,SAAvBA,EAAMC,QAAQC,KAChC,2BACA,sBAEN,oBAAqB,CACnBlE,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,QAAU,YAE5DjE,SAED0D,EAAkBc,KAAKZ,IACtB3D,EAAAA,EAAAA,KAACwE,EAAAA,EAAQ,CAAkBlD,MAAOqC,EAAQE,GAAG9D,SAC1C4D,EAAQ5C,MADI4C,EAAQE,YAO7B7D,EAAAA,EAAAA,KAACoB,EAAAA,EAAS,CACRC,MAAM,aACNY,KAAK,SACLX,MAAO6B,EACP5B,SAAWC,GAAM4B,EAAc5B,EAAEC,OAAOH,OACxC5B,WAAS,EACTgC,UAAQ,EACR+C,WAAY,CAAEC,IAAK,MAAOC,KAAM,OAChChE,GAAI,CACFgB,MAAO,CACL7B,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,QAAU,WAE5D3C,MAAO,CACLvB,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,WAAa,WAE/D,2BAA4B,CAC1BnE,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,UACtE,aAAc,CACZpC,YAAakC,GAAgC,SAAvBA,EAAMC,QAAQC,KAChC,4BACA,uBAEN,mBAAoB,CAClBpC,YAAakC,GAAgC,SAAvBA,EAAMC,QAAQC,KAChC,2BACA,2BAMZhE,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CACLxB,QAAQ,YACRT,MAAOuD,EAAS,UAAY,UAC5B5C,QAASA,IAAM6C,GAAWD,GAC1BpB,KAAK,SACLtB,GAAI,CACFd,gBAAiBiE,IACf,IAAIT,EACJ,MAA8B,SAAvBS,EAAMC,QAAQC,KAAkB,UAAY,SAAS,EAE9DlE,MAAOgE,GACDT,GAC0B,SAAvBS,EAAMC,QAAQC,KADF,QAC8B,UAEnD,UAAW,CACTnE,gBAAiBiE,IACf,IAAIT,EACJ,MAA8B,SAAvBS,EAAMC,QAAQC,KAAkB,UAAY,SAAS,IAGhEjE,SACH,gBAIHR,EAAAA,EAAAA,MAACsC,EAAAA,EAAa,CAAClB,GAAI,CAAEmB,QAAS,GAAI/B,SAAA,EAChCC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CACLtB,QAAS+C,EACTjD,QAAQ,YACRT,MAAM,QACNmC,KAAK,SACLtB,GAAI,CAAEqB,cAAe,QAASjC,SAC/B,YAGDC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CACLE,KAAK,SACL1B,QAAQ,YACRT,MAAM,UACN8E,UAAW3B,EACXtC,GAAI,CAAEqB,cAAe,QAASjC,SAC/B,kBAMA,E,mDCpMb,MA+TA,GA/ToBhB,IAAkF,IAAjF,MAAC8F,EAAK,KAAE7F,EAAI,QAAEC,GAA6DF,EAE9F,MAAO+F,EAAWC,IAAgBzF,EAAAA,EAAAA,UAAS,UACpC0F,EAAYC,IAAiB3F,EAAAA,EAAAA,UAAS,KACtC4F,EAAQC,IAAa7F,EAAAA,EAAAA,UAAS,KAC9B8F,EAASC,IAAc/F,EAAAA,EAAAA,UAAS,aAChCgG,EAAUC,IAAejG,EAAAA,EAAAA,UAAS,KAClCkG,EAAWC,IAAgBnG,EAAAA,EAAAA,UAAS,WACpCoG,EAAYC,IAAiBrG,EAAAA,EAAAA,UAAiB,IAC9CsG,EAAcC,IAAmBvG,EAAAA,EAAAA,UAAiB,IAClDwG,EAAaC,IAAkBzG,EAAAA,EAAAA,UAAS,QACxC0G,EAAYC,IAAiB3G,EAAAA,EAAAA,UAAS,KACtC4G,EAAWC,IAAgB7G,EAAAA,EAAAA,WAAkB,GAC9C8G,GAAWC,EAAAA,EAAAA,MAETC,EAAkBlE,iBAAsB,IAAfmE,EAAKC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACnCL,GAAa,GACb,MAAMQ,QAAeC,EAAAA,EAAAA,IAAcL,GAASzB,GAC5C,IAAI6B,IAAWA,EAAOE,OAASF,EAAOE,KAAKC,YAKvC,OAJAV,EAASxD,MAAM,wBACfuD,GAAa,GACbpB,EAAa,cACb9F,IAGJ,MAAM8H,EAAgBC,EAAgBL,EAAOE,KAAKC,aAClDb,EAAcc,GACdZ,GAAa,EACjB,EAOA,SAASc,EAAWC,GAChB,MAMOC,EAAKC,EAAUC,GAAQH,EAAQI,MAAM,KACtCC,EAAYF,EAAKG,OAAO,GAG9B,MAAO,GAAGL,IAVS,CACfM,IAAK,MAAOC,IAAK,MAAOC,IAAK,MAAOC,IAAK,MACzCC,IAAK,MAAOC,IAAK,MAAOC,IAAK,MAAOC,IAAK,MACzCC,IAAK,MAAOC,IAAK,MAAOC,IAAK,MAAOC,IAAK,OAKxBhB,KAEGG,GAC5B,EAjBAhE,EAAAA,EAAAA,YAAU,KACNvE,GAAQsH,GAAiB,GAC3B,CAACtH,IAkBH,MAAMgI,EAAmBqB,IACrB,MAAM1B,EAAa,GAenB,OAdA0B,EAAeC,SAASC,IACxB,MAAMC,EAASD,EAAKE,YAEpB,GAAIF,EAAKG,GAAI,CACT,MAAMC,EAAa1B,EAAWsB,EAAKG,GAAGC,YACtChC,EAAOiC,KAAK,QAAQD,IAAaH,MACrC,CAEA,GAAID,EAAKM,GAAI,CACT,MAAMF,EAAa1B,EAAWsB,EAAKM,GAAGF,YACtChC,EAAOiC,KAAK,QAAQD,IAAaH,MACrC,KAGO7B,CAAM,EA2EnB,OACEpH,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CAACR,KAAMA,EAAMC,QAASA,EAASS,WAAS,EAACD,SAAS,KAAIM,SAAA,EAC3DC,EAAAA,EAAAA,KAACC,EAAAA,EAAW,CAAAF,SAAC,iBACbC,EAAAA,EAAAA,KAACiB,EAAAA,EAAa,CAAAlB,SACXmG,GACDlG,EAAAA,EAAAA,KAAC8I,EAAAA,EAAgB,KACjBvJ,EAAAA,EAAAA,MAACwJ,GAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGtI,GAAI,CAAEuI,GAAI,GAAInJ,SAAA,EACxCC,EAAAA,EAAAA,KAAC+I,GAAAA,GAAI,CAACR,MAAI,EAACY,GAAI,GAAIC,GAAI,EAAErJ,UACvBR,EAAAA,EAAAA,MAAC4E,EAAAA,EAAW,CAACzE,WAAS,EAAAK,SAAA,EACpBC,EAAAA,EAAAA,KAACoE,EAAAA,EAAU,CAAArE,SAAC,WACZC,EAAAA,EAAAA,KAACqE,EAAAA,EAAM,CACL/C,MAAOwD,EACPzD,MAAM,QACNE,SArFmBC,IAC3B,MAAMF,EAAQE,EAAEC,OAAOH,MACvB2D,EAAc,IACdE,EAAU,IACVJ,EAAazD,GACbgF,EAAgBhF,EAAM,EAgFkBvB,UAEhCC,EAAAA,EAAAA,KAACwE,EAAAA,EAAQ,CAAClD,MAAM,QAAOvB,SAAC,kBAI9BC,EAAAA,EAAAA,KAAC+I,GAAAA,GAAI,CAACR,MAAI,EAACY,GAAI,GAAIC,GAAI,EAAErJ,UACvBR,EAAAA,EAAAA,MAAC4E,EAAAA,EAAW,CAACzE,WAAS,EAAAK,SAAA,EACpBC,EAAAA,EAAAA,KAACoE,EAAAA,EAAU,CAAArE,SAAC,iBACZR,EAAAA,EAAAA,MAAC8E,EAAAA,EAAM,CACL/C,MAAO0D,EACP3D,MAAM,cACNE,SAzFoBC,IAC5B,MAAMF,EAAQE,EAAEC,OAAOH,MACvB6D,EAAU,IACVF,EAAc3D,EAAM,EAsFqBvB,SAAA,EAEjCC,EAAAA,EAAAA,KAACwE,EAAAA,EAAQ,CAAClD,MAAM,GAAEvB,SAAC,wBACnBC,EAAAA,EAAAA,KAACwE,EAAAA,EAAQ,CAAClD,MAAM,KAAIvB,SAAC,QACrBC,EAAAA,EAAAA,KAACwE,EAAAA,EAAQ,CAAClD,MAAM,KAAIvB,SAAC,gBAK3BC,EAAAA,EAAAA,KAAC+I,GAAAA,GAAI,CAACR,MAAI,EAACY,GAAI,GAAIC,GAAI,EAAErJ,UACvBR,EAAAA,EAAAA,MAAC4E,EAAAA,EAAW,CAACzE,WAAS,EAAAK,SAAA,EACpBC,EAAAA,EAAAA,KAACoE,EAAAA,EAAU,CAAArE,SAAC,YACZR,EAAAA,EAAAA,MAAC8E,EAAAA,EAAM,CACL/C,MAAO4D,EACP7D,MAAM,SACNuD,UAAWI,EACXzD,SAAWC,GAAM2D,EAAU3D,EAAEC,OAAOH,OAAOvB,SAAA,EAE3CC,EAAAA,EAAAA,KAACwE,EAAAA,EAAQ,CAAClD,MAAM,GAAG+H,UAAQ,EAAAtJ,SAAC,kBAC3BiG,EAAWtC,QAAQ4F,GAAaA,EAAE1F,SAASoB,KAAaT,KAAKgE,IAC1DvI,EAAAA,EAAAA,KAACwE,EAAAA,EAAQ,CAAYlD,MAAOiH,EAAKxI,SAC5BwI,GADUA,cAQzBvI,EAAAA,EAAAA,KAAC+I,GAAAA,GAAI,CAACR,MAAI,EAACY,GAAI,GAAIC,GAAI,EAAErJ,UACvBR,EAAAA,EAAAA,MAAC4E,EAAAA,EAAW,CAACzE,WAAS,EAAAK,SAAA,EACpBC,EAAAA,EAAAA,KAACoE,EAAAA,EAAU,CAAArE,SAAC,aACZR,EAAAA,EAAAA,MAAC8E,EAAAA,EAAM,CACL/C,MAAO8D,EACP/D,MAAM,UACNE,SAAWC,GAAM6D,EAAW7D,EAAEC,OAAOH,OAAOvB,SAAA,EAE5CC,EAAAA,EAAAA,KAACwE,EAAAA,EAAQ,CAAClD,MAAM,WAAUvB,SAAC,cAC3BC,EAAAA,EAAAA,KAACwE,EAAAA,EAAQ,CAAClD,MAAM,eAAcvB,SAAC,kBAC/BC,EAAAA,EAAAA,KAACwE,EAAAA,EAAQ,CAAClD,MAAM,WAAUvB,SAAC,sBAKjCC,EAAAA,EAAAA,KAAC+I,GAAAA,GAAI,CAACR,MAAI,EAACY,GAAI,GAAIC,GAAI,EAAErJ,UACvBR,EAAAA,EAAAA,MAAC4E,EAAAA,EAAW,CAACzE,WAAS,EAAAK,SAAA,EACpBC,EAAAA,EAAAA,KAACoE,EAAAA,EAAU,CAAArE,SAAC,cACZR,EAAAA,EAAAA,MAAC8E,EAAAA,EAAM,CACL/C,MAAOgE,EACPjE,MAAM,WACNE,SAAWC,GAAM+D,EAAYgE,OAAO/H,EAAEC,OAAOH,QAAQvB,SAAA,EAErDC,EAAAA,EAAAA,KAACwE,EAAAA,EAAQ,CAAYlD,MAAM,KAAIvB,SAAC,KAAjB,OACfC,EAAAA,EAAAA,KAACwE,EAAAA,EAAQ,CAAalD,MAAM,MAAKvB,SAAC,KAAnB,QACfC,EAAAA,EAAAA,KAACwE,EAAAA,EAAQ,CAAalD,MAAM,MAAKvB,SAAC,KAAnB,QACfC,EAAAA,EAAAA,KAACwE,EAAAA,EAAQ,CAAalD,MAAM,MAAKvB,SAAC,KAAnB,QACfC,EAAAA,EAAAA,KAACwE,EAAAA,EAAQ,CAAalD,MAAM,MAAKvB,SAAC,KAAnB,gBAKrBC,EAAAA,EAAAA,KAAC+I,GAAAA,GAAI,CAACR,MAAI,EAACY,GAAI,GAAIC,GAAI,EAAErJ,UACvBR,EAAAA,EAAAA,MAAC4E,EAAAA,EAAW,CAACzE,WAAS,EAAAK,SAAA,EACpBC,EAAAA,EAAAA,KAACoE,EAAAA,EAAU,CAAArE,SAAC,gBACZR,EAAAA,EAAAA,MAAC8E,EAAAA,EAAM,CACL/C,MAAOkE,EACPnE,MAAM,aACNE,SAAWC,GAAMiE,EAAajE,EAAEC,OAAOH,OAAOvB,SAAA,EAE9CC,EAAAA,EAAAA,KAACwE,EAAAA,EAAQ,CAAClD,MAAM,SAAQvB,SAAC,YACzBC,EAAAA,EAAAA,KAACwE,EAAAA,EAAQ,CAAClD,MAAM,QAAOvB,SAAC,WACxBC,EAAAA,EAAAA,KAACwE,EAAAA,EAAQ,CAAClD,MAAM,KAAIvB,SAAC,gBAIG,UAA5ByF,EAAUgE,eAAyD,OAA5BhE,EAAUgE,iBAA2BxJ,EAAAA,EAAAA,KAAC+I,GAAAA,GAAI,CAACR,MAAI,EAACY,GAAI,GAAIC,GAAI,EAAErJ,UACrGC,EAAAA,EAAAA,KAACmE,EAAAA,EAAW,CAACzE,WAAS,EAAAK,UAEpBC,EAAAA,EAAAA,KAACoB,EAAAA,EAAS,CACRE,MAAOoE,EACPrE,MAAM,cACNY,KAAK,SACLV,SAAWC,GAAMmE,EAAc4D,OAAO/H,EAAEC,OAAOH,cAIxB,OAA5BkE,EAAUgE,gBAA0BxJ,EAAAA,EAAAA,KAAC+I,GAAAA,GAAI,CAACR,MAAI,EAACY,GAAI,GAAIC,GAAI,EAAErJ,UAC5DC,EAAAA,EAAAA,KAACmE,EAAAA,EAAW,CAACzE,WAAS,EAAAK,UAEpBC,EAAAA,EAAAA,KAACoB,EAAAA,EAAS,CACRE,MAAOsE,EACPvE,MAAM,gBACNY,KAAK,SACLV,SAAWC,GAAMqE,EAAgB0D,OAAO/H,EAAEC,OAAOH,eAKvDtB,EAAAA,EAAAA,KAAC+I,GAAAA,GAAI,CAACR,MAAI,EAACY,GAAI,GAAIC,GAAI,EAAErJ,UACxBR,EAAAA,EAAAA,MAACkK,GAAAA,EAAiB,CACbnI,MAAOwE,EACP4D,WAAS,EACTnI,SAAUA,CAACC,EAAGmI,IAAQA,GAAO5D,EAAe4D,GAC5CjK,WAAS,EAAAK,SAAA,EAETC,EAAAA,EAAAA,KAAC4J,GAAAA,EAAY,CACTtI,MAAM,MACNxB,MAAM,UACNa,GAAI,CACJ,iBAAkB,CACdd,gBAAiB,QACjBC,MAAO,QACP,UAAW,CACXD,gBAAiB,aAGnBE,SACL,SAGDC,EAAAA,EAAAA,KAAC4J,GAAAA,EAAY,CACTtI,MAAM,OACNxB,MAAM,QACNa,GAAI,CACJ,iBAAkB,CACdd,gBAAiB,UACjBC,MAAO,QACP,UAAW,CACXD,gBAAiB,aAGnBE,SACL,oBAUXR,EAAAA,EAAAA,MAACsC,EAAAA,EAAa,CAAClB,GAAI,CAAEkJ,GAAI,EAAGC,GAAI,GAAI/J,SAAA,EAClCC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CAACxB,QAAQ,YAAYT,MAAM,QAAQW,QAASxB,EAAQc,SAAC,WAG5DC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CAACxB,QAAQ,YAAYT,MAAM,UAAUW,QA7NzB2B,UAEvB,IAAI8C,EAEA,YADAkB,EAAS2D,QAAQ,yBAIrB,IAA+B,UAA5BvE,EAAUgE,eAAyD,OAA5BhE,EAAUgE,kBAC5C9D,GAAcA,GAAc,GAE9B,YADAU,EAAS2D,QAAQ,6BAIvB,GAA+B,OAA5BvE,EAAUgE,iBACL5D,GAAgBA,GAAgB,GAElC,YADAQ,EAAS2D,QAAQ,+BAKvB,MAAMC,EAAmB,CACvBzD,MAAOzB,EACPE,aACAE,SACAE,UACAE,WACAE,YACAM,cACAmE,QAASpF,EAAMhB,IAEc,UAA5B2B,EAAUgE,eAAyD,OAA5BhE,EAAUgE,gBAClDQ,EAAatE,WAAaA,GAEG,OAA5BF,EAAUgE,gBACXQ,EAAapE,aAAeA,GAE9B,IACI,MAAMe,QF8HPvE,eAAgC4H,GACrC,IACE,MAAMxH,QAAiBC,MAAM,GAAGP,4BAAuC,CACrEQ,OAAQ,OACRJ,cAAeC,EAAAA,EAAAA,KACf2H,KAAMC,KAAKC,UAAUJ,KAIvB,aADmBxH,EAASG,MAE9B,CAAE,MAAOC,GACP,MAAM,IAAIG,MAAM,kCAAmCH,EACrD,CACF,CE3I6ByH,CAAiBL,GACnCrD,EAAO2D,OACNlE,EAASmE,QAAQ,iBAEjBnE,EAASxD,MAAM,qBAAsB+D,EAAO6D,QAEpD,CAAE,MAAO5H,GACLwD,EAASxD,MAAM,kBAAkBA,EACrC,CACA3D,GAAS,EA+KiEc,SAAC,qBAIlE,EC5QP0K,GAAoD1L,IAYnD,IAZoD,MACzD8F,EAAK,OACL6F,EAAM,WACNC,EAAU,eACVC,EAAc,gBACdC,EAAe,iBACfC,EAAgB,kBAChBC,EAAiB,kBACjBC,EAAiB,mBACjBC,EAAkB,eAClB9L,EAAc,kBACd+L,GACDnM,EACC,MAAOoM,EAAmBC,IAAwB9L,EAAAA,EAAAA,WAAS,IACpD+L,EAAeC,IAAoBhM,EAAAA,EAAAA,UAAuB,KAC1DiM,EAAmBC,IAAwBlM,EAAAA,EAAAA,WAAS,IACpDmM,EAAmBC,IAAwBpM,EAAAA,EAAAA,UAAwB,OACnEqM,EAAYC,IAAiBtM,EAAAA,EAAAA,UAAqB,CACvDuM,UAAW,YACXC,YAAa,GACbC,QAAS,GACTC,MAAO,SAEFC,EAAWC,IAAgB5M,EAAAA,EAAAA,UAAoB,CACpD6M,UAAW,GACXC,OAAQ,GACRC,OAAQ,KAEJjG,GAAWC,EAAAA,EAAAA,MACXiG,IAAWC,EAAAA,EAAAA,MACXC,IAAKC,EAAAA,EAAAA,QAAyB,OAC7BC,GAAYC,KAAiBrN,EAAAA,EAAAA,WAAS,GAEvCsN,GAAqBxK,UACzB,IACEoJ,GAAqB,GACrB,MAAMhJ,QH2ILJ,eAAgC6H,GACrC,IACE,MAAM3H,QAAgBC,EAAAA,EAAAA,KAChBC,QAAiBC,MAAM,GAAGP,uBAAiC+H,IAAW,CAC1EvH,OAAQ,MACRJ,QAASA,IAIX,aADmBE,EAASG,MAE9B,CAAE,MAAOC,GAEP,MADAC,QAAQC,IAAI,iCAAkCF,GACxC,IAAIG,MAAM,iCAClB,CACF,CGzJ6B8J,CAAiBhI,EAAMhB,IAE9C,GAAIrB,EAAS8H,OAAQ,CACnB,MAAMwC,EAAsBtK,EAASuK,cAAcxI,KAAKZ,IAAY,CAClEE,GAAIF,EAAQE,GACZ9C,KAAM,GAAG4C,EAAQqJ,qBAAqBrJ,EAAQsJ,WAC9ChJ,UAAWN,EAAQE,GACnByG,OAAQ3G,EAAQuJ,cAAgB,SAAW,WAC3C/J,WAAYQ,EAAQR,YAAc,EAClCE,OAAQM,EAAQN,SAAU,EAC1B8J,MAAOxJ,EAAQwJ,UAEjB7B,EAAiBwB,EACnB,CACF,CAAE,MAAOlK,GACPC,QAAQD,MAAM,iCAAkCA,EAAM4H,QACxD,CAAC,QACCgB,GAAqB,EACvB,IAIFjI,EAAAA,EAAAA,YAAU,KACRqJ,IAAoB,GACnB,CAAC/H,EAAMhB,MAGVN,EAAAA,EAAAA,YAAU,KACR,MAAM4I,EAAmB,GACnBC,EAAgB,GAChBC,EAAgB,GAEtBhB,EAAc/C,SAAQ8E,IAAU,IAADC,EAAAC,EAAAC,EAAAC,EACd,QAAfH,EAAID,EAAMD,aAAK,IAAAE,GAAXA,EAAaI,UACftB,EAAUvD,QAAQ8E,OAAOC,OAAOP,EAAMD,MAAMM,WAE/B,QAAfH,EAAIF,EAAMD,aAAK,IAAAG,GAAQ,QAARC,EAAXD,EAAalB,cAAM,IAAAmB,GAAnBA,EAAqBnB,QACvBA,EAAOxD,QAAQ8E,OAAOC,OAAOP,EAAMD,MAAMf,OAAOA,SAEnC,QAAfoB,EAAIJ,EAAMD,aAAK,IAAAK,GAAXA,EAAanB,QACfA,EAAOzD,QAAQ8E,OAAOC,OAAOP,EAAMD,MAAMd,QAC3C,IAGFH,EAAa,CAAEC,YAAWC,SAAQC,UAAS,GAC1C,CAAChB,KAGJ9H,EAAAA,EAAAA,YAAU,KACR,MAAMqK,EAAQC,aAAaC,QAAQ,WA2BnC,OA1BItB,GAAGuB,SACLvB,GAAGuB,QAAQC,QAGbxB,GAAGuB,QAAU,IAAIE,UAAU,sCAAsCL,WAAe/I,EAAMhB,MAElF2I,GAAGuB,UACJvB,GAAGuB,QAAsBG,OAAS,IAAMrL,QAAQC,IAAI,aACpD0J,GAAGuB,QAAsBI,UAAatN,IACrC,MAAMgG,EAAOsD,KAAKiE,MAAMvN,EAAMgG,MAC9B,GAAkB,mBAAdA,EAAK5E,KAA2B,CAAC,IAADoM,EAClC,MAAMvB,EAA0B,OAAJjG,QAAI,IAAJA,GAAU,QAANwH,EAAJxH,EAAMA,YAAI,IAAAwH,OAAN,EAAJA,EAAYtB,cAAcxI,KAAKZ,IAAY,CACrEE,GAAIF,EAAQE,GACZ9C,KAAM,GAAG4C,EAAQqJ,qBAAqBrJ,EAAQsJ,WAC9ChJ,UAAWN,EAAQE,GACnByG,OAAQ3G,EAAQuJ,cAAgB,SAAW,WAC3C/J,WAAYQ,EAAQR,YAAc,EAClCE,OAAQM,EAAQN,SAAU,EAC1B8J,MAAOxJ,EAAQwJ,UAEjB7B,EAAiBwB,EACnB,GAEDN,GAAGuB,QAAsBO,QAAU,IAAMzL,QAAQC,IAAI,iBAGjD,KACD0J,GAAGuB,SACJvB,GAAGuB,QAAsBC,OAC5B,CACD,GACA,IAEH,MAkCMO,GAAenM,UACnB,IACE,MAAMI,QHALJ,eAAoC6H,EAAiBhG,GAC1D,IACE,MAAM3B,QAAgBC,EAAAA,EAAAA,KAChBC,QAAiBC,MAAM,GAAGP,sBAA2B,CACzDQ,OAAQ,OACRJ,QAAS,IACJA,EACH,eAAgB,oBAElB4H,KAAMC,KAAKC,UAAU,CAAEH,UAAShG,gBAIlC,aADmBzB,EAASG,MAE9B,CAAE,MAAOC,GAEP,MADAC,QAAQC,IAAI,mCAAoCF,GAC1C,IAAIG,MAAM,oCAClB,CACF,CGlB6ByL,CAAqB3J,EAAMhB,GAAII,GAElDzB,EAAS8H,QAEXgB,GAAiBvL,GACfA,EAAS2D,QAAO0J,GAASA,EAAMnJ,YAAcA,MAE/CmC,EAASmE,QAAQ,kDAEjBnE,EAASxD,MAAMJ,EAASgI,SAAW,oCAEvC,CAAE,MAAO5H,GACPwD,EAASxD,MAAM,oCAAsCA,EAAM4H,QAC7D,GA0BIiE,GAAqBrM,UACzB,IACE,MAAMI,QHLLJ,eAAmC6H,GACxC,IACE,MAAMzH,QAAiBC,MAAM,GAAGP,wBAAsC+H,IAAW,CAC/EvH,OAAQ,OACRJ,cAAeC,EAAAA,EAAAA,OAIjB,aADmBC,EAASG,MAE9B,CAAE,MAAOC,GAEP,MADAC,QAAQC,IAAI,iCAAkCF,GACxC,IAAIG,MAAM,oCAClB,CACF,CGR6B2L,CAAoBzE,GACvCzH,EAAS8H,QACXlE,EAASmE,QAAQ/H,EAASgI,SAC1BoC,MAEAxG,EAASxD,MAAMJ,EAASgI,SAAW,2BAEvC,CAAE,MAAO5H,GACPwD,EAASxD,MAAM,yBAA2BA,EAAM4H,QAClD,GAgCImE,GAAmBC,IACvBhD,EAAc,IACTD,EACHE,UAAW+C,GACX,EAGEC,GAAeA,KACnB,MAAM,UAAEhD,EAAS,YAAEC,EAAW,QAAEC,EAAO,MAAEC,GAAUL,EACnD,IAAI9E,EAAOoF,EAAUJ,GAGrB,GAAIC,EAAa,CACf,MAAMgD,EAAiBhD,EAAYiD,cACnClI,EAAOA,EAAKnD,QAAQ6E,GAClBmF,OAAOC,OAAOpF,GAAMyG,MAAM1N,GACxB2N,OAAO3N,GAAOyN,cAAcnL,SAASkL,MAG3C,CAuDA,MApDkB,cAAdjD,IACFhF,EAAOA,EAAKtC,KAAI2K,IAAG,IACdA,EACHC,OAAQ5F,OAAO2F,EAAIC,SAAW,EAC9BC,YAAalL,WAAWgL,EAAIE,cAAgB,OAK5CrD,EACFlF,EAAO,IAAIA,GAAMwI,MAAK,CAACC,EAAGC,KACxB,IAAIC,EAASF,EAAEvD,GACX0D,EAASF,EAAExD,GAcf,MAXsB,kBAAXyD,GAAwBE,MAAMnG,OAAOiG,MAC9CA,EAASjG,OAAOiG,GAChBC,EAASlG,OAAOkG,IAIF,aAAZ1D,GAAsC,aAAZA,IAC5ByD,EAAS,IAAIG,KAAKH,GAAQI,UAC1BH,EAAS,IAAIE,KAAKF,GAAQG,WAGd,SAAV5D,EACKyD,EAASD,EAAS,EAAIC,EAASD,GAAU,EAAI,EAE/CA,EAASC,EAAS,EAAID,EAASC,GAAU,EAAI,CAAC,IAIrC,cAAd5D,EAEJhF,EAAO,IAAIA,GAAMwI,MAAK,CAACC,EAAGC,KACtB,MAAMM,EAA+B,IAArBtG,OAAO+F,EAAEH,QACnBW,EAA+B,IAArBvG,OAAOgG,EAAEJ,QACzB,OAAIU,IAAYC,GAAiB,GAC5BD,GAAWC,EAAgB,EACzBC,KAAKC,IAAIzG,OAAOgG,EAAEJ,SAAW,GAAKY,KAAKC,IAAIzG,OAAO+F,EAAEH,SAAW,EAAE,IAEnD,WAAdtD,GAAwC,WAAdA,IAEnChF,EAAO,IAAIA,GAAMwI,MAAK,CAACC,EAAGC,KACxB,MAAMU,EAAQ,IAAIN,KAAmB,WAAd9D,EAAyByD,EAAEY,SAAWZ,EAAEa,UAAUP,UAEzE,OADc,IAAID,KAAmB,WAAd9D,EAAyB0D,EAAEW,SAAWX,EAAEY,UAAUP,UAC1DK,CAAK,KAKnBpJ,CAAI,EAIPuJ,GAAoBC,IAAA,IAAC,MAAEhP,EAAK,MAAEiP,GAAyCD,EAAA,OAC3ErQ,EAAAA,EAAAA,KAACuQ,EAAAA,EAAS,CACR5P,GAAI,CACFb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,QAAU,UAC1DlC,QAAS,MACTjC,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KACpC,UACA,UACJyJ,SAAU,SACV+C,IAAK,EACLC,OAAQ,EACRC,aAAc5M,GAAgC,SAAvBA,EAAMC,QAAQC,KACjC,qCACA,+BACJ2M,OAAQ,WAEVlQ,QAASA,IA9GOmQ,KAClB,MAAMC,EAAQlF,EAAWI,UAAY6E,GAAiC,QAArBjF,EAAWK,MAC5DJ,EAAc,IACTD,EACHK,MAAO6E,EAAQ,OAAS,MACxB9E,QAAS6E,GACT,EAwGeE,CAAWR,GAAOvQ,UAEjCR,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACS,GAAI,CAAER,QAAS,OAAQC,WAAY,SAAUe,IAAK,IAAMpB,SAAA,CAC1DsB,GACDrB,EAAAA,EAAAA,KAAC+Q,EAAAA,EAAc,CACbC,OAAQrF,EAAWI,UAAYuE,EAC/BW,UAAWtF,EAAWI,UAAYuE,EAAQ3E,EAAWK,MAAQ,MAC7DrL,GAAI,CACF,4BAA6B,CAC3Bb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,mBAAqB,sBAEvE,eAAgB,CACdlE,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,mBAAqB,sBAEvElE,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,mBAAqB,4BAIjE,EA0Bd,OACEzE,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAAAH,SAAA,EAEFR,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACS,GAAI,CACPR,QAAS,OACTC,WAAY,SACZC,eAAgB,gBAChB6Q,GAAI,IACJrR,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,UACtEmN,EAAG,IACHC,aAAc,EACdC,UAAW,GACXtR,SAAA,EACAR,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACS,GAAI,CAAER,QAAS,OAAQC,WAAY,SAAUe,IAAK,KAAMpB,SAAA,EAC3DC,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CACTC,QAASiK,EACThK,KAAK,QACLC,GAAI,CACFd,gBAAiB,UACjB,UAAW,CAAEA,gBAAiB,WAC9BiC,QAAS,OACT/B,UAEFC,EAAAA,EAAAA,KAACsR,EAAAA,EAAa,CAAC3Q,GAAI,CAAEb,MAAO,QAASyR,SAAU,eAEjDvR,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,YAAYI,GAAI,CAClCb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,QAAU,eAC1DwN,WAAY,KACZzR,SACC8E,EAAM9D,QAETf,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CACLxB,QAAQ,YACRE,QAASA,KACPwK,EAAmB2B,IACnBjC,GAAY,EAEdjK,KAAK,QACLC,GAAI,CACFd,gBAAiB,UACjB,UAAW,CAAEA,gBAAiB,WAC9B4R,GAAI,GACJ5H,GAAI,IACJ7H,cAAe,OACfuP,SAAU,YACVxR,SACH,iBAIDC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CACLxB,QAAQ,YACRT,MAAM,UACNY,KAAK,QACLD,QA9DoBiR,KAC5BtG,GAAqB,EAAK,EA8DlBzK,GAAI,CACF8Q,GAAI,GACJ5H,GAAI,IACJ7H,cAAe,OACfuP,SAAU,YACVxR,SACH,oBAKHR,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACS,GAAI,CAAER,QAAS,OAAQC,WAAY,SAAUe,IAAK,KAAMpB,SAAA,EAC3DC,EAAAA,EAAAA,KAACE,EAAAA,EAAG,CAACS,GAAI,CAAER,QAAS,OAAQC,WAAY,SAAUe,IAAK,GAAIpB,SACxDiL,IACCzL,EAAAA,EAAAA,MAACe,EAAAA,EAAU,CAACC,QAAQ,QAAQI,GAAI,CAC9Bb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,QAAU,gBAC1DjE,SAAA,EACAC,EAAAA,EAAAA,KAAA,QAAMJ,MAAO,CAAE4R,WAAY,OAAQD,SAAU,SAAUzR,MAAO,WAAYC,SAAC,oBAAsB,IAAEiL,QAKzGhL,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,QAAQI,GAAI,CAC9Bb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,WAAa,kBAC7DjE,SAAC,aAGHC,EAAAA,EAAAA,KAAC2R,EAAAA,EAAM,CACLC,QAAS/M,EAAMgN,eACftQ,SAAUsJ,EACVjG,SAAUmG,EACVrK,KAAK,QACLC,GAAI,CACF,qBAAsB,CAClBd,gBAAkBgF,EAAMgN,eAAwC,qBAAvB,sBAE7C,qBAAsB,CACpBhS,gBAAkBgF,EAAMgN,eAAwC,qBAAvB,0BAI/CtS,EAAAA,EAAAA,MAACe,EAAAA,EAAU,CAACC,QAAQ,YAAYI,GAAI,CAClCb,MAAOmM,EAAUE,UAAU2F,QAAO,CAACC,EAAKC,IAAQD,GAAOxI,OAAOyI,EAAIC,MAAQ,IAAI,IAAM,EAAI,UAAY,UACpGC,GAAI,KACJnS,SAAA,CAAC,QACKkM,EAAUE,UAAU2F,QAAO,CAACC,EAAKC,IAAQD,GAAOxI,OAAOyI,EAAIC,MAAQ,IAAI,GAAGE,QAAQ,OAE1FnS,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CACTC,QAASmM,GACTlM,KAAK,QACLC,GAAI,CACFd,gBAAiB,UACjB,UAAW,CAAEA,gBAAiB,WAC9BiC,QAAS,OACT/B,UAEFC,EAAAA,EAAAA,KAACoS,EAAAA,EAAQ,CAACzR,GAAI,CAAEb,MAAO,QAASyR,SAAU,qBAMhDvR,EAAAA,EAAAA,KAACE,EAAAA,EAAG,CAACS,GAAI,CACPR,QAAS,OACTe,cAAe,SACfC,IAAK,EACL+H,GAAI,GACJnJ,SACCwL,GACCvL,EAAAA,EAAAA,KAACE,EAAAA,EAAG,CAACS,GAAI,CAAER,QAAS,OAAQE,eAAgB,SAAU8Q,EAAG,GAAIpR,UAC3DC,EAAAA,EAAAA,KAAC8I,EAAAA,EAAgB,MAEjBuC,EAAc5E,OAAS,GACzBlH,EAAAA,EAAAA,MAAA8S,EAAAA,SAAA,CAAAtS,SAAA,EACER,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACS,GAAI,CACPR,QAAS,OACTC,WAAY,SACZC,eAAgB,gBAChBc,IAAK,EACLwP,OAAQ,UACR9Q,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,UACtElC,QAAS,YACTsP,aAAc,MACdkB,OAAQxO,GAAgC,SAAvBA,EAAMC,QAAQC,KAC3B,qCACA,+BACJqN,UAAW,+BACXkB,WAAY,gBACZ,UAAW,CACT1S,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,UACtEpC,YAAakC,GAAgC,SAAvBA,EAAMC,QAAQC,KAChC,2BACA,uBAELvD,QAASA,IAAMkM,IAAeD,IAAY3M,SAAA,EAC3CR,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACS,GAAI,CAAER,QAAS,OAAQC,WAAY,SAAUe,IAAK,GAAIpB,SAAA,CACxD2M,IACC1M,EAAAA,EAAAA,KAACwS,EAAAA,EAAc,CAAC7R,GAAI,CAClB4Q,SAAU,SACVzR,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,cAG9DhE,EAAAA,EAAAA,KAACyS,EAAAA,EAAc,CAAC9R,GAAI,CAClB4Q,SAAU,SACVzR,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,cAGhEzE,EAAAA,EAAAA,MAACe,EAAAA,EAAU,CAACC,QAAQ,YAAYI,GAAI,CAClC6Q,WAAY,IACZ1R,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,QAAU,UAC1DuN,SAAU,WACVxR,SAAA,CACC2M,GAAa,WAAa,SAAS,uBAGxCnN,EAAAA,EAAAA,MAACe,EAAAA,EAAU,CAACC,QAAQ,QAAQI,GAAI,CAC9Bb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,UAC5DnE,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,UACtElC,QAAS,UACTsP,aAAc,MACdG,SAAU,UACVxR,SAAA,CACCsL,EAAc5E,OAAO,IAA2B,IAAzB4E,EAAc5E,OAAe,OAAS,eAIlEzG,EAAAA,EAAAA,KAACE,EAAAA,EAAG,CACFS,GAAI,CACFR,QAASuM,GAAa,OAAS,OAC/BgG,oBAAqB,CACnBvJ,GAAI,MACJC,GAAI,iBACJuJ,GAAI,kBAENxR,IAAK,EACL+H,GAAI,EACJ0J,UAAWlG,GAAa,0BAA4B,OACpD,oBAAqB,CACnB,KAAM,CACJmG,QAAS,EACTC,UAAW,qBAEb,OAAQ,CACND,QAAS,EACTC,UAAW,mBAGf/S,SAEDsL,EAAc9G,KAAK6I,IAClBpN,EAAAA,EAAAA,KAAC+S,EAAAA,EAAU,CAEThS,KAAMqM,EAAMrM,KACZiS,OAAQ,EACRC,UAA4B,WAAjB7F,EAAM9C,OACjB6C,MAAOC,EAAMD,MACbtC,gBAAiBA,IA/cLzI,WAC1B,IACEsJ,EAAqBzH,GAErB,MAAMN,EAAU0H,EAAc6H,MAAK9F,GAASA,EAAMnJ,YAAcA,IAChE,IAAKN,EAAS,OAEd,MAAMnB,QAAiB2Q,EAAAA,EAAAA,IAA8BlP,EAA8B,WAAnBN,EAAQ2G,QAEpE9H,EAAS8H,QAEXgB,GAAiBvL,GACfA,EAASwE,KAAI6I,GACXA,EAAMnJ,YAAcA,EAChB,IAAKmJ,EAAO9C,OAAyB,WAAjB8C,EAAM9C,OAAsB,WAAa,UAC7D8C,MAIRhH,EAASmE,QAAQ,WAA8B,WAAnB5G,EAAQ2G,OAAsB,UAAY,4BAEtElE,EAASxD,MAAMJ,EAASgI,SAAW,kCAEvC,CAAE,MAAO5H,GACPwD,EAASxD,MAAM,kCAAoCA,EAAM4H,QAC3D,CAAC,QACCkB,EAAqB,KACvB,GAobqC0H,CAAoBhG,EAAMnJ,WACjDoP,UAAWA,IApdLjR,iBACdwK,IAAoB,EAmdK0G,GACjBC,SAAUA,IAAMhF,GAAanB,EAAMnJ,WACnCuP,OAAQA,KAAMC,OAlaVxP,EAkaqBmJ,EAAMnJ,eAja7CqI,GAAS,kBAAkBrI,KADTA,KAkasC,EAC1CyP,WAAYjI,IAAsB2B,EAAMnJ,UACxC0P,sBAAuBvG,EAAMnJ,YAAcY,EAAM+O,iBAV5CxG,EAAMvJ,SAgBjBtE,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CACFS,GAAI,CACFR,QAAS,OACTN,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,UACtEoN,aAAc,EACdF,GAAI,EACJhI,GAAI,EACJ2K,SAAU,SACVvB,OAAQxO,GAAgC,SAAvBA,EAAMC,QAAQC,KAC3B,qCACA,gCACJjE,SAAA,EAEFC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CACLxB,QAAkC,cAAzBoL,EAAWE,UAA4B,YAAc,OAC9DpL,QAASA,IAAMkO,GAAgB,aAC/BhO,GAAI,CACFmT,KAAM,EACNrC,GAAI,IACJL,aAAc,EACdvR,gBAAiBiE,GACc,cAAzB6H,EAAWE,UACiB,SAAvB/H,EAAMC,QAAQC,KAAkB,OAAS,UAE3C,cAETlE,MAAOgE,GACwB,cAAzB6H,EAAWE,UACN,QAEqB,SAAvB/H,EAAMC,QAAQC,KAAkB,WAAa,UAEtD,UAAW,CACTnE,gBAAiBiE,GACc,cAAzB6H,EAAWE,UACiB,SAAvB/H,EAAMC,QAAQC,KAAkB,OAAS,UAEpB,SAAvBF,EAAMC,QAAQC,KAAkB,2BAA6B,uBAGxEjE,SACH,eAGDC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CACLxB,QAAkC,WAAzBoL,EAAWE,UAAyB,YAAc,OAC3DpL,QAASA,IAAMkO,GAAgB,UAC/BhO,GAAI,CACFmT,KAAM,EACNrC,GAAI,IACJL,aAAc,EACdvR,gBAAiBiE,GACc,WAAzB6H,EAAWE,UACiB,SAAvB/H,EAAMC,QAAQC,KAAkB,OAAS,UAE3C,cAETlE,MAAOgE,GACwB,WAAzB6H,EAAWE,UACN,QAEqB,SAAvB/H,EAAMC,QAAQC,KAAkB,WAAa,UAEtD,UAAW,CACTnE,gBAAiBiE,GACc,WAAzB6H,EAAWE,UACiB,SAAvB/H,EAAMC,QAAQC,KAAkB,OAAS,UAEpB,SAAvBF,EAAMC,QAAQC,KAAkB,2BAA6B,uBAGxEjE,SACH,YAGDC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CACLxB,QAAkC,WAAzBoL,EAAWE,UAAyB,YAAc,OAC3DpL,QAASA,IAAMkO,GAAgB,UAC/BhO,GAAI,CACFmT,KAAM,EACNrC,GAAI,IACJL,aAAc,EACdvR,gBAAiBiE,GACc,WAAzB6H,EAAWE,UACiB,SAAvB/H,EAAMC,QAAQC,KAAkB,OAAS,UAE3C,cAETlE,MAAOgE,GACwB,WAAzB6H,EAAWE,UACN,QAEqB,SAAvB/H,EAAMC,QAAQC,KAAkB,WAAa,UAEtD,UAAW,CACTnE,gBAAiBiE,GACc,WAAzB6H,EAAWE,UACiB,SAAvB/H,EAAMC,QAAQC,KAAkB,OAAS,UAEpB,SAAvBF,EAAMC,QAAQC,KAAkB,2BAA6B,uBAGxEjE,SACH,eAMHR,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACS,GAAI,CACPR,QAAS,OACTC,WAAY,SACZC,eAAgB,aAChB6Q,GAAI,EACJ/P,IAAK,GACLpB,SAAA,EACAC,EAAAA,EAAAA,KAACoB,EAAAA,EAAS,CACR2S,YAAY,YACZzS,MAAOqK,EAAWG,YAClBvK,SAteQV,IACpB+K,EAAc,IACTD,EACHG,YAAajL,EAAMY,OAAOH,OAC1B,EAmeUZ,KAAK,QACLC,GAAI,CACFd,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,UACtEoN,aAAc,EACd4C,SAAU,QACV,2BAA4B,CAC1BlU,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,QAAU,UAC1D,aAAc,CACZpC,YAAakC,GAAgC,SAAvBA,EAAMC,QAAQC,KAChC,4BACA,uBAEN,mBAAoB,CAClBpC,YAAakC,GAAgC,SAAvBA,EAAMC,QAAQC,KAChC,2BACA,wBAIViQ,WAAY,CACVC,gBACElU,EAAAA,EAAAA,KAACmU,EAAAA,EAAc,CAAC1G,SAAS,QAAO1N,UAC9BC,EAAAA,EAAAA,KAACoU,EAAAA,EAAU,CAACzT,GAAI,CACdb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,QAAU,kBAO1C,cAAzB2H,EAAWE,YACV7L,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CACLxB,QAAQ,YACRT,MAAM,QACNY,KAAK,SACLD,QAASA,IAAMgO,GAAmB5J,EAAMhB,IACxCe,UAAWqH,EAAUE,UAAU6C,MAAKgD,GAA8B,IAAvBzI,OAAOyI,EAAI7C,UACtDxO,GAAI,CACF8Q,GAAI,GACJ5H,GAAI,EACJ7H,cAAe,OACfgS,SAAU,QACVnU,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,UACtE,UAAW,CACTnE,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,YAExEjE,SACH,aAIuB,WAAzB4L,EAAWE,YACV7L,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CACLxB,QAAQ,YACRT,MAAM,QACNY,KAAK,SACLD,QAASA,IAtlBK2B,iBAAuB,IAAhB6H,EAAOzD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAC,GAC3C,IACE,MAAM6N,EAAWpI,EAAUG,OACxB1I,QAAQsI,IAAU,IAAAsI,EAAA,OAAM,CAAC,WAAY,WAAY,aAAa1Q,SAAqB,QAAb0Q,EAACtI,EAAM1B,cAAM,IAAAgK,OAAA,EAAZA,EAAcvF,cAAc,IACnGxK,KAAKyH,GAAeA,EAAMuI,UAEvB/R,QAAiBgS,EAAAA,EAAAA,IAAuBvK,EAAQoK,GAElD7R,EAAS8H,QACXlE,EAASmE,QAAQ/H,EAASgI,SAC1BoC,MAEAxG,EAASxD,MAAMJ,EAASgI,SAAW,0BAEvC,CAAE,MAAO5H,GACPwD,EAASxD,MAAM,4BAA8BA,EAAM4H,QACrD,CACF,CAqkB+BiK,CAAsB5P,EAAMhB,IAC3Ce,UAAWqH,EAAUG,OAAO4C,MAAKhD,IAAU,CAAC,WAAY,YAAa,YAAYpI,SAASoI,EAAM1B,OAAOyE,iBACvGpO,GAAI,CACF8Q,GAAI,GACJ5H,GAAI,EACJ7H,cAAe,OACfgS,SAAU,QACVnU,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,UACtE,UAAW,CACTnE,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,YAExEjE,SACH,mBAOLC,EAAAA,EAAAA,KAAC0U,EAAAA,EAAc,CACbC,UAAWC,EAAAA,EACXjU,GAAI,CACFd,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KACpC,wBACA,2BACJ6Q,UAAW,QACXpH,SAAU,WACVoG,SAAU,OACVb,OAAQ,SACR5B,aAAc,MACd,4BAA6B,CAC3BvR,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KACpC,uCACA,kCAENsO,OAAQxO,GAAgC,SAAvBA,EAAMC,QAAQC,KAC3B,qCACA,gCACJjE,UAEFR,EAAAA,EAAAA,MAACuV,EAAAA,EAAK,CAACpU,KAAK,SAASqU,cAAY,EAAAhV,SAAA,EAC/BC,EAAAA,EAAAA,KAACgV,EAAAA,EAAS,CAAAjV,UACRR,EAAAA,EAAAA,MAAC0V,EAAAA,EAAQ,CAAAlV,SAAA,EACoB,cAAzB4L,EAAWE,WAAsD,WAAzBF,EAAWE,aACrD7L,EAAAA,EAAAA,KAACuQ,EAAAA,EAAS,CACR5P,GAAI,CACAb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,QAAU,UAC1DlC,QAAS,WACTjC,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KACpC,yBACA,4BACNyJ,SAAU,SACV+C,IAAK,EACLC,OAAQ,EACNC,aAAc5M,GAAgC,SAAvBA,EAAMC,QAAQC,KACjC,qCACA,+BACJuN,SAAU,WACVC,WAAY,KACZzR,SAEwB,cAAzB4L,EAAWE,UAA0B,OAAgC,WAAzBF,EAAWE,UAAuB,SAAS,MAGxF7L,EAAAA,EAAAA,KAACuQ,EAAAA,EAAS,CACR5P,GAAI,CACNb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,QAAU,UAC1DlC,QAAS,WACTjC,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KACpC,yBACA,4BACAyJ,SAAU,SACV+C,IAAK,EACLC,OAAQ,EACZC,aAAc5M,GAAgC,SAAvBA,EAAMC,QAAQC,KACjC,qCACA,+BACJuN,SAAU,WACVC,WAAY,KACZzR,SACH,cAGyB,cAAzB4L,EAAWE,YACVtM,EAAAA,EAAAA,MAAA8S,EAAAA,SAAA,CAAAtS,SAAA,EACEC,EAAAA,EAAAA,KAACoQ,GAAiB,CAAC/O,MAAM,SAASiP,MAAM,mBACxCtQ,EAAAA,EAAAA,KAACoQ,GAAiB,CAAC/O,MAAM,UAAUiP,MAAM,iBACzCtQ,EAAAA,EAAAA,KAACoQ,GAAiB,CAAC/O,MAAM,SAASiP,MAAM,YACxCtQ,EAAAA,EAAAA,KAACoQ,GAAiB,CAAC/O,MAAM,UAAUiP,MAAM,YACzCtQ,EAAAA,EAAAA,KAACoQ,GAAiB,CAAC/O,MAAM,MAAMiP,MAAM,SACrCtQ,EAAAA,EAAAA,KAACoQ,GAAiB,CAAC/O,MAAM,MAAMiP,MAAM,SACrCtQ,EAAAA,EAAAA,KAACoQ,GAAiB,CAAC/O,MAAM,YAAYiP,MAAM,mBAGrB,WAAzB3E,EAAWE,YACVtM,EAAAA,EAAAA,MAAA8S,EAAAA,SAAA,CAAAtS,SAAA,EACEC,EAAAA,EAAAA,KAACoQ,GAAiB,CAAC/O,MAAM,SAASiP,MAAM,mBACxCtQ,EAAAA,EAAAA,KAACoQ,GAAiB,CAAC/O,MAAM,OAAOiP,MAAM,qBACtCtQ,EAAAA,EAAAA,KAACoQ,GAAiB,CAAC/O,MAAM,SAASiP,MAAM,YACxCtQ,EAAAA,EAAAA,KAACoQ,GAAiB,CAAC/O,MAAM,WAAWiP,MAAM,cAC1CtQ,EAAAA,EAAAA,KAACoQ,GAAiB,CAAC/O,MAAM,QAAQiP,MAAM,WACvCtQ,EAAAA,EAAAA,KAACoQ,GAAiB,CAAC/O,MAAM,OAAOiP,MAAM,gBAGhB,WAAzB3E,EAAWE,YACVtM,EAAAA,EAAAA,MAAA8S,EAAAA,SAAA,CAAAtS,SAAA,EACEC,EAAAA,EAAAA,KAACoQ,GAAiB,CAAC/O,MAAM,SAASiP,MAAM,mBACxCtQ,EAAAA,EAAAA,KAACoQ,GAAiB,CAAC/O,MAAM,OAAOiP,MAAM,qBACtCtQ,EAAAA,EAAAA,KAACoQ,GAAiB,CAAC/O,MAAM,WAAWiP,MAAM,cAC1CtQ,EAAAA,EAAAA,KAACoQ,GAAiB,CAAC/O,MAAM,QAAQiP,MAAM,eACvCtQ,EAAAA,EAAAA,KAACoQ,GAAiB,CAAC/O,MAAM,WAAWiP,MAAM,aAC1CtQ,EAAAA,EAAAA,KAACoQ,GAAiB,CAAC/O,MAAM,OAAOiP,MAAM,sBAK9C/Q,EAAAA,EAAAA,MAAC2V,EAAAA,EAAS,CAAAnV,SAAA,CACP8O,KAAetK,KAAI,CAAC2K,EAAU3I,KAAa,IAAA4O,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAC1ChX,EAAAA,EAAAA,MAAC0V,EAAAA,EAAQ,CAEPuB,OAAK,EACD7V,GAAI,CACN,qBAAsB,CACpBd,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KACpC,4BACA,uBAEN,kBAAmB,CACjB0M,aAAc,IAEhB3Q,SAAA,EAEyB,cAAzB4L,EAAWE,WAAsD,WAAzBF,EAAWE,aACnD7L,EAAAA,EAAAA,KAACuQ,EAAAA,EAAS,CAAC5P,GAAI,CAAEmB,QAAS,YAAa/B,UACrCR,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACS,GAAI,CAAER,QAAS,OAAQgB,IAAK,GAAIpB,SAAA,CACT,cAAzB4L,EAAWE,YACV7L,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CACLxB,QAAQ,YACRT,MAAM,QACNY,KAAK,QACLkE,SAAiC,IAAvB2E,OAAO2F,EAAIC,QACrB1O,QAASA,IAlsBf2B,WACtB,IACE,MAAMI,QAAiBiU,EAAAA,EAAAA,IAAgBvH,GACnC1M,EAAS8H,OACXlE,EAASmE,QAAQ/H,EAASgI,SAE1BpE,EAASxD,MAAMJ,EAASgI,SAAW,uBAEvC,CAAE,MAAO5H,GACPwD,EAASxD,MAAM,qBAAuBA,EAAM4H,QAC9C,GAwrB2CkM,CAAgBxH,GACrCvO,GAAI,CACIqT,SAAU,OACVlS,QAAS,UACTyP,SAAU,WACVxR,SACH,SAIuB,WAAzB4L,EAAWE,YACV7L,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CACLxB,QAAQ,YACRT,MAAM,QACNY,KAAK,QACLD,QAASA,IAjkBb2B,WACxB,IAEE,MAAMuE,QAAegQ,EAAAA,EAAAA,IAAqBpC,GACtC5N,EAAO2D,OACTlE,EAASmE,QAAQ5D,EAAO6D,SAExBpE,EAASxD,MAAM+D,EAAO6D,QAE1B,CAAE,MAAO5H,GACPC,QAAQD,MAAM,0BAA2BA,GACzCwD,EAASxD,MAAM,yBACjB,GAqjB2CgU,CAAkB1H,EAAIqF,SACrC3P,SAAU,CAAC,WAAY,YAAa,YAAYhB,SAASsL,EAAI5E,OAAOyE,eAC1EpO,GAAI,CACIqT,SAAU,OACVlS,QAAS,UACTyP,SAAU,WACVxR,SACH,iBAOPC,EAAAA,EAAAA,KAACuQ,EAAAA,EAAS,CACR5P,GAAI,CACJb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAC1B,2BACA,qBACJlC,QAAS,WACT4O,aAAc5M,GAAgC,SAAvBA,EAAMC,QAAQC,KACjC,sCACA,iCACJjE,SAEDmP,EAAIjC,UAAY,MAEO,cAAzBtB,EAAWE,YACVtM,EAAAA,EAAAA,MAAA8S,EAAAA,SAAA,CAAAtS,SAAA,EACEC,EAAAA,EAAAA,KAACuQ,EAAAA,EAAS,CAAC5P,GAAI,CACbb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,QAAU,UAC1DlC,QAAS,OACT/B,SACCmP,EAAI2H,iBAEP7W,EAAAA,EAAAA,KAACuQ,EAAAA,EAAS,CAAC5P,GAAI,CACbb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,QAAU,UAC1DlC,QAAS,OACT/B,SACCmP,EAAI4H,eAEP9W,EAAAA,EAAAA,KAACuQ,EAAAA,EAAS,CAAC5P,GAAI,CAAEmB,QAAS,OAAQ/B,UAChCC,EAAAA,EAAAA,KAACE,EAAAA,EAAG,CACFS,GAAI,CACFb,MAA8B,IAAvByJ,OAAO2F,EAAIC,QACd,UACA5F,OAAO2F,EAAIC,QAAU,EACrB,UACA,UACJtP,gBAAwC,IAAvB0J,OAAO2F,EAAIC,QACxB,yBACA5F,OAAO2F,EAAIC,QAAU,EACrB,wBACA,yBACJhP,QAAS,eACT0J,GAAI,EACJ4H,GAAI,IACJL,aAAc,EACd2F,WAAYjT,GAAgC,SAAvBA,EAAMC,QAAQC,KACR,IAAvBuF,OAAO2F,EAAIC,QACX,kCACA5F,OAAO2F,EAAIC,QAAU,EACrB,iCACE,kCACF,OACJqC,WAAY,IACZD,SAAU,WACVxR,SAEsB,IAAvBwJ,OAAO2F,EAAIC,QAAgB,SAAW5F,OAAO2F,EAAIC,QAAU,EAAI,MAAQ,YAG5E5P,EAAAA,EAAAA,MAACgR,EAAAA,EAAS,CAAC5P,GAAI,CACbb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,QAAU,UAC1DlC,QAAS,OACT/B,SAAA,CACCgQ,KAAKC,IAAIzG,OAAO2F,EAAIC,SAAW,GAC/B5F,OAAO2F,EAAI8H,UAAY,IACtBzX,EAAAA,EAAAA,MAACe,EAAAA,EAAU,CACTqU,UAAU,OACVhU,GAAI,CACF4Q,SAAU,SACVzR,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,UAC5DkO,GAAI,GACJnS,SAAA,CACH,QACOmP,EAAI8H,SAAS,WAIzBzX,EAAAA,EAAAA,MAACgR,EAAAA,EAAS,CAAC5P,GAAI,CAAEb,MAAOyJ,OAAO2F,EAAI+C,MAAQ,EAAI,UAAY,UAAWnQ,QAAS,OAAQ/B,SAAA,CACpFwJ,OAAO2F,EAAI+C,KAAKE,QAAQ,GAAG,IAAE5I,OAAO2F,EAAI+C,KAAO,EAAI,SAAM,SACtB,IAAnC1I,OAAO2F,EAAI+H,eAAiB,KAC3B1X,EAAAA,EAAAA,MAACe,EAAAA,EAAU,CACTqU,UAAU,OACVhU,GAAI,CACF4Q,SAAU,SACVzR,MAAOyJ,OAAO2F,EAAI+H,gBAAkB,EAAI,UAAY,UACpD/E,GAAI,GACJnS,SAAA,CACH,SACQwJ,OAAO2F,EAAI+H,eAAe9E,QAAQ,GAAG,WAIlDnS,EAAAA,EAAAA,KAACuQ,EAAAA,EAAS,CAAC5P,GAAI,CAAEb,MAAO,QAASgC,QAAS,OAAQ/B,SAAEwJ,OAAO2F,EAAIgI,KAAK/E,QAAQ,MAC5EnS,EAAAA,EAAAA,KAACuQ,EAAAA,EAAS,CAAC5P,GAAI,CAAEb,MAAO,QAASgC,QAAS,OAAQ/B,SAC/CmP,EAAIE,YAAY+C,QAAQ,QAIL,WAAzBxG,EAAWE,YACVtM,EAAAA,EAAAA,MAAA8S,EAAAA,SAAA,CAAAtS,SAAA,EACEC,EAAAA,EAAAA,KAACuQ,EAAAA,EAAS,CAAC5P,GAAI,CAAEb,MAAO,QAASgC,QAAS,OAAQ/B,SAAEmP,EAAI2H,iBACxD7W,EAAAA,EAAAA,KAACuQ,EAAAA,EAAS,CAAC5P,GAAI,CAAEmB,QAAS,OAAQ/B,UAChCC,EAAAA,EAAAA,KAACE,EAAAA,EAAG,CACFS,GAAI,CACFb,MAA8C,SAApB,QAAnBqV,EAAAjG,EAAIiI,uBAAe,IAAAhC,OAAA,EAAnBA,EAAqBpG,eAA0B,UAAY,UAClElP,gBAAwD,SAApB,QAAnBuV,EAAAlG,EAAIiI,uBAAe,IAAA/B,OAAA,EAAnBA,EAAqBrG,eAClC,wBACA,yBACJ5O,QAAS,eACT0J,GAAI,EACJ4H,GAAI,IACJL,aAAc,EACd2F,WAAmD,SAApB,QAAnB1B,EAAAnG,EAAIiI,uBAAe,IAAA9B,OAAA,EAAnBA,EAAqBtG,eAC7B,iCACA,kCACJyC,WAAY,IACZD,SAAU,WACVxR,SAEkB,QAFlBuV,EAEDpG,EAAIiI,uBAAe,IAAA7B,OAAA,EAAnBA,EAAqB9L,mBAG1BxJ,EAAAA,EAAAA,KAACuQ,EAAAA,EAAS,CAAC5P,GAAI,CAAEmB,QAAS,OAAQ/B,UAChCC,EAAAA,EAAAA,KAACE,EAAAA,EAAG,CACFS,GAAI,CACFb,MAAqC,cAApB,QAAVyV,EAAArG,EAAI5E,cAAM,IAAAiL,OAAA,EAAVA,EAAYxG,eAA+B,UAChB,eAApB,QAAVyG,EAAAtG,EAAI5E,cAAM,IAAAkL,OAAA,EAAVA,EAAYzG,gBACkB,cAApB,QAAV0G,EAAAvG,EAAI5E,cAAM,IAAAmL,OAAA,EAAVA,EAAY1G,eADgC,UAEd,aAApB,QAAV2G,EAAAxG,EAAI5E,cAAM,IAAAoL,OAAA,EAAVA,EAAY3G,eAA8B,UAC1C,UACJlP,gBAA+C,cAApB,QAAV8V,EAAAzG,EAAI5E,cAAM,IAAAqL,OAAA,EAAVA,EAAY5G,eAA+B,wBAC1B,eAApB,QAAV6G,EAAA1G,EAAI5E,cAAM,IAAAsL,OAAA,EAAVA,EAAY7G,gBACkB,cAApB,QAAV8G,EAAA3G,EAAI5E,cAAM,IAAAuL,OAAA,EAAVA,EAAY9G,eADgC,yBAEd,aAApB,QAAV+G,EAAA5G,EAAI5E,cAAM,IAAAwL,OAAA,EAAVA,EAAY/G,eAA8B,0BAC1C,wBACJ5O,QAAS,eACT0J,GAAI,EACJ4H,GAAI,IACJL,aAAc,EACd2F,WAA0C,cAApB,QAAVhB,EAAA7G,EAAI5E,cAAM,IAAAyL,OAAA,EAAVA,EAAYhH,eAA+B,iCACrB,eAApB,QAAViH,EAAA9G,EAAI5E,cAAM,IAAA0L,OAAA,EAAVA,EAAYjH,gBACkB,cAApB,QAAVkH,EAAA/G,EAAI5E,cAAM,IAAA2L,OAAA,EAAVA,EAAYlH,eADgC,kCAEd,aAApB,QAAVmH,EAAAhH,EAAI5E,cAAM,IAAA4L,OAAA,EAAVA,EAAYnH,eAA8B,mCAC1C,iCACJyC,WAAY,IACZD,SAAU,WACVxR,SAES,QAFToW,EAEDjH,EAAI5E,cAAM,IAAA6L,OAAA,EAAVA,EAAY3M,mBAGjBxJ,EAAAA,EAAAA,KAACuQ,EAAAA,EAAS,CAAC5P,GAAI,CAAEb,MAAO,QAASgC,QAAS,OAAQ/B,SAAEmP,EAAI5J,YACxDtF,EAAAA,EAAAA,KAACuQ,EAAAA,EAAS,CAAC5P,GAAI,CAAEb,MAAO,QAASgC,QAAS,OAAQ/B,SAAEmP,EAAIkI,SACxDpX,EAAAA,EAAAA,KAACuQ,EAAAA,EAAS,CAAC5P,GAAI,CAAEb,MAAO,QAASgC,QAAS,OAAQ/B,SAAEmP,EAAIgB,cAGlC,WAAzBvE,EAAWE,YACVtM,EAAAA,EAAAA,MAAA8S,EAAAA,SAAA,CAAAtS,SAAA,EACEC,EAAAA,EAAAA,KAACuQ,EAAAA,EAAS,CAAC5P,GAAI,CAAEb,MAAO,QAASgC,QAAS,OAAQ/B,SAAEmP,EAAI2H,iBACxD7W,EAAAA,EAAAA,KAACuQ,EAAAA,EAAS,CAAC5P,GAAI,CAAEmB,QAAS,OAAQ/B,UAChCC,EAAAA,EAAAA,KAACE,EAAAA,EAAG,CACFS,GAAI,CACFb,MAA8C,SAApB,QAAnBsW,EAAAlH,EAAIiI,uBAAe,IAAAf,OAAA,EAAnBA,EAAqBrH,eAA0B,UAAY,UAClElP,gBAAwD,SAApB,QAAnBwW,EAAAnH,EAAIiI,uBAAe,IAAAd,OAAA,EAAnBA,EAAqBtH,eAClC,wBACA,yBACJ5O,QAAS,eACT0J,GAAI,EACJ4H,GAAI,IACJL,aAAc,EACd2F,WAAmD,SAApB,QAAnBT,EAAApH,EAAIiI,uBAAe,IAAAb,OAAA,EAAnBA,EAAqBvH,eAC7B,iCACA,kCACJyC,WAAY,IACZD,SAAU,WACVxR,SAEkB,QAFlBwW,EAEDrH,EAAIiI,uBAAe,IAAAZ,OAAA,EAAnBA,EAAqB/M,mBAG1BxJ,EAAAA,EAAAA,KAACuQ,EAAAA,EAAS,CAAC5P,GAAI,CAAEb,MAAO,QAASgC,QAAS,OAAQ/B,SAAEmP,EAAImI,YACxDrX,EAAAA,EAAAA,KAACuQ,EAAAA,EAAS,CAAC5P,GAAI,CAAEb,MAAO,QAASgC,QAAS,OAAQ/B,SAAEmP,EAAIoI,aACxDtX,EAAAA,EAAAA,KAACuQ,EAAAA,EAAS,CAAC5P,GAAI,CAAEb,MAAO,QAASgC,QAAS,OAAQ/B,SAAEmP,EAAIqF,WACxDvU,EAAAA,EAAAA,KAACuQ,EAAAA,EAAS,CAAC5P,GAAI,CAAEb,MAAO,QAASgC,QAAS,OAAQ/B,SAAEmP,EAAIiB,gBAzOvD5J,EA4OI,IAEc,IAA1BsI,KAAepI,SACdzG,EAAAA,EAAAA,KAACiV,EAAAA,EAAQ,CAAAlV,UACPC,EAAAA,EAAAA,KAACuQ,EAAAA,EAAS,CACRgH,QAAkC,WAAzB5L,EAAWE,UAAyB,EAAI,EACjD2L,MAAM,SACN7W,GAAI,CACFb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAC1B,2BACA,qBACJlC,QAAS,YACT/B,SAED4L,EAAWG,YAAc,4BAA8B,mCAStE9L,EAAAA,EAAAA,KAACE,EAAAA,EAAG,CAACS,GAAI,CACPR,QAAS,OACTE,eAAgB,SAChBD,WAAY,SACZqX,OAAQ,SACR1X,UACAC,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACR,MAAM,iBAAgBC,SAAC,0CAOxCC,EAAAA,EAAAA,KAAC0X,GAAW,CAAC7S,MAAOA,EAAO7F,KAAMmM,EAAmBlM,QAzxB1B0Y,KAC7BvM,GAAqB,EAAM,MA0xBrB,EAssBV,GAprBqBwM,KAAO,IAADC,EACzB,MAAOC,EAAmBC,IAAwBzY,EAAAA,EAAAA,WAAS,IACpD0Y,EAAQC,IAAa3Y,EAAAA,EAAAA,UAA0B,KAC/CH,EAAgB+L,IAAqB5L,EAAAA,EAAAA,UAA0B,KAC/D4G,EAAWC,IAAgB7G,EAAAA,EAAAA,WAAS,IACpC4Y,EAAcC,IAAmB7Y,EAAAA,EAAAA,WAAS,IAC1C8Y,EAAYC,IAAiB/Y,EAAAA,EAAAA,UAAqC,CAAC,IACnEwL,EAAkBwN,IAAuBhZ,EAAAA,EAAAA,UAAwB,OACjEyL,EAAmBwN,IAAwBjZ,EAAAA,EAAAA,UAAwB,OACnEkZ,EAAqBC,IAA0BnZ,EAAAA,EAAAA,WAAS,IACxDoZ,EAAqBC,IAA0BrZ,EAAAA,EAAAA,WAAS,IACxDsZ,EAAoBC,IAAyBvZ,EAAAA,EAAAA,UAI1C,OACHwZ,GAAeC,KAAoBzZ,EAAAA,EAAAA,UAAsE,OACzG0Z,GAAoBC,KAAyB3Z,EAAAA,EAAAA,WAAS,IACtD4Z,GAAgBC,KAAqB7Z,EAAAA,EAAAA,WAAS,IAC9C8Z,GAAyBC,KAA8B/Z,EAAAA,EAAAA,aACvDga,GAAeC,KAAoBja,EAAAA,EAAAA,UAAwB,MAE5D8G,IAAWC,EAAAA,EAAAA,MAGXmT,GAAYpX,UAChB,IACE+D,GAAa,GACb,MAAOsT,EAAeC,SAAwBC,QAAQC,IAAI,EACxDC,EAAAA,EAAAA,MACAxX,MAGF,GAAIoX,EAAcnP,OAAQ,CACxB,MAAMwC,EAAsB2M,EAAc1M,cAAcxI,KAAKZ,IAAY,CACvEE,GAAIF,EAAQE,GACZ9C,KAAM,GAAG4C,EAAQqJ,qBAAqBrJ,EAAQsJ,eAEhD/B,EAAkB4B,EACpB,CAEI4M,EAAepP,QACjB2N,EAAUyB,EAAe1B,OAE7B,CAAE,MAAOpV,GACPC,QAAQD,MAAM,uBAAwBA,EACxC,CAAC,QACCuD,GAAa,EACf,IAKF5C,EAAAA,EAAAA,YAAU,KACRiW,IAAW,GACV,IAEH,MAIMM,GAAyBA,KAC7B/B,GAAqB,EAAM,EAmFvBgC,GAAqB3X,UACzB,MAAMyC,EAAQmT,EAAO9E,MAAK8G,GAAKA,EAAEnW,KAAOoG,IACxC,IAAKpF,EAAO,OAEZ,MAAMZ,EAAYY,EAAMoV,mBAAqBpV,EAAM+O,gBAC9C3P,IAEDY,EAAM+O,kBAAoB3P,EAE5B4U,EAAsB,CACpB5O,UACAhG,YACAiW,OAAQ,eAIVrB,EAAsB,CACpB5O,UACAhG,YACAiW,OAAQ,YAGZzB,GAAuB,GAAK,EAgCxBrF,GAAsBhR,UAC1B,IACEmW,EAAqBtO,GACrB,MAAMpF,EAAQmT,EAAO9E,MAAK8G,GAAKA,EAAEnW,KAAOoG,IACxC,IAAKpF,EAAO,OAEZ,MAAMrC,QH1vCLJ,eAA6ByE,GAClC,IACE,MAAMvE,QAAgBC,EAAAA,EAAAA,KAChBC,QAAiBC,MAAM,GAAGP,wBAA6B,CAC3DQ,OAAQ,MACRJ,QAAS,IACJA,EACH,eAAgB,oBAElB4H,KAAMC,KAAKC,UAAUvD,KAIvB,aADmBrE,EAASG,MAE9B,CAAE,MAAOC,GAEP,MADAC,QAAQC,IAAI,iCAAkCF,GACxC,IAAIG,MAAM,kCAClB,CACF,CGwuC6BoX,CAAc,CACnClQ,UACAgJ,WAAYpO,EAAMgN,iBAGhBrP,EAAS8H,QACXlE,GAASmE,QAAQ,WAAY1F,EAAMgN,eAA6B,WAAZ,0BACpD2H,MAEApT,GAASxD,MAAMJ,EAASgI,SAAW,kCAEvC,CAAE,MAAO5H,GACPwD,GAASxD,MAAM,kCAAoCA,EAAM4H,QAC3D,CAAC,QACC+N,EAAqB,KACvB,GAGF,OACEhZ,EAAAA,EAAAA,MAAC6a,EAAAA,SAAc,CAAAra,SAAA,EACbC,EAAAA,EAAAA,KAACqa,EAAAA,EAAW,CAAAta,UACVC,EAAAA,EAAAA,KAACsa,EAAAA,EAAY,CAACC,MAAO,qBAEvBva,EAAAA,EAAAA,KAACE,EAAAA,EAAG,CAACS,GAAI,CAAEwQ,EAAG,GAAIpR,SACfiZ,IAAsBF,IACrB9Y,EAAAA,EAAAA,KAACyK,GAAgB,CACf5F,MAAOmT,EAAO9E,MAAK8G,GAAKA,EAAEnW,KAAOiV,GAAcjV,KAC/C6G,OArGe8P,KACvBvB,IAAsB,GACtBF,GAAiB,KAAK,EAoGdpO,WAAYA,IAAMwO,IAAkB,GACpCvO,eAAgBA,IAAMmP,GAAmBjB,GAAcjV,IACvDgH,gBAAiBA,IAAMuI,GAAoB0F,GAAcjV,IACzDiH,iBAAkBA,IAAqBgO,GAAcjV,GACrDkH,kBAAmBA,IAAsB+N,GAAcjV,GACvDmH,kBAAuF,QAAtE6M,EAAE1Y,EAAe+T,MAAKuH,GAAOA,EAAI5W,KAAOiV,GAAclF,yBAAgB,IAAAiE,OAAA,EAApEA,EAAsE9W,KACzFkK,mBAAoByP,GAAMrB,IAA2B,IAAMqB,IAC3Dvb,eAAgBA,EAChB+L,kBAAmBA,KAGrB3L,EAAAA,EAAAA,MAAA8S,EAAAA,SAAA,CAAAtS,SAAA,EACEC,EAAAA,EAAAA,KAACE,EAAAA,EAAG,CAACS,GAAI,CAAEuQ,GAAI,EAAG/Q,QAAS,OAAQgB,IAAK,GAAIpB,UAC1CC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CACL4S,UAAU,QACVpU,QAAQ,YACRoa,UAAW,EACXC,WAAW5a,EAAAA,EAAAA,KAAC6a,EAAAA,EAAY,IACxBpa,QAlMgBqa,KAC5B/C,GAAqB,EAAK,EAkMdnT,SAAUsB,GAAagS,EACvBvX,GAAI,CACJ8Q,GAAI,GACJ5H,GAAI,IACJ7H,cAAe,OACfuP,SAAU,YAAYxR,SACvB,mBAKFmG,GACClG,EAAAA,EAAAA,KAACE,EAAAA,EAAG,CAACS,GAAI,CAAER,QAAS,OAAQE,eAAgB,SAAU6I,GAAI,GAAInJ,UAC5DC,EAAAA,EAAAA,KAAC8I,EAAAA,EAAgB,OAGnB9I,EAAAA,EAAAA,KAACE,EAAAA,EAAG,CACFS,GAAI,CACFR,QAAS,OACTuS,oBAAqB,CACnBvJ,GAAI,MACJC,GAAI,iBACJuJ,GAAI,kBAENxR,IAAK,GACLpB,SAEDiY,EAAOvR,OAAS,EACfuR,EAAOzT,KAAKM,IAAW,IAADkW,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACNlD,EAAWvT,EAAMhB,IAY/B,OACEtE,EAAAA,EAAAA,MAACgc,EAAAA,EAAI,CAEH5a,GAAI,CACFd,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,UACtEoN,aAAc,EACdD,EAAG,EACHE,UAAWvN,GAAgC,SAAvBA,EAAMC,QAAQC,KAC9B,oCACA,oCACJsO,OAAQxO,GAAgC,SAAvBA,EAAMC,QAAQC,KAC3B,qCACA,gCACJjE,SAAA,EAGFR,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACS,GAAI,CAAER,QAAS,OAAQC,WAAY,SAAU8Q,GAAI,GAAInR,SAAA,EACxDC,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,KAAKI,GAAI,CAC3Bb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,QAAU,UAC1D8P,KAAM,GACN/T,SACC8E,EAAM9D,QAETxB,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACS,GAAI,CAAER,QAAS,OAAQgB,IAAK,GAAIpB,SAAA,EACnCC,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CACTE,KAAK,QACLC,GAAI,CACFd,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,UACtE,UAAW,CACTnE,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,YAG1EvD,QAASA,IA9MZwJ,KACvB,MAAMpF,EAAQmT,EAAO9E,MAAK8G,GAAKA,EAAEnW,KAAOoG,IACpCpF,IACFkU,GAAiB,CACflV,GAAIoG,EACJlJ,KAAM8D,EAAM9D,KACZ6S,gBAAiB/O,EAAM+O,kBAEzBqF,IAAsB,GACxB,EAqMyCuC,CAAgB3W,EAAMhB,IAAI9D,UAEzCC,EAAAA,EAAAA,KAACyb,EAAAA,EAAc,CAAClK,SAAS,QAAQ5Q,GAAI,CAAEb,MAAO,cAEhDE,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CACTE,KAAK,QACLC,GAAI,CACFd,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,UACtE,UAAW,CACTnE,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,YAG1EvD,QAASA,IA1PX2B,WACxBmX,GAAiBtP,GACjB0O,GAAuB,EAAK,EAwPa+C,CAAkB7W,EAAMhB,IAAI9D,UAE3CC,EAAAA,EAAAA,KAAC2b,EAAAA,EAAU,CAACpK,SAAS,QAAQ5Q,GAAI,CAAEb,MAAO,oBAMhDP,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACS,GAAI,CAAEuQ,GAAI,GAAInR,SAAA,EACjBC,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,QAAQI,GAAI,CAC9Bb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,UAC5DkN,GAAI,GACJnR,SAAC,oBAGHR,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACS,GAAI,CAAER,QAAS,OAAQgB,IAAK,EAAGf,WAAY,UAAWL,SAAA,CACxD8E,EAAM+O,iBAEL5T,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CACTK,GAAI,CACFmT,KAAM,EACNhU,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,QAAU,UAC1DnE,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,UACtElC,QAAS,aACTsP,aAAc,EACdG,SAAU,aACVxR,UAE2D,QAA5Dgb,EAAA5b,EAAe+T,MAAKuH,GAAOA,EAAI5W,KAAOgB,EAAM+O,yBAAgB,IAAAmH,OAAA,EAA5DA,EAA8Dha,OAAQ,oBAIzEf,EAAAA,EAAAA,KAACmE,EAAAA,EAAW,CAACzE,WAAS,EAACgB,KAAK,QAAOX,UACjCR,EAAAA,EAAAA,MAAC8E,EAAAA,EAAM,CACL/C,MAAOuD,EAAMoV,mBAAqB,GAClC1Y,SAAWC,GA5OhBoa,EAAC3R,EAAiBhG,KAE3C,MAAMY,EAAQmT,EAAO9E,MAAK8G,GAAKA,EAAEnW,KAAOoG,IACpCpF,IACFA,EAAMoV,kBAAoBhW,EAC1BgU,EAAU,IAAID,IAChB,EAsO+C4D,CAAmB/W,EAAMhB,GAAIrC,EAAEC,OAAOH,OACvDua,cAAY,EACZlb,GAAI,CACFd,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,UACtElE,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,QAAU,UAC1D,qCAAsC,CACpCpC,YAAakC,GAAgC,SAAvBA,EAAMC,QAAQC,KAChC,4BACA,uBAEN,2CAA4C,CAC1CpC,YAAakC,GAAgC,SAAvBA,EAAMC,QAAQC,KAChC,2BACA,uBAENjE,SAAA,EAEFC,EAAAA,EAAAA,KAACwE,EAAAA,EAAQ,CAAClD,MAAM,GAAGsD,UAAQ,EAAA7E,SAAC,kBAC3BZ,EAAeoF,KAAKZ,IACnB3D,EAAAA,EAAAA,KAACwE,EAAAA,EAAQ,CAAkBlD,MAAOqC,EAAQE,GAAG9D,SAC1C4D,EAAQ5C,MADI4C,EAAQE,YAO/B7D,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CACTE,KAAK,QACLD,QAASA,IAAMsZ,GAAmBlV,EAAMhB,IACxCe,SAAUkG,IAAqBjG,EAAMhB,KAAQgB,EAAM+O,kBAAoB/O,EAAMoV,kBAC7EtZ,GAAI,CACFd,gBAAiBgF,EAAM+O,gBACnB9P,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,UACrDa,EAAMoV,kBACJnW,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,UACrDF,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,UAC3D,UAAW,CACTnE,gBAAiBgF,EAAM+O,gBACnB9P,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,UACrDa,EAAMoV,kBACJnW,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,UACrDF,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,WAE7D,iBAAkB,CAChBnE,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,YAExEjE,SAED+K,IAAqBjG,EAAMhB,IAC1B7D,EAAAA,EAAAA,KAAC8I,EAAAA,EAAgB,CAACpI,KAAM,GAAIC,GAAI,CAAEb,MAAO,WACvC+E,EAAM+O,iBACR5T,EAAAA,EAAAA,KAAC8b,EAAAA,EAAQ,CAACnb,GAAI,CAAEb,MAAO,YAEvBE,EAAAA,EAAAA,KAAC+b,EAAAA,EAAW,CAACpb,GAAI,CAAEb,MAAO,oBAOlCP,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACS,GAAI,CAAER,QAAS,OAAQE,eAAgB,WAAY6Q,GAAI,GAAInR,SAAA,EAC9DC,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,QAAQI,GAAI,CAC9Bb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,UAC5DgY,GAAI,GACJjc,SAAC,aAGHC,EAAAA,EAAAA,KAAC2R,EAAAA,EAAM,CACLC,QAAS/M,EAAMgN,eACftQ,SAAUA,IAAM6R,GAAoBvO,EAAMhB,IAC1Ce,SAAUmG,IAAsBlG,EAAMhB,GACtClD,GAAI,CACF,qBAAsB,CACpBd,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KACpC,2BACA,sBAEN,oCAAqC,CACnCnE,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KACpC,qBACA,sBAEN,mBAAoB,CAClB,iBAAkB,CAChBnE,gBAAiBiE,GAAgC,SAAvBA,EAAMC,QAAQC,KACtC,qBACA,sBAEJnE,gBAAkBgF,EAAMgN,eAAwC,qBAAvB,6BAQjD7R,EAAAA,EAAAA,KAACE,EAAAA,EAAG,CAACS,GAAI,CAAEuQ,GAAI,GAAInR,UACjBR,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACS,GAAI,CAAER,QAAS,OAAQE,eAAgB,gBAAiB6Q,GAAI,GAAInR,SAAA,EACnER,EAAAA,EAAAA,MAACe,EAAAA,EAAU,CAACC,QAAQ,QAAQI,GAAI,CAC9Bb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,WAC5DjE,SAAA,CAAC,WACkB,QAAXib,EAAAnW,EAAMsI,aAAK,IAAA6N,OAAA,EAAXA,EAAa5O,SAAU,MAEjC7M,EAAAA,EAAAA,MAACe,EAAAA,EAAU,CAACC,QAAQ,QAAQI,GAAI,CAC9Bb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,WAC5DjE,SAAA,CAAC,QACe,QAAXkb,EAAApW,EAAMsI,aAAK,IAAA8N,OAAA,EAAXA,EAAagB,MAAO,WAO/B1c,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACS,GAAI,CACPR,QAAS,OACTE,eAAgB,gBAChB6b,UAAWpY,GAAgC,SAAvBA,EAAMC,QAAQC,KAC9B,qCACA,+BACJmY,GAAI,GACJpc,SAAA,EACAC,EAAAA,EAAAA,KAACoc,EAAAA,EAAO,CAAC7B,MAAM,UAASxa,UACtBR,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACS,GAAI,CAAE0b,UAAW,UAAWtc,SAAA,EAC/BC,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,QAAQI,GAAI,CAC9Bb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,WAC5DjE,SAAC,OACHC,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,QAAQI,GAAI,CAC9Bb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,WAC5DjE,UAAa,QAAXmb,EAAArW,EAAMsI,aAAK,IAAA+N,OAAA,EAAXA,EAAaoB,UAAW,UAGhCtc,EAAAA,EAAAA,KAACoc,EAAAA,EAAO,CAAC7B,MAAM,YAAWxa,UACxBR,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACS,GAAI,CAAE0b,UAAW,UAAWtc,SAAA,EAC/BC,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,QAAQI,GAAI,CAC9Bb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,WAC5DjE,SAAC,OACHC,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,QAAQI,GAAI,CAC9Bb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,WAC5DjE,UAAa,QAAXob,EAAAtW,EAAMsI,aAAK,IAAAgO,OAAA,EAAXA,EAAaoB,YAAa,UAGlCvc,EAAAA,EAAAA,KAACoc,EAAAA,EAAO,CAAC7B,MAAM,WAAUxa,UACvBR,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACS,GAAI,CAAE0b,UAAW,UAAWtc,SAAA,EAC/BC,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,QAAQI,GAAI,CAC9Bb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,WAC5DjE,SAAC,OACHC,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,QAAQI,GAAI,CAC9Bb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,WAC5DjE,UAAa,QAAXqb,EAAAvW,EAAMsI,aAAK,IAAAiO,OAAA,EAAXA,EAAaoB,WAAY,UAGjCxc,EAAAA,EAAAA,KAACoc,EAAAA,EAAO,CAAC7B,MAAM,YAAWxa,UACxBR,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACS,GAAI,CAAE0b,UAAW,UAAWtc,SAAA,EAC/BC,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,QAAQI,GAAI,CAC9Bb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,WAC5DjE,SAAC,OACHC,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,QAAQI,GAAI,CAC9Bb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,WAC5DjE,UAAa,QAAXsb,EAAAxW,EAAMsI,aAAK,IAAAkO,OAAA,EAAXA,EAAaoB,YAAa,UAGlCzc,EAAAA,EAAAA,KAACoc,EAAAA,EAAO,CAAC7B,MAAM,SAAQxa,UACrBR,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACS,GAAI,CAAE0b,UAAW,UAAWtc,SAAA,EAC/BC,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,QAAQI,GAAI,CAC9Bb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,WAC5DjE,SAAC,OACHC,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,QAAQI,GAAI,CAC9Bb,MAAOgE,GAAgC,SAAvBA,EAAMC,QAAQC,KAAkB,UAAY,WAC5DjE,UAAa,QAAXub,EAAAzW,EAAMsI,aAAK,IAAAmO,OAAA,EAAXA,EAAaoB,SAAU,cArP5B7X,EAAMhB,GAyPN,KAIX7D,EAAAA,EAAAA,KAACE,EAAAA,EAAG,CAACS,GAAI,CAAEgc,WAAY,SAAUN,UAAW,SAAUnT,GAAI,GAAInJ,UAC5DC,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,KAAKT,MAAM,iBAAgBC,SAAC,8DAW9DC,EAAAA,EAAAA,KAAC4c,EAAW,CACV5d,KAAM8Y,EACN7Y,QAAS6a,GACT5a,SAlfoBkD,UACxB,IACE+V,GAAgB,GAChB,MAAM3V,QHjsCLJ,eAA2Bya,GAChC,IACE,MAAMva,QAAgBC,EAAAA,EAAAA,KAChBC,QAAiBC,MAAM,GAAGP,sBAA2B,CACzDQ,OAAQ,OACRJ,QAAS,IACJA,EACH,eAAgB,oBAElB4H,KAAMC,KAAKC,UAAUyS,KAIvB,aADmBra,EAASG,MAE9B,CAAE,MAAOC,GAEP,MADAC,QAAQC,IAAI,wBAAyBF,GAC/B,IAAIG,MAAM,yBAClB,CACF,CG+qC6B+Z,CAAY,CACjC/b,KAAM8F,EAAK9F,KACXC,QAAS,KAGPwB,EAAS8H,QACXlE,GAASmE,QAAQ,8BACjBiP,KACAM,MAEA1T,GAASxD,MAAMJ,EAASgI,SAAW,yBAEvC,CAAE,MAAO5H,GACPwD,GAASxD,MAAM,yBAA2BA,EAAM4H,QAClD,CAAC,QACC2N,GAAgB,EAClB,GAgeIhZ,eAAgBA,KAElBa,EAAAA,EAAAA,KAAC+c,EAAe,CACd/d,KAAMka,GACNja,QAASA,KACPka,IAAkB,GAClBE,QAA2B3S,EAAU,EAEvCxH,SAAUkD,UACR,IACE,IAAK0W,GAAe,OAEpB,MAAMtW,QHzlDXJ,eAA+B6H,EAAiB+S,GACrD,IACE,MAAM1a,QAAgBC,EAAAA,EAAAA,KAChBC,QAAiBC,MAAM,GAAGP,mBAAwB,CACtDQ,OAAQ,OACRJ,QAAS,IACJA,EACH,eAAgB,oBAElB4H,KAAMC,KAAKC,UAAU,CAAEH,aAAY+S,MAIrC,aADmBxa,EAASG,MAE9B,CAAE,MAAOC,GAEP,MADAC,QAAQC,IAAI,+BAAgCF,GACtC,IAAIG,MAAM,+BAClB,CACF,CGukDmCka,CAAgBnE,GAAcjV,GAAIgD,GAErDrE,EAAS8H,QACXlE,GAASmE,QAAQ,oCAEb6O,UACIA,MAGRhT,GAASxD,MAAMJ,EAASgI,SAAW,8BAEvC,CAAE,MAAO5H,GACPwD,GAASxD,MAAM,+BAAiCA,EAAM4H,QACxD,CAAC,QACC2O,IAAkB,GAClBE,QAA2B3S,EAC7B,GAEFvH,eAAgBA,EAChB6D,kBAAmB,EAAc,OAAb8V,SAAa,IAAbA,QAAa,EAAbA,GAAelF,kBAAmB,OAIxDrU,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CACLR,KAAMwZ,EACNvZ,QAASA,KACPwZ,GAAuB,GACvBI,EAAsB,KAAK,EAE7BlZ,WAAY,CACVC,MAAO,CACLC,gBAAiB,UACjBC,MAAO,YAETC,SAAA,EAEFC,EAAAA,EAAAA,KAACC,EAAAA,EAAW,CAAAF,SACsB,aAAb,OAAlB6Y,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBsB,QACjB,yBACA,+BAGNla,EAAAA,EAAAA,KAACiB,EAAAA,EAAa,CAAAlB,UACZC,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAAAP,SACuB,aAAb,OAAlB6Y,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBsB,QACjB,0DACA,6DAIR3a,EAAAA,EAAAA,MAACsC,EAAAA,EAAa,CAAClB,GAAI,CAAEmB,QAAS,GAAI/B,SAAA,EAChCC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CACLtB,QAASA,KACPgY,GAAuB,GACvBI,EAAsB,KAAK,EAE7BtY,QAAQ,YACRT,MAAM,QAAOC,SACd,YAGDC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CACLtB,QApdwB2B,UAChC,GAAKwW,EAEL,IACEN,EAAoBM,EAAmB3U,WACvC,MAAMzB,QHhvCLJ,eAA4ByE,GACjC,IACE,MAAMvE,QAAgBC,EAAAA,EAAAA,KAChBC,QAAiBC,MAAM,GAAGP,uBAA4B,CAC1DQ,OAAQ,MACRJ,QAAS,IACJA,EACH,eAAgB,oBAElB4H,KAAMC,KAAKC,UAAUvD,KAIvB,aADmBrE,EAASG,MAE9B,CAAE,MAAOC,GAEP,MADAC,QAAQC,IAAI,gCAAiCF,GACvC,IAAIG,MAAM,iCAClB,CACF,CG8tC6Bma,CAAa,CAClCjT,QAAS2O,EAAmB3O,QAC5BhG,UAAyC,YAA9B2U,EAAmBsB,OAAuBtB,EAAmB3U,UAAY,KAGlFzB,EAAS8H,QACXlE,GAASmE,QACuB,YAA9BqO,EAAmBsB,OACf,wCACA,4CAENV,MAEApT,GAASxD,MAAMJ,EAASgI,SAAW,kCAEvC,CAAE,MAAO5H,GACPwD,GAASxD,MAAM,kCAAoCA,EAAM4H,QAC3D,CAAC,QACC8N,EAAoB,MACpBG,GAAuB,GACvBI,EAAsB,KACxB,GA2bQtY,QAAQ,YACRT,MAAM,UAASC,SAChB,mBAOLR,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CACLR,KAAM0Z,EACNzZ,QAASA,KACP0Z,GAAuB,GACvBY,GAAiB,KAAK,EAExB5Z,WAAY,CACVC,MAAO,CACLC,gBAAiB,UACjBC,MAAO,YAETC,SAAA,EAEFC,EAAAA,EAAAA,KAACC,EAAAA,EAAW,CAAAF,SAAC,kBACbC,EAAAA,EAAAA,KAACiB,EAAAA,EAAa,CAAAlB,UACZC,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAAAP,SAAC,mDAIdR,EAAAA,EAAAA,MAACsC,EAAAA,EAAa,CAAClB,GAAI,CAAEmB,QAAS,GAAI/B,SAAA,EAChCC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CACLtB,QAASA,KACPkY,GAAuB,GACvBY,GAAiB,KAAK,EAExBhZ,QAAQ,YACRT,MAAM,QAAOC,SACd,YAGDC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CACLtB,QA3kBkB2B,UAC1B,GAAKkX,GAEL,IACEnB,GAAgB,GAChB,MAAM3V,QHtrCLJ,eAA2B6H,GAChC,IACE,MAAM3H,QAAgBC,EAAAA,EAAAA,KAChBC,QAAiBC,MAAM,GAAGP,sBAA2B,CACzDQ,OAAQ,SACRJ,QAAS,IACJA,EACH,eAAgB,oBAElB4H,KAAMC,KAAKC,UAAU,CAAEH,cAIzB,aADmBzH,EAASG,MAE9B,CAAE,MAAOC,GAEP,MADAC,QAAQC,IAAI,wBAAyBF,GAC/B,IAAIG,MAAM,yBAClB,CACF,CGoqC6Boa,CAAY7D,IAE/B9W,EAAS8H,QACXlE,GAASmE,QAAQ,8BACjBiP,MAEApT,GAASxD,MAAMJ,EAASgI,SAAW,yBAEvC,CAAE,MAAO5H,GACPwD,GAASxD,MAAM,yBAA2BA,EAAM4H,QAClD,CAAC,QACC2N,GAAgB,GAChBQ,GAAuB,GACvBY,GAAiB,KACnB,GAyjBQhZ,QAAQ,YACRT,MAAM,UACN8E,SAAUsT,EAAanY,SAEtBmY,GAAelY,EAAAA,EAAAA,KAAC8I,EAAAA,EAAgB,CAACpI,KAAM,KAAS,mBAIxC,C,0MC/3DrB,MAAM0c,EAAkCre,IAAuB,IAAtB,MAAEsC,EAAK,MAAEC,GAAOvC,EACvD,MAAM+E,GAAQuZ,EAAAA,EAAAA,KACd,OACE9d,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACS,GAAI,CAAE0b,UAAW,UAAWtc,SAAA,EAC/BC,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,QAAQI,GAAI,CAC9Bb,MAA8B,SAAvBgE,EAAMC,QAAQC,KAAkB,UAAY,WACnDjE,SACCsB,KAEHrB,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,KAAKI,GAAI,CAC3Bb,MAA8B,SAAvBgE,EAAMC,QAAQC,KAAkB,QAAU,UACjDkF,GAAI,GACJnJ,SACCuB,MAEC,EA2LV,EAxJ8C+O,IAYvC,IAADiN,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,IAZyC,KAC7C5c,EAAI,OACJiS,EAAM,UACNC,EAAS,MACT9F,EAAK,gBACLtC,EAAe,UACfwI,EAAS,SACTE,EAAQ,OACRC,EAAM,iBACNoK,EAAgB,WAChBlK,GAAa,EAAK,sBAClBC,GAAwB,GACzBtD,EACC,MAAMvM,GAAQuZ,EAAAA,EAAAA,KAEd,OACE9d,EAAAA,EAAAA,MAACgc,EAAAA,EAAI,CACH5a,GAAI,CACFd,gBAAwC,SAAvBiE,EAAMC,QAAQC,KAAkB,UAAY,UAC7DoN,aAAc,EACdD,EAAG,EACHE,UAAkC,SAAvBvN,EAAMC,QAAQC,KACrB,oCACA,qCACJjE,SAAA,EAEFC,EAAAA,EAAAA,KAACE,EAAAA,EAAG,CAACS,GAAI,CAAER,QAAS,OAAQC,WAAY,SAAU8Q,GAAI,GAAInR,UACxDR,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACS,GAAI,CAAER,QAAS,OAAQC,WAAY,SAAU0T,KAAM,GAAI/T,SAAA,EAC1DC,EAAAA,EAAAA,KAACE,EAAAA,EAAG,CACFS,GAAI,CACFkd,MAAO,EACPpG,OAAQ,EACRrG,aAAc,MACdvR,gBAAiBoT,EAAY,UAAY,UACzC+I,GAAI,MAGRhc,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,YAAYI,GAAI,CAClCb,MAA8B,SAAvBgE,EAAMC,QAAQC,KAAkB,UAAY,UACnD8P,KAAM,GACN/T,SACCgB,KAEHxB,EAAAA,EAAAA,MAACe,EAAAA,EAAU,CAACC,QAAQ,YAAYI,GAAI,CAClCb,MAA8B,SAAvBgE,EAAMC,QAAQC,KAAkB,QAAU,UACjDkO,GAAI,GACJnS,SAAA,CAAC,UACOoN,EAAM6F,gBAKpBzT,EAAAA,EAAAA,MAACW,EAAAA,EAAG,CAACS,GAAI,CAAER,QAAS,OAAQC,WAAY,SAAU8Q,GAAI,GAAInR,SAAA,EACxDC,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACK,GAAI,CACdb,MAA8B,SAAvBgE,EAAMC,QAAQC,KAAkB,UAAY,UACnDgY,GAAI,GACJjc,SAAC,YAGF2T,GACC1T,EAAAA,EAAAA,KAAC8I,EAAAA,EAAgB,CAACpI,KAAM,GAAIC,GAAI,CAAEb,MAAOmT,EAAY,UAAY,cAEjEjT,EAAAA,EAAAA,KAAC2R,EAAAA,EAAM,CACLC,QAASqB,EACT1R,SAAUsJ,EACVlK,GAAI,CACF,qBAAsB,CACpBd,gBAAiBoT,EAAY,UAAY,WAE3C,qBAAsB,CACpBpT,gBAAiBoT,EAAY,qBAAuB,0BAK5DjT,EAAAA,EAAAA,KAACE,EAAAA,EAAG,CAACS,GAAI,CAAEmT,KAAM,KAChBH,GAAwBpU,EAAAA,EAAAA,MAACue,EAAAA,EAAK,CAAC7M,UAAU,MAAMhI,QAAS,EAAElJ,SAAA,EACzDC,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CACTE,KAAK,QACLC,GAAI,CACFd,gBAAiB,UACjB,UAAW,CAAEA,gBAAiB,YAEhCY,QAASmd,EAAiB7d,UAE1BC,EAAAA,EAAAA,KAAC+d,EAAAA,EAAQ,CAACxM,SAAS,QAAQ5Q,GAAI,CAAEb,MAAO,cAE1CE,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CACTE,KAAK,QACLC,GAAI,CACFd,gBAAiB,UACjB,UAAW,CAAEA,gBAAiB,YAEhCY,QAAS8S,EAASxT,UAElBC,EAAAA,EAAAA,KAAC2b,EAAAA,EAAU,CAACpK,SAAS,QAAQ5Q,GAAI,CAAEb,MAAO,cAE5CE,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CACTE,KAAK,QACLC,GAAI,CACFd,gBAAiB,UACjB,UAAW,CAAEA,gBAAiB,YAEhCY,QAAS4S,EAAUtT,UAEnBC,EAAAA,EAAAA,KAACge,EAAAA,EAAW,CAACzM,SAAS,QAAQ5Q,GAAI,CAAEb,MAAO,cAE7CE,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CACTE,KAAK,QACLC,GAAI,CACFd,gBAAiB,UACjB,UAAW,CAAEA,gBAAiB,YAEhCY,QAAS+S,EAAOzT,UAEhBC,EAAAA,EAAAA,KAACyb,EAAAA,EAAc,CAAClK,SAAS,QAAQ5Q,GAAI,CAAEb,MAAO,iBAEvCE,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,KAAKI,GAAI,CAAEb,MAAO,UAC3C0R,WAAY,KACZzR,SAAC,wBAGTR,EAAAA,EAAAA,MAACwJ,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAElJ,SAAA,EACzBC,EAAAA,EAAAA,KAAC+I,EAAAA,GAAI,CAACR,MAAI,EAACY,GAAI,EAAEpJ,UACfC,EAAAA,EAAAA,KAACod,EAAO,CAAC/b,MAAM,WAAWC,MAAO6L,EAAM8Q,SAAW,OAEpDje,EAAAA,EAAAA,KAAC+I,EAAAA,GAAI,CAACR,MAAI,EAACY,GAAI,EAAEpJ,UACfC,EAAAA,EAAAA,KAACod,EAAO,CAAC/b,MAAM,MAAMC,MAAO6L,EAAM8E,KAAO,OAE3CjS,EAAAA,EAAAA,KAAC+I,EAAAA,GAAI,CAACR,MAAI,EAACY,GAAI,EAAEpJ,UACfC,EAAAA,EAAAA,KAACod,EAAO,CAAC/b,MAAM,MAAMC,OAAY,OAAL6L,QAAK,IAALA,GAAe,QAAVmQ,EAALnQ,EAAOM,gBAAQ,IAAA6P,OAAV,EAALA,EAAiB7W,SAAU,OAEzDzG,EAAAA,EAAAA,KAAC+I,EAAAA,GAAI,CAACR,MAAI,EAACY,GAAI,EAAEpJ,UACfC,EAAAA,EAAAA,KAACod,EAAO,CAAC/b,MAAM,SAASC,OAAY,OAAL6L,QAAK,IAALA,GAAa,QAARoQ,EAALpQ,EAAOf,cAAM,IAAAmR,OAAR,EAALA,EAAeW,QAAS,OAEzDle,EAAAA,EAAAA,KAAC+I,EAAAA,GAAI,CAACR,MAAI,EAACY,GAAI,EAAEpJ,UACfC,EAAAA,EAAAA,KAACod,EAAO,CAAC/b,MAAM,UAAUC,OAAY,OAAL6L,QAAK,IAALA,GAAa,QAARqQ,EAALrQ,EAAOf,cAAM,IAAAoR,OAAR,EAALA,EAAelB,UAAW,OAE5Dtc,EAAAA,EAAAA,KAAC+I,EAAAA,GAAI,CAACR,MAAI,EAACY,GAAI,EAAEpJ,UACfC,EAAAA,EAAAA,KAACod,EAAO,CAAC/b,MAAM,WAAWC,OAAY,OAAL6L,QAAK,IAALA,GAAa,QAARsQ,EAALtQ,EAAOf,cAAM,IAAAqR,OAAR,EAALA,EAAeU,WAAY,OAE9Dne,EAAAA,EAAAA,KAAC+I,EAAAA,GAAI,CAACR,MAAI,EAACY,GAAI,EAAEpJ,UACfC,EAAAA,EAAAA,KAACod,EAAO,CAAC/b,MAAM,SAASC,OAAY,OAAL6L,QAAK,IAALA,GAAa,QAARuQ,EAALvQ,EAAOf,cAAM,IAAAsR,OAAR,EAALA,EAAelB,WAAY,OAE5Dxc,EAAAA,EAAAA,KAAC+I,EAAAA,GAAI,CAACR,MAAI,EAACY,GAAI,EAAEpJ,UACfC,EAAAA,EAAAA,KAACod,EAAO,CAAC/b,MAAM,SAASC,OAAY,OAAL6L,QAAK,IAALA,GAAa,QAARwQ,EAALxQ,EAAOf,cAAM,IAAAuR,OAAR,EAALA,EAAelB,YAAa,WAG1D,C","sources":["accountManager/components/CreateGroup.tsx","accountManager/hooks/groupManagementService.ts","accountManager/components/AddChildAccount.tsx","accountManager/components/CreateOrder.tsx","accountManager/pages/groupManager.tsx","accountManager/components/BrokerCard.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Button,\n  Box,\n  Typography,\n  IconButton,\n} from '@mui/material';\nimport CloseIcon from '@mui/icons-material/Close';\n\ninterface BrokerAccount {\n  id: string;\n  name: string;\n}\n\ninterface CreateGroupProps {\n  open: boolean;\n  onClose: () => void;\n  onSubmit: (data: { name: string; members: string[] }) => void;\n  brokerAccounts: BrokerAccount[];\n}\n\nconst CreateGroup: React.FC<CreateGroupProps> = ({ open, onClose, onSubmit, brokerAccounts }) => {\n  const [groupName, setGroupName] = useState('');\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    onSubmit({\n      name: groupName,\n      members: [], // Empty array for members as we're only asking for the group name\n    });\n    setGroupName('');\n  };\n\n  return (\n    <Dialog \n      open={open} \n      onClose={onClose}\n      maxWidth=\"sm\"\n      fullWidth\n      PaperProps={{\n        style: {\n          backgroundColor: '#1E1E1E',\n          color: '#FFFFFF',\n        },\n      }}\n    >\n      <DialogTitle>\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n          <Typography variant=\"h6\">Create New Group</Typography>\n          <IconButton onClick={onClose} size=\"small\" sx={{ color: 'white' }}>\n            <CloseIcon />\n          </IconButton>\n        </Box>\n      </DialogTitle>\n      <form onSubmit={handleSubmit}>\n        <DialogContent>\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n            <TextField\n              label=\"Group Name\"\n              value={groupName}\n              onChange={(e) => setGroupName(e.target.value)}\n              fullWidth\n              required\n              sx={{\n                input: { color: 'white' },\n                label: { color: 'grey.500' },\n                '& .MuiOutlinedInput-root': {\n                  backgroundColor: '#2D2D2D',\n                  '& fieldset': {\n                    borderColor: 'rgba(255, 255, 255, 0.23)',\n                  },\n                },\n              }}\n            />\n          </Box>\n        </DialogContent>\n        <DialogActions sx={{ padding: 3 }}>\n          <Button \n            onClick={onClose}\n            variant=\"contained\"\n            color=\"error\"\n            sx={{ textTransform: 'none' }}\n          >\n            Cancel\n          </Button>\n          <Button \n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            sx={{ textTransform: 'none' }}\n          >\n            Create Group\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default CreateGroup; ","import { getBaseUrl } from \"../../http/globalUrl\";\r\nimport { getRequiredHeaders } from \"../../services/userService\";\r\n\r\nconst BASE_URL = getBaseUrl();\r\nconst GET_GROUPS = 'groups/getGroups';\r\nconst CREATE_GROUP = 'groups/createGroup';\r\nconst UPDATE_GROUP = 'groups/updateGroup';\r\nconst DELETE_GROUP = 'groups/deleteGroup';\r\nconst TOGGLE_MASTER = 'groups/toggleMaster';\r\nconst TOGGLE_TRADING = 'groups/toggleTrading';\r\nconst ADD_CHILD = 'groups/addChild';\r\nconst REMOVE_CHILD = 'groups/removeChild';\r\nconst GET_GROUP_CHILDREN = 'groups/getChildren';\r\nconst SQUARE_OFF_ALL_BY_GROUP = 'groups/squareOffAll';\r\nconst POST_PLACE_MANNUAL_ORDER = 'orders/placeMannualOrder';\r\nexport interface Group {\r\n  id: string;\r\n  name: string;\r\n  members: string[];\r\n  masterAccountId?: string;\r\n  isTradeEnabled: boolean;\r\n  stats?: {\r\n    orders: number;\r\n    qty: number;\r\n    child: number;\r\n    totalChild: number;\r\n    pending: number;\r\n    completed: number;\r\n    rejected: number;\r\n    cancelled: number;\r\n    failed: number;\r\n  };\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface CreateGroupRequest {\r\n  name: string;\r\n  members?: string[];\r\n}\r\n\r\nexport interface UpdateGroupRequest {\r\n  groupId: string;\r\n  name?: string;\r\n  members?: string[];\r\n}\r\n\r\nexport interface ToggleMasterRequest {\r\n  groupId: string;\r\n  accountId: string;\r\n}\r\n\r\nexport interface ToggleTradingRequest {\r\n  groupId: string;\r\n  isTrading: boolean;\r\n}\r\n\r\nexport interface ChildAccount {\r\n  accountId: string;\r\n  multiplier: number;\r\n  fixLot: boolean;\r\n}\r\n\r\nexport interface GroupChild {\r\n  id: string;\r\n  accountId: string;\r\n  multiplier: number;\r\n  fixLot: boolean;\r\n  name: string;\r\n  status: 'active' | 'inactive';\r\n  stats: {\r\n    inGroup: number;\r\n    pnl: number;\r\n    margin: number;\r\n    pos: number;\r\n    position?: any;\r\n    orders?: {\r\n      orders?: any;\r\n      total?: number;\r\n      cancelled?: number;\r\n      complete?: number;\r\n      pending?: number;\r\n      rejected?: number;\r\n    };\r\n    trades?: any;\r\n  };\r\n}\r\n\r\nexport async function getGroups() {\r\n  try {\r\n    const headers = await getRequiredHeaders();\r\n    const response = await fetch(`${BASE_URL}${GET_GROUPS}`, {\r\n      method: 'GET',\r\n      headers: headers\r\n    });\r\n\r\n    const json = await response.json();\r\n    return json;\r\n  } catch (error) {\r\n    console.log('Error fetching groups:', error);\r\n    throw new Error('Failed to fetch groups');\r\n  }\r\n}\r\n\r\nexport async function createGroup(groupData: CreateGroupRequest) {\r\n  try {\r\n    const headers = await getRequiredHeaders();\r\n    const response = await fetch(`${BASE_URL}${CREATE_GROUP}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        ...headers,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(groupData)\r\n    });\r\n\r\n    const json = await response.json();\r\n    return json;\r\n  } catch (error) {\r\n    console.log('Error creating group:', error);\r\n    throw new Error('Failed to create group');\r\n  }\r\n}\r\n\r\nexport async function updateGroup(groupData: UpdateGroupRequest) {\r\n  try {\r\n    const headers = await getRequiredHeaders();\r\n    const response = await fetch(`${BASE_URL}${UPDATE_GROUP}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        ...headers,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(groupData)\r\n    });\r\n\r\n    const json = await response.json();\r\n    return json;\r\n  } catch (error) {\r\n    console.log('Error updating group:', error);\r\n    throw new Error('Failed to update group');\r\n  }\r\n}\r\n\r\nexport async function deleteGroup(groupId: string) {\r\n  try {\r\n    const headers = await getRequiredHeaders();\r\n    const response = await fetch(`${BASE_URL}${DELETE_GROUP}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        ...headers,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ groupId })\r\n    });\r\n\r\n    const json = await response.json();\r\n    return json;\r\n  } catch (error) {\r\n    console.log('Error deleting group:', error);\r\n    throw new Error('Failed to delete group');\r\n  }\r\n}\r\n\r\nexport async function toggleMaster(data: ToggleMasterRequest) {\r\n  try {\r\n    const headers = await getRequiredHeaders();\r\n    const response = await fetch(`${BASE_URL}${TOGGLE_MASTER}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        ...headers,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data)\r\n    });\r\n\r\n    const json = await response.json();\r\n    return json;\r\n  } catch (error) {\r\n    console.log('Error toggling master status:', error);\r\n    throw new Error('Failed to toggle master status');\r\n  }\r\n}\r\n\r\nexport async function toggleTrading(data: ToggleTradingRequest) {\r\n  try {\r\n    const headers = await getRequiredHeaders();\r\n    const response = await fetch(`${BASE_URL}${TOGGLE_TRADING}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        ...headers,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data)\r\n    });\r\n\r\n    const json = await response.json();\r\n    return json;\r\n  } catch (error) {\r\n    console.log('Error toggling trading status:', error);\r\n    throw new Error('Failed to toggle trading status');\r\n  }\r\n}\r\n\r\nexport async function addChildToGroup(groupId: string, childData: ChildAccount) {\r\n  try {\r\n    const headers = await getRequiredHeaders();\r\n    const response = await fetch(`${BASE_URL}${ADD_CHILD}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        ...headers,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ groupId, ...childData })\r\n    });\r\n\r\n    const json = await response.json();\r\n    return json;\r\n  } catch (error) {\r\n    console.log('Error adding child to group:', error);\r\n    throw new Error('Failed to add child to group');\r\n  }\r\n}\r\n\r\nexport async function removeChildFromGroup(groupId: string, accountId: string) {\r\n  try {\r\n    const headers = await getRequiredHeaders();\r\n    const response = await fetch(`${BASE_URL}${REMOVE_CHILD}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        ...headers,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ groupId, accountId })\r\n    });\r\n\r\n    const json = await response.json();\r\n    return json;\r\n  } catch (error) {\r\n    console.log('Error removing child from group:', error);\r\n    throw new Error('Failed to remove child from group');\r\n  }\r\n}\r\n\r\nexport async function getGroupChildren(groupId: string) {\r\n  try {\r\n    const headers = await getRequiredHeaders();\r\n    const response = await fetch(`${BASE_URL}${GET_GROUP_CHILDREN}/${groupId}`, {\r\n      method: 'GET',\r\n      headers: headers\r\n    });\r\n\r\n    const json = await response.json();\r\n    return json;\r\n  } catch (error) {\r\n    console.log('Error fetching group children:', error);\r\n    throw new Error('Failed to fetch group children');\r\n  }\r\n} \r\n\r\nexport async function squareOffAllByGroup(groupId: string) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}${SQUARE_OFF_ALL_BY_GROUP}/${groupId}`, {\r\n      method: 'POST',\r\n      headers: await getRequiredHeaders(),\r\n    });\r\n\r\n    const json = await response.json();\r\n    return json;\r\n  } catch (error) {\r\n    console.log('Error square off all by group:', error);\r\n    throw new Error('Failed to square off all by group');\r\n  }\r\n}\r\n\r\nexport async function placeMannulOrder(orderDetails: any){\r\n  try {\r\n    const response = await fetch(`${BASE_URL}${POST_PLACE_MANNUAL_ORDER}`, {\r\n      method: 'POST',\r\n      headers: await getRequiredHeaders(),\r\n      body: JSON.stringify(orderDetails)\r\n    });\r\n\r\n    const json = await response.json();\r\n    return json;\r\n  } catch (error) {\r\n    throw new Error('Failed to place mannual order: '+ error);\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  Button,\r\n  Box,\r\n  Typography,\r\n  IconButton,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n} from '@mui/material';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport { BrokerAccount } from '../types';\r\n\r\ninterface AddChildAccountProps {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onSubmit: (data: { accountId: string; multiplier: number; fixLot: boolean }) => void;\r\n  brokerAccounts: BrokerAccount[];\r\n  excludeAccountIds?: string[];\r\n}\r\n\r\nconst AddChildAccount: React.FC<AddChildAccountProps> = ({\r\n  open,\r\n  onClose,\r\n  onSubmit,\r\n  brokerAccounts,\r\n  excludeAccountIds = [],\r\n}) => {\r\n  const [selectedAccount, setSelectedAccount] = useState('');\r\n  const [multiplier, setMultiplier] = useState('1');\r\n  const [fixLot, setFixLot] = useState(false);\r\n\r\n  // Reset form values when dialog opens/closes\r\n  useEffect(() => {\r\n    if (!open) {\r\n      setSelectedAccount('');\r\n      setMultiplier('1');\r\n      setFixLot(false);\r\n    }\r\n  }, [open]);\r\n\r\n  const handleClose = () => {\r\n    setSelectedAccount('');\r\n    setMultiplier('1');\r\n    setFixLot(false);\r\n    onClose();\r\n  };\r\n\r\n  const handleSubmit = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    onSubmit({\r\n      accountId: selectedAccount,\r\n      multiplier: parseFloat(multiplier),\r\n      fixLot,\r\n    });\r\n    handleClose();\r\n  };\r\n\r\n  const availableAccounts = brokerAccounts.filter(\r\n    account => !excludeAccountIds.includes(account.id)\r\n  );\r\n\r\n  return (\r\n    <Dialog \r\n      open={open} \r\n      onClose={handleClose}\r\n      maxWidth=\"sm\"\r\n      fullWidth\r\n      PaperProps={{\r\n        sx: {\r\n          backgroundColor: theme => theme.palette.mode === 'dark' ? '#1E1E1E' : '#FFFFFF',\r\n          color: theme => theme.palette.mode === 'dark' ? '#FFFFFF' : '#1E293B',\r\n        },\r\n      }}\r\n    >\r\n      <DialogTitle>\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n          <Typography variant=\"h6\" sx={{ \r\n            color: theme => theme.palette.mode === 'dark' ? '#FFFFFF' : '#1E293B'\r\n          }}>\r\n            Add Child Account\r\n          </Typography>\r\n          <IconButton \r\n            onClick={handleClose} \r\n            size=\"small\" \r\n            sx={{ \r\n              color: theme => theme.palette.mode === 'dark' ? 'white' : '#64748B'\r\n            }}\r\n          >\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </Box>\r\n      </DialogTitle>\r\n      \r\n      <DialogContent>\r\n        <form onSubmit={handleSubmit}>\r\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n            <FormControl fullWidth>\r\n              <InputLabel id=\"select-child-label\" sx={{ \r\n                color: theme => theme.palette.mode === 'dark' ? 'grey.500' : '#64748B'\r\n              }}>\r\n                Select Child\r\n              </InputLabel>\r\n              <Select\r\n                labelId=\"select-child-label\"\r\n                value={selectedAccount}\r\n                onChange={(e) => setSelectedAccount(e.target.value)}\r\n                required\r\n                sx={{\r\n                  color: theme => theme.palette.mode === 'dark' ? 'white' : '#1E293B',\r\n                  backgroundColor: theme => theme.palette.mode === 'dark' ? '#2D2D2D' : '#F8FAFC',\r\n                  '& .MuiOutlinedInput-notchedOutline': {\r\n                    borderColor: theme => theme.palette.mode === 'dark'\r\n                      ? 'rgba(255, 255, 255, 0.23)'\r\n                      : 'rgba(0, 0, 0, 0.23)',\r\n                  },\r\n                  '&:hover .MuiOutlinedInput-notchedOutline': {\r\n                    borderColor: theme => theme.palette.mode === 'dark'\r\n                      ? 'rgba(255, 255, 255, 0.4)'\r\n                      : 'rgba(0, 0, 0, 0.4)',\r\n                  },\r\n                  '& .MuiSelect-icon': {\r\n                    color: theme => theme.palette.mode === 'dark' ? 'white' : '#64748B',\r\n                  },\r\n                }}\r\n              >\r\n                {availableAccounts.map((account) => (\r\n                  <MenuItem key={account.id} value={account.id}>\r\n                    {account.name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            \r\n            <TextField\r\n              label=\"Multiplier\"\r\n              type=\"number\"\r\n              value={multiplier}\r\n              onChange={(e) => setMultiplier(e.target.value)}\r\n              fullWidth\r\n              required\r\n              inputProps={{ min: \"0.1\", step: \"0.1\" }}\r\n              sx={{\r\n                input: { \r\n                  color: theme => theme.palette.mode === 'dark' ? 'white' : '#1E293B'\r\n                },\r\n                label: { \r\n                  color: theme => theme.palette.mode === 'dark' ? 'grey.500' : '#64748B'\r\n                },\r\n                '& .MuiOutlinedInput-root': {\r\n                  backgroundColor: theme => theme.palette.mode === 'dark' ? '#2D2D2D' : '#F8FAFC',\r\n                  '& fieldset': {\r\n                    borderColor: theme => theme.palette.mode === 'dark'\r\n                      ? 'rgba(255, 255, 255, 0.23)'\r\n                      : 'rgba(0, 0, 0, 0.23)',\r\n                  },\r\n                  '&:hover fieldset': {\r\n                    borderColor: theme => theme.palette.mode === 'dark'\r\n                      ? 'rgba(255, 255, 255, 0.4)'\r\n                      : 'rgba(0, 0, 0, 0.4)',\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n\r\n            <Button\r\n              variant=\"contained\"\r\n              color={fixLot ? \"primary\" : \"inherit\"}\r\n              onClick={() => setFixLot(!fixLot)}\r\n              type=\"button\"\r\n              sx={{\r\n                backgroundColor: theme => {\r\n                  if (fixLot) return undefined;\r\n                  return theme.palette.mode === 'dark' ? '#2D2D2D' : '#F1F5F9';\r\n                },\r\n                color: theme => {\r\n                  if (fixLot) return 'white';\r\n                  return theme.palette.mode === 'dark' ? 'white' : '#1E293B';\r\n                },\r\n                '&:hover': {\r\n                  backgroundColor: theme => {\r\n                    if (fixLot) return undefined;\r\n                    return theme.palette.mode === 'dark' ? '#374151' : '#E2E8F0';\r\n                  },\r\n                },\r\n              }}\r\n            >\r\n              Fix Lot\r\n            </Button>\r\n          </Box>\r\n          <DialogActions sx={{ padding: 3 }}>\r\n            <Button \r\n              onClick={handleClose}\r\n              variant=\"contained\"\r\n              color=\"error\"\r\n              type=\"button\"\r\n              sx={{ textTransform: 'none' }}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button \r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              disabled={!selectedAccount}\r\n              sx={{ textTransform: 'none' }}\r\n            >\r\n              Add\r\n            </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default AddChildAccount; ","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  Grid,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n  FormControl,\r\n  Button,\r\n  ToggleButtonGroup,\r\n  ToggleButton,\r\n  DialogActions,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\nimport { getScriptData } from \"../hooks/accountManagementService\";\r\nimport { useSnackbar } from \"../../core/contexts/SnackbarProvider\";\r\nimport { number } from \"yup\";\r\nimport { placeMannulOrder } from \"../hooks/groupManagementService\";\r\n\r\nconst CreateOrder = ({group, open, onClose }: {group: any; open: boolean; onClose: () => void; }) => {\r\n\r\n  const [indexType, setIndexType] = useState(\"NIFTY\");\r\n  const [scriptType, setScriptType] = useState(\"\");\r\n  const [script, setScript] = useState(\"\");\r\n  const [product, setProduct] = useState(\"INTRADAY\");\r\n  const [quantity, setQuantity] = useState(75);\r\n  const [orderType, setOrderType] = useState('Market');\r\n  const [limitPrice, setLimitPrice] = useState<number>(0);\r\n  const [triggerPrice, setTriggerPrice] = useState<number>(0);\r\n  const [orderAction, setOrderAction] = useState(\"BUY\");\r\n  const [scriptList, setScriptList] = useState([]);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const snackbar = useSnackbar();\r\n\r\n    const fetchScriptList = async (index = '') =>{\r\n        setIsLoading(true);\r\n        const result = await getScriptData(index || indexType);\r\n        if(!result || !result.data || !result.data.optionsData){\r\n            snackbar.error('No Stikeprice Found!');\r\n            setIsLoading(false);\r\n            setIndexType('NIFTY');\r\n            onClose();\r\n            return;\r\n        }\r\n        const formattedList = formatStikeList(result.data.optionsData);\r\n        setScriptList(formattedList);\r\n        setIsLoading(false);\r\n    };\r\n\r\n    useEffect(() =>{\r\n        open && fetchScriptList();\r\n    },[open]);\r\n\r\n\r\n    function formatDate(dateStr: string) {\r\n        const months:any = {\r\n            Jan: \"JAN\", Feb: \"FEB\", Mar: \"MAR\", Apr: \"APR\",\r\n            May: \"MAY\", Jun: \"JUN\", Jul: \"JUL\", Aug: \"AUG\",\r\n            Sep: \"SEP\", Oct: \"OCT\", Nov: \"NOV\", Dec: \"DEC\"\r\n        };\r\n\r\n        const [day, monthStr, year] = dateStr.split(\"-\");\r\n        const shortYear = year.slice(-2); // Get last 2 digits of year\r\n        const month = months[monthStr];\r\n\r\n        return `${day}${month}${shortYear}`;\r\n    }\r\n\r\n\r\n    const formatStikeList = (stikePriceData: any) =>{\r\n        const result:any = [];\r\n        stikePriceData.forEach((item:any) => {\r\n        const strike = item.strikePrice;\r\n\r\n        if (item.CE) {\r\n            const expiryDate = formatDate(item.CE.expiryDate);\r\n            result.push(`NIFTY${expiryDate}${strike}CE`);\r\n        }\r\n\r\n        if (item.PE) {\r\n            const expiryDate = formatDate(item.PE.expiryDate);\r\n            result.push(`NIFTY${expiryDate}${strike}PE`);\r\n        }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    const handleIndexTypeChange = (e: any) =>{\r\n        const value = e.target.value;\r\n        setScriptType('');\r\n        setScript('');\r\n        setIndexType(value);\r\n        fetchScriptList(value);\r\n    }\r\n\r\n    const handleScriptTypeChange = (e: any) =>{\r\n        const value = e.target.value;\r\n        setScript('');\r\n        setScriptType(value);\r\n\r\n    }\r\n\r\n    const handleOrderTypeChange = (e:any) =>{\r\n      const value = e.target.value;\r\n      setOrderType(value);\r\n    }\r\n\r\n\r\n  const handlePlaceOrder = async () => {\r\n    \r\n    if(!script){\r\n        snackbar.warning('Please select script!');\r\n        return;\r\n    }\r\n\r\n    if(orderType.toUpperCase() === 'LIMIT' || orderType.toUpperCase() === 'SL'){\r\n        if(!limitPrice || limitPrice <= 0){\r\n          snackbar.warning('Please enter limit price!');\r\n          return;\r\n        }\r\n    }\r\n    if(orderType.toUpperCase() === 'SL'){\r\n        if(!triggerPrice || triggerPrice <= 0){\r\n          snackbar.warning('Please enter trigger price!');\r\n          return;\r\n        }\r\n    }\r\n\r\n    const orderDetails:any = {\r\n      index: indexType,\r\n      scriptType,\r\n      script,\r\n      product,\r\n      quantity,\r\n      orderType,\r\n      orderAction,\r\n      groupId: group.id\r\n    };\r\n    if(orderType.toUpperCase() === 'LIMIT' || orderType.toUpperCase() === 'SL'){\r\n      orderDetails.limitPrice = limitPrice;\r\n    }\r\n    if(orderType.toUpperCase() === 'SL'){\r\n      orderDetails.triggerPrice = triggerPrice;\r\n    }\r\n    try {\r\n        const result = await placeMannulOrder(orderDetails);\r\n        if(result.status){\r\n            snackbar.success('Order placed!');\r\n        }else{\r\n            snackbar.error('Order not placed: '+ result.message);\r\n        }\r\n    } catch (error) {\r\n        snackbar.error('Error occured: '+error);\r\n    }\r\n    onClose();\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <Dialog open={open} onClose={onClose} fullWidth maxWidth=\"md\">\r\n      <DialogTitle>Place Order</DialogTitle>\r\n      <DialogContent>\r\n        {isLoading ? \r\n        <CircularProgress/> : \r\n        <Grid container spacing={2} sx={{ mt: 1 }}>\r\n          <Grid item xs={12} sm={4}>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Index</InputLabel>\r\n              <Select\r\n                value={indexType}\r\n                label=\"Index\"\r\n                onChange={handleIndexTypeChange}\r\n              >\r\n                <MenuItem value=\"NIFTY\">NIFTY</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Script Type</InputLabel>\r\n              <Select\r\n                value={scriptType}\r\n                label=\"Script Type\"\r\n                onChange={handleScriptTypeChange}\r\n              >\r\n                <MenuItem value=\"\">Select Script Type</MenuItem>\r\n                <MenuItem value=\"CE\">CE</MenuItem>\r\n                <MenuItem value=\"PE\">PE</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={4}>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Script</InputLabel>\r\n              <Select\r\n                value={script}\r\n                label=\"Script\"\r\n                disabled={!scriptType}\r\n                onChange={(e) => setScript(e.target.value)}\r\n              >\r\n                <MenuItem value=\"\" selected>Select Script</MenuItem>\r\n                {scriptList.filter((x:string) => x.includes(scriptType)).map((item) => (\r\n                    <MenuItem key={item} value={item}>\r\n                        {item}\r\n                    </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={4}>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Product</InputLabel>\r\n              <Select\r\n                value={product}\r\n                label=\"Product\"\r\n                onChange={(e) => setProduct(e.target.value)}\r\n              >\r\n                <MenuItem value=\"INTRADAY\">INTRADAY</MenuItem>\r\n                <MenuItem value=\"CARRYFORWARD\">CARRYFORWARD</MenuItem>\r\n                <MenuItem value=\"DELIVERY\">DELIVERY</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={4}>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Quantity</InputLabel>\r\n              <Select\r\n                value={quantity}\r\n                label=\"Quantity\"\r\n                onChange={(e) => setQuantity(Number(e.target.value))}\r\n              >\r\n                <MenuItem key={'75'} value='75'>1</MenuItem>\r\n                <MenuItem key={'150'} value=\"150\">2</MenuItem>\r\n                <MenuItem key={'225'} value=\"225\">3</MenuItem>\r\n                <MenuItem key={'300'} value=\"300\">4</MenuItem>\r\n                <MenuItem key={'375'} value=\"375\">5</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={4}>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Order Type</InputLabel>\r\n              <Select\r\n                value={orderType}\r\n                label=\"Order Type\"\r\n                onChange={(e) => setOrderType(e.target.value)}\r\n              >\r\n                <MenuItem value=\"Market\">Market</MenuItem>\r\n                <MenuItem value=\"Limit\">Limit</MenuItem>\r\n                <MenuItem value=\"SL\">SL</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          {(orderType.toUpperCase() === \"LIMIT\" || orderType.toUpperCase() === \"SL\") && <Grid item xs={12} sm={4}>\r\n            <FormControl fullWidth>\r\n              {/* <InputLabel>Limit Price</InputLabel> */}\r\n              <TextField\r\n                value={limitPrice}\r\n                label=\"Limit Price\"\r\n                type=\"Number\"\r\n                onChange={(e) => setLimitPrice(Number(e.target.value))}\r\n              />\r\n            </FormControl>\r\n          </Grid>}\r\n          {orderType.toUpperCase() === \"SL\" && <Grid item xs={12} sm={4}>\r\n            <FormControl fullWidth>\r\n              {/* <InputLabel>Trigger Price</InputLabel> */}\r\n              <TextField\r\n                value={triggerPrice}\r\n                label=\"Trigger Price\"\r\n                type=\"Number\"\r\n                onChange={(e) => setTriggerPrice(Number(e.target.value))}\r\n              />\r\n            </FormControl>\r\n          </Grid>}\r\n\r\n          <Grid item xs={12} sm={4}>\r\n           <ToggleButtonGroup\r\n                value={orderAction}\r\n                exclusive\r\n                onChange={(e, val) => val && setOrderAction(val)}\r\n                fullWidth\r\n                >\r\n                <ToggleButton\r\n                    value=\"BUY\"\r\n                    color=\"success\"\r\n                    sx={{\r\n                    '&.Mui-selected': {\r\n                        backgroundColor: 'green',\r\n                        color: 'white',\r\n                        '&:hover': {\r\n                        backgroundColor: '#006400', // dark green\r\n                        },\r\n                    },\r\n                    }}\r\n                >\r\n                    BUY\r\n                </ToggleButton>\r\n                <ToggleButton\r\n                    value=\"SELL\"\r\n                    color=\"error\"\r\n                    sx={{\r\n                    '&.Mui-selected': {\r\n                        backgroundColor: '#EF4444',\r\n                        color: 'white',\r\n                        '&:hover': {\r\n                        backgroundColor: '#8B0000', // dark red\r\n                        },\r\n                    },\r\n                    }}\r\n                >\r\n                    SELL\r\n                </ToggleButton>\r\n            </ToggleButtonGroup>\r\n\r\n          </Grid>\r\n        </Grid>\r\n        }\r\n      </DialogContent>\r\n\r\n      <DialogActions sx={{ px: 3, pb: 2 }}>\r\n        <Button variant=\"contained\" color=\"error\" onClick={onClose}>\r\n          Close\r\n        </Button>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={handlePlaceOrder}>\r\n          Place Order\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default CreateOrder;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport AdminAppBar from \"../../admin/components/AdminAppBar\";\r\nimport AdminToolbar from \"../../admin/components/AdminToolbar\";\r\nimport GroupAddIcon from '@mui/icons-material/GroupAdd';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport SyncIcon from '@mui/icons-material/Sync';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\r\nimport { \r\n  Box, \r\n  Button, \r\n  Typography, \r\n  CircularProgress, \r\n  Card, \r\n  IconButton,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  Switch,\r\n  Tooltip,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TableSortLabel,\r\n  Paper,\r\n  TextField,\r\n  InputAdornment\r\n} from \"@mui/material\";\r\nimport CreateGroup from \"../components/CreateGroup\";\r\nimport { useSnackbar } from \"../../core/contexts/SnackbarProvider\";\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport LinkIcon from '@mui/icons-material/Link';\r\nimport LinkOffIcon from '@mui/icons-material/LinkOff';\r\nimport { getGroups, createGroup, deleteGroup, Group, toggleMaster, toggleTrading, addChildToGroup, getGroupChildren, GroupChild, removeChildFromGroup, squareOffAllByGroup } from \"../hooks/groupManagementService\";\r\nimport { getDematAccounts, updateDematAccountTradeToggle, cancelOrderByOrderId, cancelAllOrdersByGroup, squareOffByUser } from \"../hooks/accountManagementService\";\r\nimport { BrokerAccount, GroupStats } from '../types';\r\nimport AddChildAccount from '../components/AddChildAccount';\r\nimport BrokerCard from '../components/BrokerCard';\r\nimport CreateOrder from \"../components/CreateOrder\";\r\n\r\n// Extended interface for local use\r\ninterface ExtendedGroup extends Group {\r\n  selectedAccountId?: string;\r\n}\r\n\r\ninterface GroupDetailsViewProps {\r\n  group: ExtendedGroup;\r\n  onBack: () => void;\r\n  onAddChild: () => void;\r\n  onToggleMaster: () => void;\r\n  onToggleTrading: () => void;\r\n  isTogglingMaster: boolean;\r\n  isTogglingTrading: boolean;\r\n  masterAccountName?: string;\r\n  setRefreshFunction: (fn: () => Promise<void>) => void;\r\n  brokerAccounts: BrokerAccount[];\r\n  setBrokerAccounts: (accounts: BrokerAccount[]) => void;\r\n}\r\n\r\nconst GroupDetailsView: React.FC<GroupDetailsViewProps> = ({\r\n  group,\r\n  onBack,\r\n  onAddChild,\r\n  onToggleMaster,\r\n  onToggleTrading,\r\n  isTogglingMaster,\r\n  isTogglingTrading,\r\n  masterAccountName,\r\n  setRefreshFunction,\r\n  brokerAccounts,\r\n  setBrokerAccounts,\r\n}) => {\r\n  const [isCreateOrderOpen, setIsCreateOrderOpen] = useState(false);\r\n  const [groupChildren, setGroupChildren] = useState<GroupChild[]>([]);\r\n  const [isLoadingChildren, setIsLoadingChildren] = useState(false);\r\n  const [togglingAccountId, setTogglingAccountId] = useState<string | null>(null);\r\n  const [tableState, setTableState] = useState<TableState>({\r\n    activeTab: 'positions',\r\n    searchQuery: '',\r\n    orderBy: '',\r\n    order: 'asc'\r\n  });\r\n  const [tableData, setTableData] = useState<TableData>({\r\n    positions: [],\r\n    orders: [],\r\n    trades: []\r\n  });\r\n  const snackbar = useSnackbar();\r\n  const navigate = useNavigate();\r\n  const ws = useRef<WebSocket | null>(null);\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n\r\n  const fetchGroupChildren = async () => {\r\n    try {\r\n      setIsLoadingChildren(true);\r\n      const response = await getGroupChildren(group.id);\r\n      \r\n      if (response.status) {\r\n        const transformedAccounts = response.dematAccounts.map((account: any) => ({\r\n          id: account.id,\r\n          name: `${account.fullName}-angelone-${account.clientId}`,\r\n          accountId: account.id,\r\n          status: account.isTradeEnable ? 'active' : 'inactive',\r\n          multiplier: account.multiplier || 1,\r\n          fixLot: account.fixLot || false,\r\n          stats: account.stats\r\n        }));\r\n        setGroupChildren(transformedAccounts);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching group children:', error.message);\r\n    } finally {\r\n      setIsLoadingChildren(false);\r\n    }\r\n  };\r\n\r\n  // Fetch group children when group changes\r\n  useEffect(() => {\r\n    fetchGroupChildren();\r\n  }, [group.id]);\r\n\r\n  // Update table data when group children change\r\n  useEffect(() => {\r\n    const positions: any[] = [];\r\n    const orders: any[] = [];\r\n    const trades: any[] = [];\r\n\r\n    groupChildren.forEach(child => {\r\n      if (child.stats?.position) {\r\n        positions.push(...Object.values(child.stats.position));\r\n      }\r\n      if (child.stats?.orders?.orders) {\r\n        orders.push(...Object.values(child.stats.orders.orders));\r\n      }\r\n      if (child.stats?.trades) {\r\n        trades.push(...Object.values(child.stats.trades));\r\n      }\r\n    });\r\n\r\n    setTableData({ positions, orders, trades });\r\n  }, [groupChildren]);\r\n\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('authkey');\r\n    if (ws.current) {\r\n      ws.current.close();\r\n    }\r\n    \r\n    ws.current = new WebSocket(`ws://localhost:8080/ws/demat?token=${token}&group=${group.id}`) as WebSocket;\r\n\r\n    if (ws.current) {\r\n      (ws.current as WebSocket).onopen = () => console.log('Connected');\r\n      (ws.current as WebSocket).onmessage = (event: MessageEvent) => {\r\n        const data = JSON.parse(event.data);\r\n        if (data.type === 'demat_accounts') {\r\n          const transformedAccounts = data?.data?.dematAccounts.map((account: any) => ({\r\n            id: account.id,\r\n            name: `${account.fullName}-angelone-${account.clientId}`,\r\n            accountId: account.id,\r\n            status: account.isTradeEnable ? 'active' : 'inactive',\r\n            multiplier: account.multiplier || 1,\r\n            fixLot: account.fixLot || false,\r\n            stats: account.stats\r\n          }));\r\n          setGroupChildren(transformedAccounts);\r\n        }\r\n      };\r\n      (ws.current as WebSocket).onclose = () => console.log('Disconnected');\r\n    }\r\n\r\n    return () => {\r\n      if (ws.current) {\r\n        (ws.current as WebSocket).close();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const handleRefresh = async () => {\r\n    await fetchGroupChildren();\r\n  };\r\n\r\n  const handleToggleTrading = async (accountId: string) => {\r\n    try {\r\n      setTogglingAccountId(accountId);\r\n      // TODO: Implement toggle trading for child account using updateDematAccountTradeToggle\r\n      const account = groupChildren.find(child => child.accountId === accountId);\r\n      if (!account) return;\r\n\r\n      const response = await updateDematAccountTradeToggle(accountId, account.status !== 'active');\r\n      \r\n      if (response.status) {\r\n        // Update the local state to reflect the change\r\n        setGroupChildren(children =>\r\n          children.map(child =>\r\n            child.accountId === accountId\r\n              ? { ...child, status: child.status === 'active' ? 'inactive' : 'active' }\r\n              : child\r\n          )\r\n        );\r\n        \r\n        snackbar.success(`Trading ${account.status !== 'active' ? 'enabled' : 'disabled'} successfully`);\r\n      } else {\r\n        snackbar.error(response.message || 'Failed to update trading status');\r\n      }\r\n    } catch (error: any) {\r\n      snackbar.error('Error toggling trading status: ' + error.message);\r\n    } finally {\r\n      setTogglingAccountId(null);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (accountId: string) => {\r\n    try {\r\n      const response = await removeChildFromGroup(group.id, accountId);\r\n      \r\n      if (response.status) {\r\n        // Update the local state to remove the child\r\n        setGroupChildren(children =>\r\n          children.filter(child => child.accountId !== accountId)\r\n        );\r\n        snackbar.success('Child account removed from group successfully');\r\n      } else {\r\n        snackbar.error(response.message || 'Failed to remove child from group');\r\n      }\r\n    } catch (error: any) {\r\n      snackbar.error('Error removing child from group: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const handleView = (accountId: string) => {\r\n    navigate(`/admin/account/${accountId}`);\r\n  };\r\n\r\n  const handleCancelAllOrders = async (groupId='') => {\r\n    try {\r\n      const orderids = tableData.orders\r\n        .filter((order: any) => ![\"complete\", \"rejected\", \"cancelled\"].includes(order.status?.toLowerCase()))\r\n        .map((order: any) => order.orderid);\r\n\r\n      const response = await cancelAllOrdersByGroup(groupId,orderids);\r\n      \r\n      if (response.status) {\r\n        snackbar.success(response.message);\r\n        fetchGroupChildren();\r\n      } else {\r\n        snackbar.error(response.message || 'Failed to cancel orders');\r\n      }\r\n    } catch (error: any) {\r\n      snackbar.error('Error cancelling orders: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const handleSquareOffAll = async (groupId: string) => {\r\n    try {\r\n      const response = await squareOffAllByGroup(groupId);\r\n      if (response.status) {\r\n        snackbar.success(response.message);\r\n        fetchGroupChildren();\r\n      } else {\r\n        snackbar.error(response.message || 'Failed to square off all');\r\n      }\r\n    } catch (error: any) {\r\n      snackbar.error('Error square off all: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const handleSquareOff = async (row: any) => {\r\n    try {\r\n      const response = await squareOffByUser(row);\r\n      if (response.status) {\r\n        snackbar.success(response.message);\r\n      } else {\r\n        snackbar.error(response.message || 'Failed to square off');\r\n      }\r\n    } catch (error: any) {\r\n      snackbar.error('Error square off: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const handleSort = (property: string) => {\r\n    const isAsc = tableState.orderBy === property && tableState.order === 'asc';\r\n    setTableState({\r\n      ...tableState,\r\n      order: isAsc ? 'desc' : 'asc',\r\n      orderBy: property\r\n    });\r\n  };\r\n\r\n  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTableState({\r\n      ...tableState,\r\n      searchQuery: event.target.value\r\n    });\r\n  };\r\n\r\n  const handleTabChange = (tab: 'positions' | 'orders' | 'trades') => {\r\n    setTableState({\r\n      ...tableState,\r\n      activeTab: tab\r\n    });\r\n  };\r\n\r\n  const getTableData = () => {\r\n    const { activeTab, searchQuery, orderBy, order } = tableState;\r\n    let data = tableData[activeTab];\r\n\r\n    // Filter data\r\n    if (searchQuery) {\r\n      const lowercaseQuery = searchQuery.toLowerCase();\r\n      data = data.filter((item: any) =>\r\n        Object.values(item).some((value) =>\r\n          String(value).toLowerCase().includes(lowercaseQuery)\r\n        )\r\n      );\r\n    }\r\n\r\n    // For positions, ensure netqty is treated as a number\r\n    if (activeTab === 'positions') {\r\n      data = data.map(row => ({\r\n        ...row,\r\n        netqty: Number(row.netqty) || 0,\r\n        avgnetprice: parseFloat(row.avgnetprice) || 0\r\n      }));\r\n    }\r\n\r\n    // Sort data\r\n    if (orderBy) {\r\n      data = [...data].sort((a, b) => {\r\n        let aValue = a[orderBy];\r\n        let bValue = b[orderBy];\r\n\r\n        // Convert numeric strings to numbers for proper sorting\r\n        if (typeof aValue === 'string' && !isNaN(Number(aValue))) {\r\n          aValue = Number(aValue);\r\n          bValue = Number(bValue);\r\n        }\r\n\r\n        // Handle dates\r\n        if (orderBy === 'exchtime' || orderBy === 'filltime') {\r\n          aValue = new Date(aValue).getTime();\r\n          bValue = new Date(bValue).getTime();\r\n        }\r\n\r\n        if (order === 'desc') {\r\n          return bValue > aValue ? 1 : bValue < aValue ? -1 : 0;\r\n        }\r\n        return aValue > bValue ? 1 : aValue < bValue ? -1 : 0;\r\n      });\r\n    } else {\r\n      // Default sorting\r\n      if (activeTab === 'positions') {\r\n        // Sort by open/closed status first, then by netqty\r\n      data = [...data].sort((a, b) => {\r\n          const aIsOpen = Number(a.netqty) !== 0;\r\n          const bIsOpen = Number(b.netqty) !== 0;\r\n          if (aIsOpen && !bIsOpen) return -1;\r\n          if (!aIsOpen && bIsOpen) return 1;\r\n          return Math.abs(Number(b.netqty) || 0) - Math.abs(Number(a.netqty) || 0);\r\n        });\r\n      } else if (activeTab === 'orders' || activeTab === 'trades') {\r\n        // Default sort by time in descending order\r\n        data = [...data].sort((a, b) => {\r\n          const aTime = new Date(activeTab === 'orders' ? a.exchtime : a.filltime).getTime();\r\n          const bTime = new Date(activeTab === 'orders' ? b.exchtime : b.filltime).getTime();\r\n          return bTime - aTime;\r\n        });\r\n      }\r\n    }\r\n\r\n    return data;\r\n  };\r\n\r\n  // Helper function to create sortable column header\r\n  const SortableTableCell = ({ label, field }: { label: string; field: string }) => (\r\n    <TableCell \r\n      sx={{ \r\n        color: theme => theme.palette.mode === 'dark' ? 'white' : '#1E293B',\r\n        padding: '8px',\r\n        backgroundColor: theme => theme.palette.mode === 'dark' \r\n          ? '#1A1C1E'\r\n          : '#F8FAFC',\r\n        position: 'sticky',\r\n        top: 0,\r\n        zIndex: 1,\r\n        borderBottom: theme => theme.palette.mode === 'dark'\r\n          ? '1px solid rgba(255, 255, 255, 0.1)'\r\n          : '1px solid rgba(0, 0, 0, 0.1)',\r\n        cursor: 'pointer'\r\n      }}\r\n      onClick={() => handleSort(field)}\r\n    >\r\n      <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\r\n        {label}\r\n        <TableSortLabel\r\n          active={tableState.orderBy === field}\r\n          direction={tableState.orderBy === field ? tableState.order : 'asc'}\r\n          sx={{\r\n            '& .MuiTableSortLabel-icon': {\r\n              color: theme => theme.palette.mode === 'dark' ? 'white !important' : '#1E293B !important',\r\n            },\r\n            '&.Mui-active': {\r\n              color: theme => theme.palette.mode === 'dark' ? 'white !important' : '#1E293B !important',\r\n            },\r\n            color: theme => theme.palette.mode === 'dark' ? 'white !important' : '#1E293B !important',\r\n          }}\r\n        />\r\n      </Box>\r\n    </TableCell>\r\n  );\r\n\r\n  const handleCancelOrder = async (orderid: string) => {\r\n    try {\r\n      // TODO: Implement cancel order functionality\r\n      const result = await cancelOrderByOrderId(orderid);\r\n      if (result.status) {\r\n        snackbar.success(result.message);\r\n      } else {\r\n        snackbar.error(result.message);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error cancelling order:\", error);\r\n      snackbar.error(\"Failed to cancel order\");\r\n    }\r\n  };\r\n\r\n  const handleOpenCreateOrder = () =>{\r\n    setIsCreateOrderOpen(true);\r\n  }\r\n\r\n  const handleCloseCreateOrder = () =>{\r\n    setIsCreateOrderOpen(false);\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      {/* Header */}\r\n      <Box sx={{ \r\n        display: 'flex', \r\n        alignItems: 'center', \r\n        justifyContent: 'space-between',\r\n        mb: 1.5,\r\n        backgroundColor: theme => theme.palette.mode === 'dark' ? '#1A1C1E' : '#ffffff',\r\n        p: 1.5,\r\n        borderRadius: 1,\r\n        boxShadow: 1\r\n      }}>\r\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5 }}>\r\n          <IconButton \r\n            onClick={onBack}\r\n            size=\"small\"\r\n            sx={{ \r\n              backgroundColor: '#0EA5E9',\r\n              '&:hover': { backgroundColor: '#0284C7' },\r\n              padding: '6px'\r\n            }}\r\n          >\r\n            <ArrowBackIcon sx={{ color: 'white', fontSize: '1.2rem' }} />\r\n          </IconButton>\r\n          <Typography variant=\"subtitle1\" sx={{ \r\n            color: theme => theme.palette.mode === 'dark' ? 'white' : 'text.primary',\r\n            fontWeight: 500\r\n          }}>\r\n            {group.name}\r\n          </Typography>\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={() => {\r\n              setRefreshFunction(fetchGroupChildren);\r\n              onAddChild();\r\n            }}\r\n            size=\"small\"\r\n            sx={{ \r\n              backgroundColor: '#0EA5E9',\r\n              '&:hover': { backgroundColor: '#0284C7' },\r\n              py: 0.5,\r\n              px: 1.5,\r\n              textTransform: 'none',\r\n              fontSize: '0.875rem'\r\n            }}\r\n          >\r\n            + Add Child\r\n          </Button>\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"success\"\r\n            size=\"small\"\r\n            onClick={handleOpenCreateOrder}\r\n            sx={{ \r\n              py: 0.5,\r\n              px: 1.5,\r\n              textTransform: 'none',\r\n              fontSize: '0.875rem'\r\n            }}\r\n          >\r\n            Place Order\r\n          </Button>\r\n        </Box>\r\n\r\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5 }}>\r\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n            {masterAccountName && (\r\n              <Typography variant=\"body2\" sx={{ \r\n                color: theme => theme.palette.mode === 'dark' ? 'white' : 'text.primary'\r\n              }}>\r\n                <span style={{ fontWeight: 'bold', fontSize: '0.8rem', color: '#0EA5E9' }}>Master Account:</span> {masterAccountName}\r\n              </Typography>\r\n            )}\r\n          \r\n          </Box>\r\n          <Typography variant=\"body2\" sx={{ \r\n            color: theme => theme.palette.mode === 'dark' ? 'grey.500' : 'text.secondary'\r\n          }}>\r\n            Trading\r\n          </Typography>\r\n          <Switch\r\n            checked={group.isTradeEnabled}\r\n            onChange={onToggleTrading}\r\n            disabled={isTogglingTrading}\r\n            size=\"small\"\r\n            sx={{\r\n              '& .MuiSwitch-thumb': {\r\n                  backgroundColor: !group.isTradeEnabled ? '#DC2626 !important' : '#22C55E !important'\r\n              },\r\n              '& .MuiSwitch-track': {\r\n                backgroundColor: !group.isTradeEnabled ? '#DC2626 !important' : '#22C55E !important'\r\n              }\r\n            }}\r\n          />\r\n          <Typography variant=\"subtitle2\" sx={{ \r\n            color: tableData.positions.reduce((sum, pos) => sum + (Number(pos.pnl) || 0), 0) >= 0 ? '#22C55E' : '#EF4444',\r\n            ml: 1.5\r\n          }}>\r\n            PNL: {tableData.positions.reduce((sum, pos) => sum + (Number(pos.pnl) || 0), 0).toFixed(2)}\r\n          </Typography>\r\n          <IconButton \r\n            onClick={fetchGroupChildren}\r\n            size=\"small\"\r\n            sx={{ \r\n              backgroundColor: '#8B5CF6',\r\n              '&:hover': { backgroundColor: '#7C3AED' },\r\n              padding: '6px'\r\n            }}\r\n          >\r\n            <SyncIcon sx={{ color: 'white', fontSize: '1.2rem' }} />\r\n          </IconButton>\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Content Area */}\r\n      <Box sx={{ \r\n        display: 'flex', \r\n        flexDirection: 'column',\r\n        gap: 2,\r\n        mt: 2\r\n      }}>\r\n        {isLoadingChildren ? (\r\n          <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\r\n            <CircularProgress />\r\n          </Box>\r\n        ) : groupChildren.length > 0 ? (\r\n          <>\r\n            <Box sx={{ \r\n              display: 'flex', \r\n              alignItems: 'center',\r\n              justifyContent: 'space-between',\r\n              gap: 1,\r\n              cursor: 'pointer',\r\n              backgroundColor: theme => theme.palette.mode === 'dark' ? '#1A1C1E' : '#FFFFFF',\r\n              padding: '12px 16px',\r\n              borderRadius: '8px',\r\n              border: theme => theme.palette.mode === 'dark' \r\n                ? '1px solid rgba(255, 255, 255, 0.1)'\r\n                : '1px solid rgba(0, 0, 0, 0.1)',\r\n              boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',\r\n              transition: 'all 0.2s ease',\r\n              '&:hover': {\r\n                backgroundColor: theme => theme.palette.mode === 'dark' ? '#262626' : '#F8FAFC',\r\n                borderColor: theme => theme.palette.mode === 'dark' \r\n                  ? 'rgba(255, 255, 255, 0.2)'\r\n                  : 'rgba(0, 0, 0, 0.2)',\r\n              }\r\n            }} onClick={() => setIsExpanded(!isExpanded)}>\r\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                {isExpanded ? (\r\n                  <ExpandLessIcon sx={{ \r\n                    fontSize: '1.5rem',\r\n                    color: theme => theme.palette.mode === 'dark' ? '#60A5FA' : '#2563EB'\r\n                  }} />\r\n                ) : (\r\n                  <ExpandMoreIcon sx={{ \r\n                    fontSize: '1.5rem',\r\n                    color: theme => theme.palette.mode === 'dark' ? '#60A5FA' : '#2563EB'\r\n                  }} />\r\n                )}\r\n                <Typography variant=\"subtitle1\" sx={{ \r\n                  fontWeight: 500,\r\n                  color: theme => theme.palette.mode === 'dark' ? 'white' : '#1E293B',\r\n                  fontSize: '0.95rem'\r\n                }}>\r\n                  {isExpanded ? 'Collapse' : 'Expand'} Broker Cards\r\n                </Typography>\r\n              </Box>\r\n              <Typography variant=\"body2\" sx={{ \r\n                color: theme => theme.palette.mode === 'dark' ? '#94A3B8' : '#64748B',\r\n                backgroundColor: theme => theme.palette.mode === 'dark' ? '#27272A' : '#F1F5F9',\r\n                padding: '4px 8px',\r\n                borderRadius: '4px',\r\n                fontSize: '0.8rem'\r\n              }}>\r\n                {groupChildren.length} {groupChildren.length === 1 ? 'Card' : 'Cards'}\r\n              </Typography>\r\n            </Box>\r\n\r\n            <Box \r\n              sx={{ \r\n                display: isExpanded ? 'grid' : 'none',\r\n                gridTemplateColumns: {\r\n                  xs: '1fr',\r\n                  sm: 'repeat(2, 1fr)',\r\n                  md: 'repeat(3, 1fr)',\r\n                },\r\n                gap: 3,\r\n                mt: 2,\r\n                animation: isExpanded ? 'fadeIn 0.3s ease-in-out' : 'none',\r\n                '@keyframes fadeIn': {\r\n                  '0%': {\r\n                    opacity: 0,\r\n                    transform: 'translateY(-10px)'\r\n                  },\r\n                  '100%': {\r\n                    opacity: 1,\r\n                    transform: 'translateY(0)'\r\n                  }\r\n                }\r\n              }}\r\n            >\r\n              {groupChildren.map((child) => (\r\n                <BrokerCard\r\n                  key={child.id}\r\n                  name={child.name}\r\n                  margin={0}\r\n                  isTrading={child.status === 'active'}\r\n                  stats={child.stats}\r\n                  onToggleTrading={() => handleToggleTrading(child.accountId)}\r\n                  onRefresh={() => handleRefresh()}\r\n                  onDelete={() => handleDelete(child.accountId)}\r\n                  onView={() => handleView(child.accountId)}\r\n                  isToggling={togglingAccountId === child.accountId}\r\n                  isActionButtonVisible={child.accountId !== group.masterAccountId}\r\n                />\r\n              ))}\r\n            </Box>\r\n\r\n            {/* Tabs */}\r\n            <Box\r\n              sx={{\r\n                display: 'flex',\r\n                backgroundColor: theme => theme.palette.mode === 'dark' ? '#1A1C1E' : '#F8FAFC',\r\n                borderRadius: 1,\r\n                mb: 1,\r\n                mt: 1,\r\n                overflow: 'hidden',\r\n                border: theme => theme.palette.mode === 'dark'\r\n                  ? '1px solid rgba(255, 255, 255, 0.1)'\r\n                  : '1px solid rgba(0, 0, 0, 0.1)',\r\n              }}\r\n            >\r\n              <Button\r\n                variant={tableState.activeTab === 'positions' ? 'contained' : 'text'}\r\n                onClick={() => handleTabChange('positions')}\r\n                sx={{\r\n                  flex: 1,\r\n                  py: 1.5,\r\n                  borderRadius: 0,\r\n                  backgroundColor: theme => {\r\n                    if (tableState.activeTab === 'positions') {\r\n                      return theme.palette.mode === 'dark' ? '#000' : '#3b82f6';\r\n                    }\r\n                    return 'transparent';\r\n                  },\r\n                  color: theme => {\r\n                    if (tableState.activeTab === 'positions') {\r\n                      return 'white';\r\n                    }\r\n                    return theme.palette.mode === 'dark' ? 'grey.500' : '#64748B';\r\n                  },\r\n                  '&:hover': {\r\n                    backgroundColor: theme => {\r\n                      if (tableState.activeTab === 'positions') {\r\n                        return theme.palette.mode === 'dark' ? '#000' : '#3b82f6';\r\n                      }\r\n                      return theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';\r\n                    },\r\n                  },\r\n                }}\r\n              >\r\n                Positions\r\n              </Button>\r\n              <Button\r\n                variant={tableState.activeTab === 'orders' ? 'contained' : 'text'}\r\n                onClick={() => handleTabChange('orders')}\r\n                sx={{\r\n                  flex: 1,\r\n                  py: 1.5,\r\n                  borderRadius: 0,\r\n                  backgroundColor: theme => {\r\n                    if (tableState.activeTab === 'orders') {\r\n                      return theme.palette.mode === 'dark' ? '#000' : '#3b82f6';\r\n                    }\r\n                    return 'transparent';\r\n                  },\r\n                  color: theme => {\r\n                    if (tableState.activeTab === 'orders') {\r\n                      return 'white';\r\n                    }\r\n                    return theme.palette.mode === 'dark' ? 'grey.500' : '#64748B';\r\n                  },\r\n                  '&:hover': {\r\n                    backgroundColor: theme => {\r\n                      if (tableState.activeTab === 'orders') {\r\n                        return theme.palette.mode === 'dark' ? '#000' : '#3b82f6';\r\n                      }\r\n                      return theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';\r\n                    },\r\n                  },\r\n                }}\r\n              >\r\n                Orders\r\n              </Button>\r\n              <Button\r\n                variant={tableState.activeTab === 'trades' ? 'contained' : 'text'}\r\n                onClick={() => handleTabChange('trades')}\r\n                sx={{\r\n                  flex: 1,\r\n                  py: 1.5,\r\n                  borderRadius: 0,\r\n                  backgroundColor: theme => {\r\n                    if (tableState.activeTab === 'trades') {\r\n                      return theme.palette.mode === 'dark' ? '#000' : '#3b82f6';\r\n                    }\r\n                    return 'transparent';\r\n                  },\r\n                  color: theme => {\r\n                    if (tableState.activeTab === 'trades') {\r\n                      return 'white';\r\n                    }\r\n                    return theme.palette.mode === 'dark' ? 'grey.500' : '#64748B';\r\n                  },\r\n                  '&:hover': {\r\n                    backgroundColor: theme => {\r\n                      if (tableState.activeTab === 'trades') {\r\n                        return theme.palette.mode === 'dark' ? '#000' : '#3b82f6';\r\n                      }\r\n                      return theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';\r\n                    },\r\n                  },\r\n                }}\r\n              >\r\n                Trades\r\n              </Button>\r\n            </Box>\r\n\r\n            {/* Search and Actions */}\r\n            <Box sx={{ \r\n              display: 'flex', \r\n              alignItems: 'center', \r\n              justifyContent: 'flex-start',\r\n              mb: 1,\r\n              gap: 2\r\n            }}>\r\n              <TextField\r\n                placeholder=\"Search...\"\r\n                value={tableState.searchQuery}\r\n                onChange={handleSearch}\r\n                size=\"small\"\r\n                sx={{ \r\n                  backgroundColor: theme => theme.palette.mode === 'dark' ? '#1A1C1E' : '#F8FAFC',\r\n                  borderRadius: 1,\r\n                  minWidth: '240px',\r\n                  '& .MuiOutlinedInput-root': {\r\n                    color: theme => theme.palette.mode === 'dark' ? 'white' : '#1E293B',\r\n                    '& fieldset': {\r\n                      borderColor: theme => theme.palette.mode === 'dark'\r\n                        ? 'rgba(255, 255, 255, 0.23)'\r\n                        : 'rgba(0, 0, 0, 0.23)',\r\n                    },\r\n                    '&:hover fieldset': {\r\n                      borderColor: theme => theme.palette.mode === 'dark'\r\n                        ? 'rgba(255, 255, 255, 0.5)'\r\n                        : 'rgba(0, 0, 0, 0.5)',\r\n                    },\r\n                  },\r\n                }}\r\n                InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <SearchIcon sx={{ \r\n                        color: theme => theme.palette.mode === 'dark' ? 'white' : '#64748B'\r\n                      }} />\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n\r\n              {tableState.activeTab === 'positions' && (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"error\"\r\n                  size=\"medium\"\r\n                  onClick={() => handleSquareOffAll(group.id)}\r\n                  disabled={!tableData.positions.some(pos => Number(pos.netqty) !== 0)}\r\n                  sx={{ \r\n                    py: 0.7,\r\n                    px: 2,\r\n                    textTransform: 'none',\r\n                    minWidth: '100px',\r\n                    backgroundColor: theme => theme.palette.mode === 'dark' ? '#DC2626' : '#EF4444',\r\n                    '&:hover': {\r\n                      backgroundColor: theme => theme.palette.mode === 'dark' ? '#B91C1C' : '#DC2626',\r\n                    },\r\n                  }}\r\n                >\r\n                  Exit All\r\n                </Button>\r\n              )}\r\n              {tableState.activeTab === 'orders' && (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"error\"\r\n                  size=\"medium\"\r\n                  onClick={() => handleCancelAllOrders(group.id)}\r\n                  disabled={!tableData.orders.some(order => ![\"complete\", \"cancelled\", \"rejected\"].includes(order.status.toLowerCase()))}\r\n                  sx={{ \r\n                    py: 0.7,\r\n                    px: 2,\r\n                    textTransform: 'none',\r\n                    minWidth: '100px',\r\n                    backgroundColor: theme => theme.palette.mode === 'dark' ? '#DC2626' : '#EF4444',\r\n                    '&:hover': {\r\n                      backgroundColor: theme => theme.palette.mode === 'dark' ? '#B91C1C' : '#DC2626',\r\n                    },\r\n                  }}\r\n                >\r\n                  Cancel All\r\n                </Button>\r\n              )}\r\n            </Box>\r\n\r\n            {/* Table */}\r\n            <TableContainer \r\n              component={Paper} \r\n              sx={{ \r\n                backgroundColor: theme => theme.palette.mode === 'dark' \r\n                  ? 'rgba(26, 28, 30, 0.5)'\r\n                  : 'rgba(255, 255, 255, 0.9)',\r\n                maxHeight: '600px',\r\n                position: 'relative',\r\n                overflow: 'auto',\r\n                margin: '16px 0',\r\n                borderRadius: '8px',\r\n                '& .MuiTableRow-root:hover': {\r\n                  backgroundColor: theme => theme.palette.mode === 'dark'\r\n                    ? 'rgba(255, 255, 255, 0.05) !important'\r\n                    : 'rgba(0, 0, 0, 0.04) !important'\r\n                },\r\n                border: theme => theme.palette.mode === 'dark'\r\n                  ? '1px solid rgba(255, 255, 255, 0.1)'\r\n                  : '1px solid rgba(0, 0, 0, 0.1)',\r\n              }}\r\n            >\r\n              <Table size=\"medium\" stickyHeader>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {(tableState.activeTab === 'positions' || tableState.activeTab === 'orders') && (\r\n                    <TableCell \r\n                      sx={{ \r\n                          color: theme => theme.palette.mode === 'dark' ? 'white' : '#1E293B',\r\n                          padding: '12px 8px',\r\n                          backgroundColor: theme => theme.palette.mode === 'dark' \r\n                            ? 'rgba(26, 28, 30, 0.95)'\r\n                            : 'rgba(255, 255, 255, 0.95)',\r\n                        position: 'sticky',\r\n                        top: 0,\r\n                        zIndex: 1,\r\n                          borderBottom: theme => theme.palette.mode === 'dark'\r\n                            ? '1px solid rgba(255, 255, 255, 0.1)'\r\n                            : '1px solid rgba(0, 0, 0, 0.1)',\r\n                          fontSize: '0.875rem',\r\n                          fontWeight: 700\r\n                        }}\r\n                      >\r\n                        {tableState.activeTab === 'positions'?'Exit':tableState.activeTab === 'orders'?'Cancel':''}\r\n                    </TableCell>\r\n                    )}\r\n                        <TableCell \r\n                          sx={{ \r\n                        color: theme => theme.palette.mode === 'dark' ? 'white' : '#1E293B',\r\n                        padding: '12px 8px',\r\n                        backgroundColor: theme => theme.palette.mode === 'dark' \r\n                          ? 'rgba(26, 28, 30, 0.95)'\r\n                          : 'rgba(255, 255, 255, 0.95)',\r\n                            position: 'sticky',\r\n                            top: 0,\r\n                            zIndex: 1,\r\n                        borderBottom: theme => theme.palette.mode === 'dark'\r\n                          ? '1px solid rgba(255, 255, 255, 0.1)'\r\n                          : '1px solid rgba(0, 0, 0, 0.1)',\r\n                        fontSize: '0.875rem',\r\n                        fontWeight: 700\r\n                      }}\r\n                    >\r\n                      Client ID\r\n                        </TableCell>\r\n                    {tableState.activeTab === 'positions' && (\r\n                      <>\r\n                        <SortableTableCell label=\"Symbol\" field=\"tradingsymbol\" />\r\n                        <SortableTableCell label=\"Product\" field=\"producttype\" />\r\n                        <SortableTableCell label=\"Action\" field=\"action\" />\r\n                        <SortableTableCell label=\"Net Qty\" field=\"netqty\" />\r\n                        <SortableTableCell label=\"P&L\" field=\"pnl\" />\r\n                        <SortableTableCell label=\"LTP\" field=\"ltp\" />\r\n                        <SortableTableCell label=\"Avg Price\" field=\"avgnetprice\" />\r\n                      </>\r\n                    )}\r\n                    {tableState.activeTab === 'orders' && (\r\n                      <>\r\n                        <SortableTableCell label=\"Symbol\" field=\"tradingsymbol\" />\r\n                        <SortableTableCell label=\"Type\" field=\"transactiontype\" />\r\n                        <SortableTableCell label=\"Status\" field=\"status\" />\r\n                        <SortableTableCell label=\"Quantity\" field=\"quantity\" />\r\n                        <SortableTableCell label=\"Price\" field=\"price\" />\r\n                        <SortableTableCell label=\"Time\" field=\"exchtime\" />\r\n                      </>\r\n                    )}\r\n                    {tableState.activeTab === 'trades' && (\r\n                      <>\r\n                        <SortableTableCell label=\"Symbol\" field=\"tradingsymbol\" />\r\n                        <SortableTableCell label=\"Type\" field=\"transactiontype\" />\r\n                        <SortableTableCell label=\"Quantity\" field=\"fillsize\" />\r\n                        <SortableTableCell label=\"Price\" field=\"fillprice\" />\r\n                        <SortableTableCell label=\"Order ID\" field=\"orderid\" />\r\n                        <SortableTableCell label=\"Time\" field=\"filltime\" />\r\n                      </>\r\n                    )}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {getTableData().map((row: any, index: number) => (\r\n                    <TableRow \r\n                      key={index} \r\n                      hover\r\n                          sx={{ \r\n                        '&:nth-of-type(odd)': {\r\n                          backgroundColor: theme => theme.palette.mode === 'dark'\r\n                            ? 'rgba(255, 255, 255, 0.02)'\r\n                            : 'rgba(0, 0, 0, 0.02)'\r\n                        },\r\n                        '&:last-child td': {\r\n                          borderBottom: 0\r\n                        }\r\n                      }}\r\n                    >\r\n                      {(tableState.activeTab === 'positions' || tableState.activeTab === 'orders') && (\r\n                        <TableCell sx={{ padding: '8px 12px' }}>\r\n                          <Box sx={{ display: 'flex', gap: 1 }}>\r\n                            {tableState.activeTab === 'positions' && (\r\n                              <Button\r\n                                variant=\"contained\"\r\n                                color=\"error\"\r\n                                size=\"small\"\r\n                                disabled={Number(row.netqty) === 0}\r\n                                onClick={() => handleSquareOff(row)}\r\n                          sx={{ \r\n                                  minWidth: '60px',\r\n                                  padding: '2px 8px',\r\n                                  fontSize: '0.75rem'\r\n                                }}\r\n                              >\r\n                                Exit\r\n                              </Button>\r\n                            )}\r\n                            {tableState.activeTab === 'orders' && (\r\n                              <Button\r\n                                variant=\"contained\"\r\n                                color=\"error\"\r\n                                size=\"small\"\r\n                                onClick={() => handleCancelOrder(row.orderid)}\r\n                                disabled={[\"complete\", \"cancelled\", \"rejected\"].includes(row.status.toLowerCase())}\r\n                          sx={{ \r\n                                  minWidth: '60px',\r\n                                  padding: '2px 8px',\r\n                                  fontSize: '0.75rem'\r\n                                }}\r\n                              >\r\n                                Cancel\r\n                              </Button>\r\n                            )}\r\n                          </Box>\r\n                        </TableCell>\r\n                      )}\r\n                        <TableCell \r\n                          sx={{ \r\n                          color: theme => theme.palette.mode === 'dark' \r\n                            ? 'rgba(255, 255, 255, 0.9)'\r\n                            : 'rgba(0, 0, 0, 0.9)',\r\n                          padding: '8px 12px',\r\n                          borderBottom: theme => theme.palette.mode === 'dark'\r\n                            ? '1px solid rgba(255, 255, 255, 0.05)'\r\n                            : '1px solid rgba(0, 0, 0, 0.05)'\r\n                        }}\r\n                      >\r\n                        {row.clientId || '-'}\r\n                        </TableCell>\r\n                      {tableState.activeTab === 'positions' && (\r\n                        <>\r\n                          <TableCell sx={{ \r\n                            color: theme => theme.palette.mode === 'dark' ? 'white' : '#1E293B',\r\n                            padding: '8px' \r\n                          }}>\r\n                            {row.tradingsymbol}\r\n                          </TableCell>\r\n                          <TableCell sx={{ \r\n                            color: theme => theme.palette.mode === 'dark' ? 'white' : '#1E293B',\r\n                            padding: '8px' \r\n                          }}>\r\n                            {row.producttype}\r\n                          </TableCell>\r\n                          <TableCell sx={{ padding: '8px' }}>\r\n                            <Box\r\n                              sx={{\r\n                                color: Number(row.netqty) === 0\r\n                                  ? '#fc424a'\r\n                                  : Number(row.netqty) > 0\r\n                                  ? '#00d25b'\r\n                                  : '#fc424a',\r\n                                backgroundColor: Number(row.netqty) === 0\r\n                                  ? 'rgba(252, 66, 74, 0.2)'\r\n                                  : Number(row.netqty) > 0\r\n                                  ? 'rgba(0, 210, 91, 0.2)'\r\n                                  : 'rgba(252, 66, 74, 0.2)',\r\n                                display: 'inline-block',\r\n                                px: 1,\r\n                                py: 0.25,\r\n                                borderRadius: 1,\r\n                                textShadow: theme => theme.palette.mode === 'dark'\r\n                                  ? Number(row.netqty) === 0\r\n                                  ? '0 0 10px rgba(252, 66, 74, 0.5)'\r\n                                  : Number(row.netqty) > 0\r\n                                  ? '0 0 10px rgba(0, 210, 91, 0.5)'\r\n                                    : '0 0 10px rgba(252, 66, 74, 0.5)'\r\n                                  : 'none',\r\n                                fontWeight: 500,\r\n                                fontSize: '0.75rem'\r\n                              }}\r\n                            >\r\n                              {Number(row.netqty) === 0 ? 'CLOSED' : Number(row.netqty) > 0 ? 'BUY' : 'SELL'}\r\n                            </Box>\r\n                          </TableCell>\r\n                          <TableCell sx={{ \r\n                            color: theme => theme.palette.mode === 'dark' ? 'white' : '#1E293B',\r\n                            padding: '8px' \r\n                          }}>\r\n                            {Math.abs(Number(row.netqty) || 0)}\r\n                            {Number(row.cfbuyqty) > 0 && (\r\n                              <Typography\r\n                                component=\"span\"\r\n                                sx={{\r\n                                  fontSize: '0.7rem',\r\n                                  color: theme => theme.palette.mode === 'dark' ? '#9CA3AF' : '#64748B',\r\n                                  ml: 1\r\n                                }}\r\n                              >\r\n                                (CF: {row.cfbuyqty})\r\n                              </Typography>\r\n                            )}\r\n                          </TableCell>\r\n                          <TableCell sx={{ color: Number(row.pnl) >= 0 ? '#22C55E' : '#EF4444', padding: '8px' }}>\r\n                            {Number(row.pnl).toFixed(2)} {Number(row.pnl) < 0 ? '↓' : '↑'}\r\n                            {Number(row.unrealisedpnl || 0) !== 0 && (\r\n                              <Typography\r\n                                component=\"span\"\r\n                                sx={{\r\n                                  fontSize: '0.7rem',\r\n                                  color: Number(row.unrealisedpnl) >= 0 ? '#22C55E' : '#EF4444',\r\n                                  ml: 1\r\n                                }}\r\n                              >\r\n                                (Unr: {Number(row.unrealisedpnl).toFixed(2)})\r\n                              </Typography>\r\n                            )}\r\n                          </TableCell>\r\n                          <TableCell sx={{ color: 'white', padding: '8px' }}>{Number(row.ltp).toFixed(2)}</TableCell>\r\n                          <TableCell sx={{ color: 'white', padding: '8px' }}>\r\n                            {row.avgnetprice.toFixed(2)}\r\n                          </TableCell>\r\n                        </>\r\n                      )}\r\n                      {tableState.activeTab === 'orders' && (\r\n                        <>\r\n                          <TableCell sx={{ color: 'white', padding: '8px' }}>{row.tradingsymbol}</TableCell>\r\n                          <TableCell sx={{ padding: '8px' }}>\r\n                            <Box\r\n                              sx={{ \r\n                                color: row.transactiontype?.toLowerCase() === 'buy' ? '#00d25b' : '#fc424a',\r\n                                backgroundColor: row.transactiontype?.toLowerCase() === 'buy' \r\n                                  ? 'rgba(0, 210, 91, 0.2)'\r\n                                  : 'rgba(252, 66, 74, 0.2)',\r\n                                display: 'inline-block',\r\n                                px: 1,\r\n                                py: 0.25,\r\n                                borderRadius: 1,\r\n                                textShadow: row.transactiontype?.toLowerCase() === 'buy'\r\n                                  ? '0 0 10px rgba(0, 210, 91, 0.5)'\r\n                                  : '0 0 10px rgba(252, 66, 74, 0.5)',\r\n                                fontWeight: 500,\r\n                                fontSize: '0.75rem'\r\n                              }}\r\n                            >\r\n                              {row.transactiontype?.toUpperCase()}\r\n                            </Box>\r\n                          </TableCell>\r\n                          <TableCell sx={{ padding: '8px' }}>\r\n                            <Box\r\n                              sx={{ \r\n                                color: row.status?.toLowerCase() === 'complete' ? '#00d25b' \r\n                                  : row.status?.toLowerCase() === 'cancelled' ? '#fc424a'\r\n                                  : row.status?.toLowerCase() === 'rejected' ? '#fc424a'\r\n                                  : row.status?.toLowerCase() === 'pending' ? '#fcd34d'\r\n                                  : '#00d25b',\r\n                                backgroundColor: row.status?.toLowerCase() === 'complete' ? 'rgba(0, 210, 91, 0.2)'\r\n                                  : row.status?.toLowerCase() === 'cancelled' ? 'rgba(252, 66, 74, 0.2)'\r\n                                  : row.status?.toLowerCase() === 'rejected' ? 'rgba(252, 66, 74, 0.2)'\r\n                                  : row.status?.toLowerCase() === 'pending' ? 'rgba(252, 211, 77, 0.2)'\r\n                                  : 'rgba(0, 210, 91, 0.2)',\r\n                                display: 'inline-block',\r\n                                px: 1,\r\n                                py: 0.25,\r\n                                borderRadius: 1,\r\n                                textShadow: row.status?.toLowerCase() === 'complete' ? '0 0 10px rgba(0, 210, 91, 0.5)'\r\n                                  : row.status?.toLowerCase() === 'cancelled' ? '0 0 10px rgba(252, 66, 74, 0.5)'\r\n                                  : row.status?.toLowerCase() === 'rejected' ? '0 0 10px rgba(252, 66, 74, 0.5)'\r\n                                  : row.status?.toLowerCase() === 'pending' ? '0 0 10px rgba(252, 211, 77, 0.5)'\r\n                                  : '0 0 10px rgba(0, 210, 91, 0.5)',\r\n                                fontWeight: 500,\r\n                                fontSize: '0.75rem'\r\n                              }}\r\n                            >\r\n                              {row.status?.toUpperCase()}\r\n                            </Box>\r\n                          </TableCell>\r\n                          <TableCell sx={{ color: 'white', padding: '8px' }}>{row.quantity}</TableCell>\r\n                          <TableCell sx={{ color: 'white', padding: '8px' }}>{row.price}</TableCell>\r\n                          <TableCell sx={{ color: 'white', padding: '8px' }}>{row.exchtime}</TableCell>\r\n                        </>\r\n                      )}\r\n                      {tableState.activeTab === 'trades' && (\r\n                        <>\r\n                          <TableCell sx={{ color: 'white', padding: '8px' }}>{row.tradingsymbol}</TableCell>\r\n                          <TableCell sx={{ padding: '8px' }}>\r\n                            <Box\r\n                              sx={{\r\n                                color: row.transactiontype?.toLowerCase() === 'buy' ? '#00d25b' : '#fc424a',\r\n                                backgroundColor: row.transactiontype?.toLowerCase() === 'buy' \r\n                                  ? 'rgba(0, 210, 91, 0.2)'\r\n                                  : 'rgba(252, 66, 74, 0.2)',\r\n                                display: 'inline-block',\r\n                                px: 1,\r\n                                py: 0.25,\r\n                                borderRadius: 1,\r\n                                textShadow: row.transactiontype?.toLowerCase() === 'buy'\r\n                                  ? '0 0 10px rgba(0, 210, 91, 0.5)'\r\n                                  : '0 0 10px rgba(252, 66, 74, 0.5)',\r\n                                fontWeight: 500,\r\n                                fontSize: '0.75rem'\r\n                              }}\r\n                            >\r\n                              {row.transactiontype?.toUpperCase()}\r\n                            </Box>\r\n                          </TableCell>\r\n                          <TableCell sx={{ color: 'white', padding: '8px' }}>{row.fillsize}</TableCell>\r\n                          <TableCell sx={{ color: 'white', padding: '8px' }}>{row.fillprice}</TableCell>\r\n                          <TableCell sx={{ color: 'white', padding: '8px' }}>{row.orderid}</TableCell>\r\n                          <TableCell sx={{ color: 'white', padding: '8px' }}>{row.filltime}</TableCell>\r\n                        </>\r\n                      )}\r\n                    </TableRow>\r\n                  ))}\r\n                  {getTableData().length === 0 && (\r\n                    <TableRow>\r\n                      <TableCell \r\n                        colSpan={tableState.activeTab === 'trades' ? 6 : 9} \r\n                        align=\"center\" \r\n                        sx={{ \r\n                          color: theme => theme.palette.mode === 'dark' \r\n                            ? 'rgba(255, 255, 255, 0.7)'\r\n                            : 'rgba(0, 0, 0, 0.7)',\r\n                          padding: '24px 8px'\r\n                        }}\r\n                      >\r\n                        {tableState.searchQuery ? 'No matching records found' : 'No records found'}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  )}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </>\r\n        ) : (\r\n          <Box sx={{ \r\n            display: 'flex', \r\n            justifyContent: 'center', \r\n            alignItems: 'center',\r\n            height: '200px'\r\n          }}>\r\n            <Typography color=\"text.secondary\">\r\n              No child accounts connected yet.\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n      </Box>\r\n\r\n       <CreateOrder group={group} open={isCreateOrderOpen} onClose={handleCloseCreateOrder} />\r\n\r\n    </Box>\r\n  );\r\n};\r\n\r\n// Add new interfaces for table data\r\ninterface TableData {\r\n  positions: any[];\r\n  orders: any[];\r\n  trades: any[];\r\n}\r\n\r\ninterface TableState {\r\n  activeTab: 'positions' | 'orders' | 'trades';\r\n  searchQuery: string;\r\n  orderBy: string;\r\n  order: 'asc' | 'desc';\r\n}\r\n\r\nconst GroupManager = () => {\r\n  const [isCreateGroupOpen, setIsCreateGroupOpen] = useState(false);\r\n  const [groups, setGroups] = useState<ExtendedGroup[]>([]);\r\n  const [brokerAccounts, setBrokerAccounts] = useState<BrokerAccount[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [groupStats, setGroupStats] = useState<Record<string, GroupStats>>({});\r\n  const [isTogglingMaster, setIsTogglingMaster] = useState<string | null>(null);\r\n  const [isTogglingTrading, setIsTogglingTrading] = useState<string | null>(null);\r\n  const [confirmMasterDialog, setConfirmMasterDialog] = useState(false);\r\n  const [confirmDeleteDialog, setConfirmDeleteDialog] = useState(false);\r\n  const [selectedMasterData, setSelectedMasterData] = useState<{\r\n    groupId: string;\r\n    accountId: string;\r\n    action: 'connect' | 'disconnect';\r\n  } | null>(null);\r\n  const [selectedGroup, setSelectedGroup] = useState<{id: string; name: string; masterAccountId?: string} | null>(null);\r\n  const [isGroupDetailsView, setIsGroupDetailsView] = useState(false);\r\n  const [isAddChildOpen, setIsAddChildOpen] = useState(false);\r\n  const [selectedGroupForRefresh, setSelectedGroupForRefresh] = useState<() => Promise<void>>();\r\n  const [groupToDelete, setGroupToDelete] = useState<string | null>(null);\r\n  \r\n  const snackbar = useSnackbar();\r\n\r\n  // Function to fetch broker accounts and groups\r\n  const fetchData = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const [dematResponse, groupsResponse] = await Promise.all([\r\n        getDematAccounts(),\r\n        getGroups()\r\n      ]);\r\n      \r\n      if (dematResponse.status) {\r\n        const transformedAccounts = dematResponse.dematAccounts.map((account: any) => ({\r\n          id: account.id,\r\n          name: `${account.fullName}-angelone-${account.clientId}`,\r\n        }));\r\n        setBrokerAccounts(transformedAccounts);\r\n      }\r\n\r\n      if (groupsResponse.status) {\r\n        setGroups(groupsResponse.groups);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching data:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n\r\n  // Initial data fetch\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleOpenCreateGroup = () => {\r\n    setIsCreateGroupOpen(true);\r\n  };\r\n\r\n  const handleCloseCreateGroup = () => {\r\n    setIsCreateGroupOpen(false);\r\n  };\r\n\r\n  const handleCreateGroup = async (data: { name: string; members: string[] }) => {\r\n    try {\r\n      setIsSubmitting(true);\r\n      const response = await createGroup({\r\n        name: data.name,\r\n        members: [] // Empty array for members as we're only asking for the group name\r\n      });\r\n      \r\n      if (response.status) {\r\n        snackbar.success('Group created successfully');\r\n        fetchData(); // Refresh the groups list\r\n        handleCloseCreateGroup();\r\n      } else {\r\n        snackbar.error(response.message || 'Failed to create group');\r\n      }\r\n    } catch (error: any) {\r\n      snackbar.error('Error creating group: ' + error.message);\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleDeleteGroup = async (groupId: string) => {\r\n    setGroupToDelete(groupId);\r\n    setConfirmDeleteDialog(true);\r\n  };\r\n\r\n  const handleConfirmDelete = async () => {\r\n    if (!groupToDelete) return;\r\n    \r\n    try {\r\n      setIsSubmitting(true);\r\n      const response = await deleteGroup(groupToDelete);\r\n      \r\n      if (response.status) {\r\n        snackbar.success('Group deleted successfully');\r\n        fetchData(); // Refresh the groups list\r\n      } else {\r\n        snackbar.error(response.message || 'Failed to delete group');\r\n      }\r\n    } catch (error: any) {\r\n      snackbar.error('Error deleting group: ' + error.message);\r\n    } finally {\r\n      setIsSubmitting(false);\r\n      setConfirmDeleteDialog(false);\r\n      setGroupToDelete(null);\r\n    }\r\n  };\r\n\r\n  const handleEditGroup = (groupId: string) => {\r\n    // TODO: Implement edit group functionality\r\n    console.log('Edit group:', groupId);\r\n  };\r\n\r\n  const handleViewGroup = (groupId: string) => {\r\n    const group = groups.find(g => g.id === groupId);\r\n    if (group) {\r\n      setSelectedGroup({\r\n        id: groupId,\r\n        name: group.name,\r\n        masterAccountId: group.masterAccountId\r\n      });\r\n      setIsGroupDetailsView(true);\r\n    }\r\n  };\r\n\r\n  const handleBackToList = () => {\r\n    setIsGroupDetailsView(false);\r\n    setSelectedGroup(null);\r\n  };\r\n\r\n  const handleMasterChange = (groupId: string, accountId: string) => {\r\n    // Just update the selected account without showing confirmation\r\n    const group = groups.find(g => g.id === groupId);\r\n    if (group) {\r\n      group.selectedAccountId = accountId; // Temporarily store selected account\r\n      setGroups([...groups]); // Force update\r\n    }\r\n  };\r\n\r\n  const handleToggleMaster = async (groupId: string) => {\r\n    const group = groups.find(g => g.id === groupId);\r\n    if (!group) return;\r\n\r\n    const accountId = group.selectedAccountId || group.masterAccountId;\r\n    if (!accountId) return;\r\n\r\n    if (group.masterAccountId === accountId) {\r\n      // If clicking on the current master, we're disconnecting\r\n      setSelectedMasterData({\r\n        groupId,\r\n        accountId,\r\n        action: 'disconnect'\r\n      });\r\n    } else {\r\n      // If clicking to connect a new master\r\n      setSelectedMasterData({\r\n        groupId,\r\n        accountId,\r\n        action: 'connect'\r\n      });\r\n    }\r\n    setConfirmMasterDialog(true);\r\n  };\r\n\r\n  const handleConfirmMasterToggle = async () => {\r\n    if (!selectedMasterData) return;\r\n\r\n    try {\r\n      setIsTogglingMaster(selectedMasterData.accountId);\r\n      const response = await toggleMaster({ \r\n        groupId: selectedMasterData.groupId, \r\n        accountId: selectedMasterData.action === 'connect' ? selectedMasterData.accountId : ''\r\n      });\r\n      \r\n      if (response.status) {\r\n        snackbar.success(\r\n          selectedMasterData.action === 'connect' \r\n            ? 'Master account connected successfully' \r\n            : 'Master account disconnected successfully'\r\n        );\r\n        fetchData(); // Refresh the groups list\r\n      } else {\r\n        snackbar.error(response.message || 'Failed to update master account');\r\n      }\r\n    } catch (error: any) {\r\n      snackbar.error('Error updating master account: ' + error.message);\r\n    } finally {\r\n      setIsTogglingMaster(null);\r\n      setConfirmMasterDialog(false);\r\n      setSelectedMasterData(null);\r\n    }\r\n  };\r\n\r\n  const handleToggleTrading = async (groupId: string) => {\r\n    try {\r\n      setIsTogglingTrading(groupId);\r\n      const group = groups.find(g => g.id === groupId);\r\n      if (!group) return;\r\n\r\n      const response = await toggleTrading({ \r\n        groupId, \r\n        isTrading: !group.isTradeEnabled \r\n      });\r\n      \r\n      if (response.status) {\r\n        snackbar.success(`Trading ${!group.isTradeEnabled ? 'enabled' : 'disabled'} successfully`);\r\n        fetchData(); // Refresh the groups list\r\n      } else {\r\n        snackbar.error(response.message || 'Failed to update trading status');\r\n      }\r\n    } catch (error: any) {\r\n      snackbar.error('Error updating trading status: ' + error.message);\r\n    } finally {\r\n      setIsTogglingTrading(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <AdminAppBar>\r\n        <AdminToolbar title={\"Group Manager\"}></AdminToolbar>\r\n      </AdminAppBar>\r\n      <Box sx={{ p: 3 }}>\r\n        {isGroupDetailsView && selectedGroup ? (\r\n          <GroupDetailsView\r\n            group={groups.find(g => g.id === selectedGroup.id)!}\r\n            onBack={handleBackToList}\r\n            onAddChild={() => setIsAddChildOpen(true)}\r\n            onToggleMaster={() => handleToggleMaster(selectedGroup.id)}\r\n            onToggleTrading={() => handleToggleTrading(selectedGroup.id)}\r\n            isTogglingMaster={isTogglingMaster === selectedGroup.id}\r\n            isTogglingTrading={isTogglingTrading === selectedGroup.id}\r\n            masterAccountName={brokerAccounts.find(acc => acc.id === selectedGroup.masterAccountId)?.name}\r\n            setRefreshFunction={fn => setSelectedGroupForRefresh(() => fn)}\r\n            brokerAccounts={brokerAccounts}\r\n            setBrokerAccounts={setBrokerAccounts}\r\n          />\r\n        ) : (\r\n          <>\r\n            <Box sx={{ mb: 3, display: 'flex', gap: 2 }}>\r\n              <Button \r\n                component=\"label\" \r\n                variant=\"contained\" \r\n                tabIndex={-1} \r\n                startIcon={<GroupAddIcon />}\r\n                onClick={handleOpenCreateGroup}\r\n                disabled={isLoading || isSubmitting}\r\n                sx={{\r\n                py: 0.5,\r\n                px: 1.5,\r\n                textTransform: 'none',\r\n                fontSize: '0.875rem'}}\r\n              > \r\n                Create Group\r\n              </Button>\r\n            </Box>\r\n            \r\n            {isLoading ? (\r\n              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\r\n                <CircularProgress />\r\n              </Box>\r\n            ) : (\r\n              <Box \r\n                sx={{ \r\n                  display: 'grid',\r\n                  gridTemplateColumns: {\r\n                    xs: '1fr',\r\n                    sm: 'repeat(2, 1fr)',\r\n                    md: 'repeat(3, 1fr)',\r\n                  },\r\n                  gap: 3,\r\n                }}\r\n              >\r\n                {groups.length > 0 ? (\r\n                  groups.map((group) => {\r\n                    const stats = groupStats[group.id] || {\r\n                      orders: 0,\r\n                      qty: 0,\r\n                      child: 0,\r\n                      totalChild: 2, // Example value\r\n                      pending: 0,\r\n                      completed: 0,\r\n                      rejected: 0,\r\n                      cancelled: 0,\r\n                      failed: 0,\r\n                    };\r\n\r\n                    return (\r\n                      <Card\r\n                        key={group.id}\r\n                        sx={{\r\n                          backgroundColor: theme => theme.palette.mode === 'dark' ? '#1A1C1E' : '#FFFFFF',\r\n                          borderRadius: 1,\r\n                          p: 2,\r\n                          boxShadow: theme => theme.palette.mode === 'dark'\r\n                            ? '0 4px 6px -1px rgba(0, 0, 0, 0.3)'\r\n                            : '0 4px 6px -1px rgba(0, 0, 0, 0.1)',\r\n                          border: theme => theme.palette.mode === 'dark'\r\n                            ? '1px solid rgba(255, 255, 255, 0.1)'\r\n                            : '1px solid rgba(0, 0, 0, 0.1)',\r\n                        }}\r\n                      >\r\n                        {/* Group Name and View Button */}\r\n                        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n                          <Typography variant=\"h6\" sx={{ \r\n                            color: theme => theme.palette.mode === 'dark' ? 'white' : '#1E293B',\r\n                            flex: 1 \r\n                          }}>\r\n                            {group.name}\r\n                          </Typography>\r\n                          <Box sx={{ display: 'flex', gap: 1 }}>\r\n                            <IconButton\r\n                              size=\"small\"\r\n                              sx={{ \r\n                                backgroundColor: theme => theme.palette.mode === 'dark' ? '#3B82F6' : '#2563EB',\r\n                                '&:hover': { \r\n                                  backgroundColor: theme => theme.palette.mode === 'dark' ? '#2563EB' : '#1D4ED8'\r\n                                }\r\n                              }}\r\n                              onClick={() => handleViewGroup(group.id)}\r\n                            >\r\n                              <VisibilityIcon fontSize=\"small\" sx={{ color: 'white' }} />\r\n                            </IconButton>\r\n                            <IconButton\r\n                              size=\"small\"\r\n                              sx={{ \r\n                                backgroundColor: theme => theme.palette.mode === 'dark' ? '#EF4444' : '#DC2626',\r\n                                '&:hover': { \r\n                                  backgroundColor: theme => theme.palette.mode === 'dark' ? '#DC2626' : '#B91C1C'\r\n                                }\r\n                              }}\r\n                              onClick={() => handleDeleteGroup(group.id)}\r\n                            >\r\n                              <DeleteIcon fontSize=\"small\" sx={{ color: 'white' }} />\r\n                            </IconButton>\r\n                          </Box>\r\n                        </Box>\r\n\r\n                        {/* Master Account Selection */}\r\n                        <Box sx={{ mb: 2 }}>\r\n                          <Typography variant=\"body2\" sx={{ \r\n                            color: theme => theme.palette.mode === 'dark' ? '#6B7280' : '#64748B',\r\n                            mb: 1 \r\n                          }}>\r\n                            Master Account\r\n                          </Typography>\r\n                          <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>\r\n                            {group.masterAccountId ? (\r\n                              // Show connected master name\r\n                              <Typography\r\n                                sx={{\r\n                                  flex: 1,\r\n                                  color: theme => theme.palette.mode === 'dark' ? 'white' : '#1E293B',\r\n                                  backgroundColor: theme => theme.palette.mode === 'dark' ? '#2D2D2D' : '#F1F5F9',\r\n                                  padding: '8.5px 14px',\r\n                                  borderRadius: 1,\r\n                                  fontSize: '0.9375rem',\r\n                                }}\r\n                              >\r\n                                {brokerAccounts.find(acc => acc.id === group.masterAccountId)?.name || 'Connected User'}\r\n                              </Typography>\r\n                            ) : (\r\n                              // Show select dropdown when no master is connected\r\n                              <FormControl fullWidth size=\"small\">\r\n                                <Select\r\n                                  value={group.selectedAccountId || ''}\r\n                                  onChange={(e) => handleMasterChange(group.id, e.target.value)}\r\n                                  displayEmpty\r\n                                  sx={{\r\n                                    backgroundColor: theme => theme.palette.mode === 'dark' ? '#2D2D2D' : '#F1F5F9',\r\n                                    color: theme => theme.palette.mode === 'dark' ? 'white' : '#1E293B',\r\n                                    '& .MuiOutlinedInput-notchedOutline': {\r\n                                      borderColor: theme => theme.palette.mode === 'dark'\r\n                                        ? 'rgba(255, 255, 255, 0.23)'\r\n                                        : 'rgba(0, 0, 0, 0.23)',\r\n                                    },\r\n                                    '&:hover .MuiOutlinedInput-notchedOutline': {\r\n                                      borderColor: theme => theme.palette.mode === 'dark'\r\n                                        ? 'rgba(255, 255, 255, 0.4)'\r\n                                        : 'rgba(0, 0, 0, 0.4)',\r\n                                    },\r\n                                  }}\r\n                                >\r\n                                  <MenuItem value=\"\" disabled>Select Master</MenuItem>\r\n                                  {brokerAccounts.map((account) => (\r\n                                    <MenuItem key={account.id} value={account.id}>\r\n                                      {account.name}\r\n                                    </MenuItem>\r\n                                  ))}\r\n                                </Select>\r\n                              </FormControl>\r\n                            )}\r\n                            <IconButton\r\n                              size=\"small\"\r\n                              onClick={() => handleToggleMaster(group.id)}\r\n                              disabled={isTogglingMaster === group.id || (!group.masterAccountId && !group.selectedAccountId)}\r\n                              sx={{ \r\n                                backgroundColor: group.masterAccountId \r\n                                  ? theme => theme.palette.mode === 'dark' ? '#EF4444' : '#DC2626'\r\n                                  : group.selectedAccountId \r\n                                    ? theme => theme.palette.mode === 'dark' ? '#22C55E' : '#16A34A'\r\n                                    : theme => theme.palette.mode === 'dark' ? '#2D2D2D' : '#E2E8F0',\r\n                                '&:hover': { \r\n                                  backgroundColor: group.masterAccountId \r\n                                    ? theme => theme.palette.mode === 'dark' ? '#DC2626' : '#B91C1C'\r\n                                    : group.selectedAccountId \r\n                                      ? theme => theme.palette.mode === 'dark' ? '#16A34A' : '#15803D'\r\n                                      : theme => theme.palette.mode === 'dark' ? '#1F2937' : '#CBD5E1'\r\n                                },\r\n                                '&.Mui-disabled': {\r\n                                  backgroundColor: theme => theme.palette.mode === 'dark' ? '#2D2D2D' : '#E2E8F0',\r\n                                }\r\n                              }}\r\n                            >\r\n                              {isTogglingMaster === group.id ? (\r\n                                <CircularProgress size={24} sx={{ color: 'white' }} />\r\n                              ) : group.masterAccountId ? (\r\n                                <LinkIcon sx={{ color: 'white' }} />\r\n                              ) : (\r\n                                <LinkOffIcon sx={{ color: 'white' }} />\r\n                              )}\r\n                            </IconButton>\r\n                          </Box>\r\n                        </Box>\r\n\r\n                        {/* Trading Toggle */}\r\n                        <Box sx={{ display: 'flex', justifyContent: 'flex-end', mb: 2 }}>\r\n                          <Typography variant=\"body2\" sx={{ \r\n                            color: theme => theme.palette.mode === 'dark' ? '#6B7280' : '#64748B',\r\n                            mr: 1 \r\n                          }}>\r\n                            Trading\r\n                          </Typography>\r\n                          <Switch\r\n                            checked={group.isTradeEnabled}\r\n                            onChange={() => handleToggleTrading(group.id)}\r\n                            disabled={isTogglingTrading === group.id}\r\n                            sx={{\r\n                              '& .MuiSwitch-track': {\r\n                                backgroundColor: theme => theme.palette.mode === 'dark' \r\n                                  ? 'rgba(255, 255, 255, 0.1)' \r\n                                  : 'rgba(0, 0, 0, 0.1)'\r\n                              },\r\n                              '& .Mui-checked + .MuiSwitch-track': {\r\n                                backgroundColor: theme => theme.palette.mode === 'dark' \r\n                                  ? '#22C55E !important' \r\n                                  : '#16A34A !important'\r\n                              },\r\n                              '.MuiSwitch-thumb': {\r\n                                '& .Mui-checked': {\r\n                                  backgroundColor: theme => theme.palette.mode === 'dark' \r\n                                  ? '#4ADE80 !important' \r\n                                  : '#22C55E !important'\r\n                                },\r\n                                backgroundColor: !group.isTradeEnabled ? '#DC2626 !important' : '#22C55E !important'\r\n                                \r\n                              }\r\n                            }}\r\n                          />\r\n                        </Box>\r\n\r\n                        {/* Stats Display */}\r\n                        <Box sx={{ mb: 2 }}>\r\n                          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\r\n                            <Typography variant=\"body2\" sx={{ \r\n                              color: theme => theme.palette.mode === 'dark' ? '#6B7280' : '#64748B'\r\n                            }}>\r\n                              Orders {group.stats?.orders || 0}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" sx={{ \r\n                              color: theme => theme.palette.mode === 'dark' ? '#6B7280' : '#64748B'\r\n                            }}>\r\n                              Qty {group.stats?.qty || 0}\r\n                            </Typography>\r\n                            \r\n                          </Box>\r\n                        </Box>\r\n\r\n                        {/* Status Indicators */}\r\n                        <Box sx={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between',\r\n                          borderTop: theme => theme.palette.mode === 'dark'\r\n                            ? '1px solid rgba(255, 255, 255, 0.1)'\r\n                            : '1px solid rgba(0, 0, 0, 0.1)',\r\n                          pt: 2\r\n                        }}>\r\n                          <Tooltip title=\"Pending\">\r\n                            <Box sx={{ textAlign: 'center' }}>\r\n                              <Typography variant=\"body2\" sx={{ \r\n                                color: theme => theme.palette.mode === 'dark' ? '#FCD34D' : '#D97706'\r\n                              }}>P</Typography>\r\n                              <Typography variant=\"body2\" sx={{ \r\n                                color: theme => theme.palette.mode === 'dark' ? '#FCD34D' : '#D97706'\r\n                              }}>{group.stats?.pending || 0}</Typography>\r\n                            </Box>\r\n                          </Tooltip>\r\n                          <Tooltip title=\"Completed\">\r\n                            <Box sx={{ textAlign: 'center' }}>\r\n                              <Typography variant=\"body2\" sx={{ \r\n                                color: theme => theme.palette.mode === 'dark' ? '#34D399' : '#059669'\r\n                              }}>C</Typography>\r\n                              <Typography variant=\"body2\" sx={{ \r\n                                color: theme => theme.palette.mode === 'dark' ? '#34D399' : '#059669'\r\n                              }}>{group.stats?.completed || 0}</Typography>\r\n                            </Box>\r\n                          </Tooltip>\r\n                          <Tooltip title=\"Rejected\">\r\n                            <Box sx={{ textAlign: 'center' }}>\r\n                              <Typography variant=\"body2\" sx={{ \r\n                                color: theme => theme.palette.mode === 'dark' ? '#EF4444' : '#DC2626'\r\n                              }}>R</Typography>\r\n                              <Typography variant=\"body2\" sx={{ \r\n                                color: theme => theme.palette.mode === 'dark' ? '#EF4444' : '#DC2626'\r\n                              }}>{group.stats?.rejected || 0}</Typography>\r\n                            </Box>\r\n                          </Tooltip>\r\n                          <Tooltip title=\"Cancelled\">\r\n                            <Box sx={{ textAlign: 'center' }}>\r\n                              <Typography variant=\"body2\" sx={{ \r\n                                color: theme => theme.palette.mode === 'dark' ? '#EF4444' : '#DC2626'\r\n                              }}>C</Typography>\r\n                              <Typography variant=\"body2\" sx={{ \r\n                                color: theme => theme.palette.mode === 'dark' ? '#EF4444' : '#DC2626'\r\n                              }}>{group.stats?.cancelled || 0}</Typography>\r\n                            </Box>\r\n                          </Tooltip>\r\n                          <Tooltip title=\"Failed\">\r\n                            <Box sx={{ textAlign: 'center' }}>\r\n                              <Typography variant=\"body2\" sx={{ \r\n                                color: theme => theme.palette.mode === 'dark' ? '#EF4444' : '#DC2626'\r\n                              }}>F</Typography>\r\n                              <Typography variant=\"body2\" sx={{ \r\n                                color: theme => theme.palette.mode === 'dark' ? '#EF4444' : '#DC2626'\r\n                              }}>{group.stats?.failed || 0}</Typography>\r\n                            </Box>\r\n                          </Tooltip>\r\n                        </Box>\r\n                      </Card>\r\n                    );\r\n                  })\r\n                ) : (\r\n                  <Box sx={{ gridColumn: '1 / -1', textAlign: 'center', mt: 4 }}>\r\n                    <Typography variant=\"h6\" color=\"text.secondary\">\r\n                      No groups found. Create a group to get started.\r\n                    </Typography>\r\n                  </Box>\r\n                )}\r\n              </Box>\r\n            )}\r\n          </>\r\n        )}\r\n      </Box>\r\n\r\n      <CreateGroup\r\n        open={isCreateGroupOpen}\r\n        onClose={handleCloseCreateGroup}\r\n        onSubmit={handleCreateGroup}\r\n        brokerAccounts={brokerAccounts}\r\n      />\r\n      <AddChildAccount\r\n        open={isAddChildOpen}\r\n        onClose={() => {\r\n          setIsAddChildOpen(false);\r\n          setSelectedGroupForRefresh(undefined);\r\n        }}\r\n        onSubmit={async (data) => {\r\n          try {\r\n            if (!selectedGroup) return;\r\n            \r\n            const response = await addChildToGroup(selectedGroup.id, data);\r\n            \r\n            if (response.status) {\r\n              snackbar.success('Child account added successfully');\r\n              // Refresh the group children using the provided refresh function\r\n              if (selectedGroupForRefresh) {\r\n                await selectedGroupForRefresh();\r\n              }\r\n            } else {\r\n              snackbar.error(response.message || 'Failed to add child account');\r\n            }\r\n          } catch (error: any) {\r\n            snackbar.error('Error adding child account: ' + error.message);\r\n          } finally {\r\n            setIsAddChildOpen(false);\r\n            setSelectedGroupForRefresh(undefined);\r\n          }\r\n        }}\r\n        brokerAccounts={brokerAccounts}\r\n        excludeAccountIds={[selectedGroup?.masterAccountId || '']}\r\n      />\r\n\r\n      {/* Confirmation Dialog */}\r\n      <Dialog\r\n        open={confirmMasterDialog}\r\n        onClose={() => {\r\n          setConfirmMasterDialog(false);\r\n          setSelectedMasterData(null);\r\n        }}\r\n        PaperProps={{\r\n          style: {\r\n            backgroundColor: '#1E1E1E',\r\n            color: '#FFFFFF',\r\n          },\r\n        }}\r\n      >\r\n        <DialogTitle>\r\n          {selectedMasterData?.action === 'connect' \r\n            ? \"Connect Master Account\" \r\n            : \"Disconnect Master Account\"\r\n          }\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            {selectedMasterData?.action === 'connect'\r\n              ? \"Are you sure you want to make this user as master user?\"\r\n              : \"Are you sure you want to disconnect this master user?\"\r\n            }\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions sx={{ padding: 2 }}>\r\n          <Button\r\n            onClick={() => {\r\n              setConfirmMasterDialog(false);\r\n              setSelectedMasterData(null);\r\n            }}\r\n            variant=\"contained\"\r\n            color=\"error\"\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleConfirmMasterToggle}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Confirm\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Delete Confirmation Dialog */}\r\n      <Dialog\r\n        open={confirmDeleteDialog}\r\n        onClose={() => {\r\n          setConfirmDeleteDialog(false);\r\n          setGroupToDelete(null);\r\n        }}\r\n        PaperProps={{\r\n          style: {\r\n            backgroundColor: '#1E1E1E',\r\n            color: '#FFFFFF',\r\n          },\r\n        }}\r\n      >\r\n        <DialogTitle>Delete Group</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            Are you sure you want to delete this group?\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions sx={{ padding: 2 }}>\r\n          <Button\r\n            onClick={() => {\r\n              setConfirmDeleteDialog(false);\r\n              setGroupToDelete(null);\r\n            }}\r\n            variant=\"contained\"\r\n            color=\"error\"\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleConfirmDelete}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={isSubmitting}\r\n          >\r\n            {isSubmitting ? <CircularProgress size={24} /> : 'Delete'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default GroupManager; ","import React from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  Typography,\r\n  Switch,\r\n  IconButton,\r\n  Stack,\r\n  Grid,\r\n  CircularProgress,\r\n  useTheme\r\n} from '@mui/material';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\n\r\ninterface StatBoxProps {\r\n  label: string;\r\n  value: number;\r\n}\r\n\r\nconst StatBox: React.FC<StatBoxProps> = ({ label, value }) => {\r\n  const theme = useTheme();\r\n  return (\r\n    <Box sx={{ textAlign: 'center' }}>\r\n      <Typography variant=\"body2\" sx={{ \r\n        color: theme.palette.mode === 'dark' ? '#6B7280' : '#64748B'\r\n      }}>\r\n        {label}\r\n      </Typography>\r\n      <Typography variant=\"h6\" sx={{ \r\n        color: theme.palette.mode === 'dark' ? 'white' : '#1E293B',\r\n        mt: 1 \r\n      }}>\r\n        {value}\r\n      </Typography>\r\n    </Box>\r\n  );\r\n};\r\n\r\ninterface BrokerCardProps {\r\n  name: string;\r\n  margin: number;\r\n  isTrading: boolean;\r\n  stats: {\r\n    inGroup?: number;\r\n    pnl?: number;\r\n    margin?: number;\r\n    position?: any;\r\n    orders?: {\r\n      orders?: any;\r\n      total?: number;\r\n      cancelled?: number;\r\n      complete?: number;\r\n      pending?: number;\r\n      rejected?: number;\r\n    };\r\n    pending?: number;\r\n    complete?: number;\r\n    reject?: number;\r\n    cancel?: number;\r\n  };\r\n  onToggleTrading: () => void;\r\n  onRefresh: () => void;\r\n  onDelete: () => void;\r\n  onView: () => void;\r\n  onUpdateQuantity?: () => void;\r\n  isToggling?: boolean;\r\n  isActionButtonVisible?: boolean;\r\n}\r\n\r\nconst BrokerCard: React.FC<BrokerCardProps> = ({\r\n  name,\r\n  margin,\r\n  isTrading,\r\n  stats,\r\n  onToggleTrading,\r\n  onRefresh,\r\n  onDelete,\r\n  onView,\r\n  onUpdateQuantity,\r\n  isToggling = false,\r\n  isActionButtonVisible = true\r\n}) => {\r\n  const theme = useTheme();\r\n  \r\n  return (\r\n    <Card\r\n      sx={{\r\n        backgroundColor: theme.palette.mode === 'dark' ? '#1A1C1E' : '#FFFFFF',\r\n        borderRadius: 1,\r\n        p: 2,\r\n        boxShadow: theme.palette.mode === 'dark' \r\n          ? '0 4px 6px -1px rgba(0, 0, 0, 0.5)' \r\n          : '0 4px 6px -1px rgba(0, 0, 0, 0.1)',\r\n      }}\r\n    >\r\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n        <Box sx={{ display: 'flex', alignItems: 'center', flex: 1 }}>\r\n          <Box\r\n            sx={{\r\n              width: 8,\r\n              height: 8,\r\n              borderRadius: '50%',\r\n              backgroundColor: isTrading ? '#22C55E' : '#DC2626',\r\n              mr: 2,\r\n            }}\r\n          />\r\n          <Typography variant=\"subtitle1\" sx={{ \r\n            color: theme.palette.mode === 'dark' ? '#9CA3AF' : '#64748B',\r\n            flex: 1 \r\n          }}>\r\n            {name}\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\" sx={{ \r\n            color: theme.palette.mode === 'dark' ? 'white' : '#1E293B',\r\n            ml: 1 \r\n          }}>\r\n            Margin {stats.margin}\r\n          </Typography>\r\n        </Box>\r\n      </Box>\r\n\r\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n        <Typography sx={{ \r\n          color: theme.palette.mode === 'dark' ? '#6B7280' : '#64748B',\r\n          mr: 1 \r\n        }}>\r\n          Trading\r\n        </Typography>\r\n        {isToggling ? (\r\n          <CircularProgress size={24} sx={{ color: isTrading ? '#22C55E' : '#DC2626' }} />\r\n        ) : (\r\n          <Switch\r\n            checked={isTrading}\r\n            onChange={onToggleTrading}\r\n            sx={{\r\n              '& .MuiSwitch-thumb': {\r\n                backgroundColor: isTrading ? '#22C55E' : '#DC2626',\r\n              },\r\n              '& .MuiSwitch-track': {\r\n                backgroundColor: isTrading ? '#22C55E !important' : '#DC2626 !important',\r\n              }\r\n            }}\r\n          />\r\n        )}\r\n        <Box sx={{ flex: 1 }} />\r\n        {isActionButtonVisible ? <Stack direction=\"row\" spacing={1}>\r\n          <IconButton\r\n            size=\"small\"\r\n            sx={{ \r\n              backgroundColor: '#706d6d',\r\n              '&:hover': { backgroundColor: '#3e3e3e' }\r\n            }}\r\n            onClick={onUpdateQuantity}\r\n          >\r\n            <EditIcon fontSize=\"small\" sx={{ color: 'white' }} />\r\n          </IconButton>\r\n          <IconButton\r\n            size=\"small\"\r\n            sx={{ \r\n              backgroundColor: '#DC2626',\r\n              '&:hover': { backgroundColor: '#B91C1C' }\r\n            }}\r\n            onClick={onDelete}\r\n          >\r\n            <DeleteIcon fontSize=\"small\" sx={{ color: 'white' }} />\r\n          </IconButton>\r\n          <IconButton\r\n            size=\"small\"\r\n            sx={{ \r\n              backgroundColor: '#F59E0B',\r\n              '&:hover': { backgroundColor: '#D97706' }\r\n            }}\r\n            onClick={onRefresh}\r\n          >\r\n            <RefreshIcon fontSize=\"small\" sx={{ color: 'white' }} />\r\n          </IconButton>\r\n          <IconButton\r\n            size=\"small\"\r\n            sx={{ \r\n              backgroundColor: '#3B82F6',\r\n              '&:hover': { backgroundColor: '#2563EB' }\r\n            }}\r\n            onClick={onView}\r\n          >\r\n            <VisibilityIcon fontSize=\"small\" sx={{ color: 'white' }} />\r\n          </IconButton>\r\n        </Stack> : <Typography variant='h5' sx={{ color: '#0EA5E9',\r\n              fontWeight: 600 \r\n            }}> Master Account</Typography>}\r\n      </Box>\r\n\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={3}>\r\n          <StatBox label=\"In Group\" value={stats.inGroup || 0} />\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <StatBox label=\"P&L\" value={stats.pnl || 0} />\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <StatBox label=\"POS\" value={stats?.position?.length || 0} />\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <StatBox label=\"Orders\" value={stats?.orders?.total || 0} />\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <StatBox label=\"Pending\" value={stats?.orders?.pending || 0} />\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <StatBox label=\"Complete\" value={stats?.orders?.complete || 0} />\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <StatBox label=\"Reject\" value={stats?.orders?.rejected || 0} />\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <StatBox label=\"Cancel\" value={stats?.orders?.cancelled || 0} />\r\n        </Grid>\r\n      </Grid>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default BrokerCard; "],"names":["_ref","open","onClose","onSubmit","brokerAccounts","groupName","setGroupName","useState","_jsxs","Dialog","maxWidth","fullWidth","PaperProps","style","backgroundColor","color","children","_jsx","DialogTitle","Box","display","alignItems","justifyContent","Typography","variant","IconButton","onClick","size","sx","CloseIcon","event","preventDefault","name","members","DialogContent","flexDirection","gap","TextField","label","value","onChange","e","target","required","input","borderColor","DialogActions","padding","Button","textTransform","type","BASE_URL","getBaseUrl","async","getGroups","headers","getRequiredHeaders","response","fetch","method","json","error","console","log","Error","excludeAccountIds","selectedAccount","setSelectedAccount","multiplier","setMultiplier","fixLot","setFixLot","useEffect","handleClose","availableAccounts","filter","account","includes","id","theme","palette","mode","accountId","parseFloat","FormControl","InputLabel","Select","labelId","map","MenuItem","inputProps","min","step","disabled","group","indexType","setIndexType","scriptType","setScriptType","script","setScript","product","setProduct","quantity","setQuantity","orderType","setOrderType","limitPrice","setLimitPrice","triggerPrice","setTriggerPrice","orderAction","setOrderAction","scriptList","setScriptList","isLoading","setIsLoading","snackbar","useSnackbar","fetchScriptList","index","arguments","length","undefined","result","getScriptData","data","optionsData","formattedList","formatStikeList","formatDate","dateStr","day","monthStr","year","split","shortYear","slice","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","stikePriceData","forEach","item","strike","strikePrice","CE","expiryDate","push","PE","CircularProgress","Grid","container","spacing","mt","xs","sm","selected","x","Number","toUpperCase","ToggleButtonGroup","exclusive","val","ToggleButton","px","pb","warning","orderDetails","groupId","body","JSON","stringify","placeMannulOrder","status","success","message","GroupDetailsView","onBack","onAddChild","onToggleMaster","onToggleTrading","isTogglingMaster","isTogglingTrading","masterAccountName","setRefreshFunction","setBrokerAccounts","isCreateOrderOpen","setIsCreateOrderOpen","groupChildren","setGroupChildren","isLoadingChildren","setIsLoadingChildren","togglingAccountId","setTogglingAccountId","tableState","setTableState","activeTab","searchQuery","orderBy","order","tableData","setTableData","positions","orders","trades","navigate","useNavigate","ws","useRef","isExpanded","setIsExpanded","fetchGroupChildren","getGroupChildren","transformedAccounts","dematAccounts","fullName","clientId","isTradeEnable","stats","child","_child$stats","_child$stats2","_child$stats2$orders","_child$stats3","position","Object","values","token","localStorage","getItem","current","close","WebSocket","onopen","onmessage","parse","_data$data","onclose","handleDelete","removeChildFromGroup","handleSquareOffAll","squareOffAllByGroup","handleTabChange","tab","getTableData","lowercaseQuery","toLowerCase","some","String","row","netqty","avgnetprice","sort","a","b","aValue","bValue","isNaN","Date","getTime","aIsOpen","bIsOpen","Math","abs","aTime","exchtime","filltime","SortableTableCell","_ref2","field","TableCell","top","zIndex","borderBottom","cursor","property","isAsc","handleSort","TableSortLabel","active","direction","mb","p","borderRadius","boxShadow","ArrowBackIcon","fontSize","fontWeight","py","handleOpenCreateOrder","Switch","checked","isTradeEnabled","reduce","sum","pos","pnl","ml","toFixed","SyncIcon","_Fragment","border","transition","ExpandLessIcon","ExpandMoreIcon","gridTemplateColumns","md","animation","opacity","transform","BrokerCard","margin","isTrading","find","updateDematAccountTradeToggle","handleToggleTrading","onRefresh","handleRefresh","onDelete","onView","handleView","isToggling","isActionButtonVisible","masterAccountId","overflow","flex","placeholder","minWidth","InputProps","startAdornment","InputAdornment","SearchIcon","orderids","_order$status","orderid","cancelAllOrdersByGroup","handleCancelAllOrders","TableContainer","component","Paper","maxHeight","Table","stickyHeader","TableHead","TableRow","TableBody","_row$transactiontype","_row$transactiontype2","_row$transactiontype3","_row$transactiontype4","_row$status","_row$status2","_row$status3","_row$status4","_row$status5","_row$status6","_row$status7","_row$status8","_row$status9","_row$status10","_row$status11","_row$status12","_row$status13","_row$transactiontype5","_row$transactiontype6","_row$transactiontype7","_row$transactiontype8","hover","squareOffByUser","handleSquareOff","cancelOrderByOrderId","handleCancelOrder","tradingsymbol","producttype","textShadow","cfbuyqty","unrealisedpnl","ltp","transactiontype","price","fillsize","fillprice","colSpan","align","height","CreateOrder","handleCloseCreateOrder","GroupManager","_brokerAccounts$find","isCreateGroupOpen","setIsCreateGroupOpen","groups","setGroups","isSubmitting","setIsSubmitting","groupStats","setGroupStats","setIsTogglingMaster","setIsTogglingTrading","confirmMasterDialog","setConfirmMasterDialog","confirmDeleteDialog","setConfirmDeleteDialog","selectedMasterData","setSelectedMasterData","selectedGroup","setSelectedGroup","isGroupDetailsView","setIsGroupDetailsView","isAddChildOpen","setIsAddChildOpen","selectedGroupForRefresh","setSelectedGroupForRefresh","groupToDelete","setGroupToDelete","fetchData","dematResponse","groupsResponse","Promise","all","getDematAccounts","handleCloseCreateGroup","handleToggleMaster","g","selectedAccountId","action","toggleTrading","React","AdminAppBar","AdminToolbar","title","handleBackToList","acc","fn","tabIndex","startIcon","GroupAddIcon","handleOpenCreateGroup","_brokerAccounts$find2","_group$stats","_group$stats2","_group$stats3","_group$stats4","_group$stats5","_group$stats6","_group$stats7","Card","handleViewGroup","VisibilityIcon","handleDeleteGroup","DeleteIcon","handleMasterChange","displayEmpty","LinkIcon","LinkOffIcon","mr","qty","borderTop","pt","Tooltip","textAlign","pending","completed","rejected","cancelled","failed","gridColumn","CreateGroup","groupData","createGroup","AddChildAccount","childData","addChildToGroup","toggleMaster","deleteGroup","StatBox","useTheme","_stats$position","_stats$orders","_stats$orders2","_stats$orders3","_stats$orders4","_stats$orders5","onUpdateQuantity","width","Stack","EditIcon","RefreshIcon","inGroup","total","complete"],"sourceRoot":""}