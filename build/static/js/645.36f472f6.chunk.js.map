{"version":3,"file":"static/js/645.36f472f6.chunk.js","mappings":"2QAAO,MAsBQA,EAAcC,IACzB,MAAMC,EAAO,IAAIC,KAAKF,GAEhBG,EAAMC,OAAOH,EAAKI,WAAWC,SAAS,EAAG,KACzCC,EAAQH,OAAOH,EAAKO,WAAa,GAAGF,SAAS,EAAG,KAGtD,MAAO,GAFML,EAAKQ,iBAEAF,KAASJ,GAAK,EAGrBO,EAAa,SAACV,GACzB,MAAMC,EAAO,IAAIC,KAAKF,GAKtB,MAAO,GAHOI,OAAOH,EAAKU,YAAYL,SAAS,EAAG,QAClCF,OAAOH,EAAKW,cAAcN,SAAS,EAAG,MAIxD,E,kJC/BF,MAmCA,EAnCwBO,IAAe,IAADC,EAAAC,EAClC,OACAC,EAAAA,EAAAA,MAACC,EAAAA,EAAc,CAACC,UAAWC,EAAAA,EAAMC,SAAA,EAC7BJ,EAAAA,EAAAA,MAACK,EAAAA,EAAK,CAACC,UAAU,MAAMC,QAAS,EAAEH,SAAA,EAC9BJ,EAAAA,EAAAA,MAACQ,EAAAA,EAAU,CAAAJ,SAAA,EAACK,EAAAA,EAAAA,KAAA,KAAAL,SAAG,mBAAkB,IAAEP,EAAMa,KAAKC,gBAC9CX,EAAAA,EAAAA,MAACQ,EAAAA,EAAU,CAAAJ,SAAA,EAACK,EAAAA,EAAAA,KAAA,KAAAL,SAAG,mBAAkB,IAAEP,EAAMa,KAAKE,mBAElDZ,EAAAA,EAAAA,MAACK,EAAAA,EAAK,CAACC,UAAU,MAAMC,QAAS,EAAEH,SAAA,EAC9BJ,EAAAA,EAAAA,MAACQ,EAAAA,EAAU,CAAAJ,SAAA,EAACK,EAAAA,EAAAA,KAAA,KAAAL,SAAG,gBAAe,IAAEP,EAAMa,KAAKG,iBAC3Cb,EAAAA,EAAAA,MAACQ,EAAAA,EAAU,CAAAJ,SAAA,EAACK,EAAAA,EAAAA,KAAA,KAAAL,SAAG,cAAa,IAAEP,EAAMa,KAAKI,kBAE/Cd,EAAAA,EAAAA,MAACe,EAAAA,EAAK,CAACC,GAAI,CAAEC,SAAU,KAAO,aAAW,eAAcb,SAAA,EACrDK,EAAAA,EAAAA,KAACS,EAAAA,EAAS,CAAAd,UACRJ,EAAAA,EAAAA,MAACmB,EAAAA,EAAQ,CAAAf,SAAA,EACPK,EAAAA,EAAAA,KAACW,EAAAA,EAAS,CAAAhB,SAAC,gBACA,QADuBN,EACjCD,EAAMa,YAAI,IAAAZ,GAAY,QAAZC,EAAVD,EAAYuB,kBAAU,IAAAtB,OAAZ,EAAVA,EAAwBuB,KAAI,CAACC,EAAUC,KACtCf,EAAAA,EAAAA,KAACW,EAAAA,EAAS,CAAaK,MAAM,SAAQrB,SAAEV,EAAW6B,EAAKG,gBAAvCF,WAItBf,EAAAA,EAAAA,KAACkB,EAAAA,EAAS,CAAAvB,SACP,CAAC,SAAU,OAAQ,OAAQ,MAAO,SAASkB,KAAKM,IAAK,IAAAC,EAAAC,EAAA,OACpD9B,EAAAA,EAAAA,MAACmB,EAAAA,EAAQ,CAAAf,SAAA,EACPK,EAAAA,EAAAA,KAACW,EAAAA,EAAS,CAACW,MAAO,CAACC,WAAW,QAAQ5B,SAAEwB,IAC7B,QAD+CC,EACzDhC,EAAMa,YAAI,IAAAmB,GAAY,QAAZC,EAAVD,EAAYR,kBAAU,IAAAS,OAAZ,EAAVA,EAAwBR,KAAI,CAACC,EAAUC,KACtCf,EAAAA,EAAAA,KAACW,EAAAA,EAAS,CAAaK,MAAM,SAAQrB,SAAEmB,EAAKK,EAAMK,gBAAlCT,OAHLI,EAKJ,WAIF,E,qCCzBrB,MAgQA,EAhQyBM,KAErB,MAAMC,GAAWC,EAAAA,EAAAA,OACVC,EAAiBC,IAAsBC,EAAAA,EAAAA,UAAc,KACrDC,EAAsBC,IAA2BF,EAAAA,EAAAA,UAAS,KAC1DG,EAAgBC,IAAqBJ,EAAAA,EAAAA,UAAc,KACnDK,EAAsBC,IAA2BN,EAAAA,EAAAA,UAAS,KAE1DO,EAAyBC,IAA8BR,EAAAA,EAAAA,UAAc,KACrES,EAAgBC,IAAqBV,EAAAA,EAAAA,UAAS,KAC9CW,EAAUC,IAAeZ,EAAAA,EAAAA,UAAS,KAClCa,EAASC,IAAgBd,EAAAA,EAAAA,WAAS,IAClCe,EAAcC,IAAmBhB,EAAAA,EAAAA,UAAS,IAAIrD,OAC9CsE,EAAkBC,IAAuBlB,EAAAA,EAAAA,UAAS,IAAIrD,KAAK,EAAG,EAAG,EAAG,EAAG,MACvEwE,EAAgBC,IAAqBpB,EAAAA,EAAAA,UAAS,IAAIrD,KAAK,EAAG,EAAG,EAAG,EAAG,MACnE0E,EAAkBC,IAAuBtB,EAAAA,EAAAA,UAAS,KAyBzDuB,EAAAA,EAAAA,YAAU,KAvBgBC,WACxB,IACI,MACM1B,EADoB2B,KAAKC,MAAMC,aAAaC,QAAQ,2BACYC,EAAAA,EAAAA,MACtE9B,EAAmBD,GACnB6B,aAAaG,QAAQ,kBAAkBL,KAAKM,UAAUjC,IACtDkC,QAAQC,IAAInC,EAAgBoC,MAAMlD,GAAaA,EAAKmD,cAAcC,SAAS,UAC3E5B,EAA2BV,EAAgBuC,QAAQC,GAAeA,EAAOH,cAAcI,SAAS,SACpG,CAAE,MAAOC,GACP5C,EAAS4C,MAAMA,EAAMC,QACvB,GAcAC,EAAmB,GACnB,KAEFnB,EAAAA,EAAAA,YAAU,KACR,IAC8B,QAAzBtB,GACDO,EAA2B,IAC3BA,EAA2BV,EAAgBuC,QAAQC,GAAeA,EAAOH,cAAcI,SAAS,WAEjE,WAAzBtC,GApBauB,WACvB,MAAMmB,QAAmBC,EAAAA,EAAAA,MACzBD,EAAWE,MAAK,CAACC,EAAGC,IACJ,IAAIpG,KAAKmG,EAAEE,MAAM,KAAKC,UAAUC,KAAK,MAAMC,UAC3C,IAAIxG,KAAKoG,EAAEC,MAAM,KAAKC,UAAUC,KAAK,MAAMC,YAG3D/C,EAAkBuC,EAAW,EAczBS,EAEJ,CAAE,MAAOZ,GACP5C,EAAS4C,MAAMA,EAAMC,QACvB,IAEA,CAACxC,IAyBL,OACExC,EAAAA,EAAAA,MAAC4F,EAAAA,SAAc,CAAAxF,SAAA,EACbK,EAAAA,EAAAA,KAACoF,EAAAA,EAAW,CAAAzF,UACVK,EAAAA,EAAAA,KAACqF,EAAAA,EAAY,CAACC,MAAO,kBAEvB/F,EAAAA,EAAAA,MAACgG,EAAAA,EAAI,CAACC,WAAS,EAAC1F,QAAS,EAAEH,SAAA,EACzBJ,EAAAA,EAAAA,MAACgG,EAAAA,EAAI,CAACzE,MAAI,EAAC2E,GAAI,EAAGlF,GAAI,CAAEmF,QAAS,WAAY/F,SAAA,EAC3CJ,EAAAA,EAAAA,MAACoG,EAAAA,EAAS,CACRpF,GAAI,CACFqF,WAAY,OACZC,UAAW,OACXC,OAAQ,cACRC,MAAO,SAETC,OAAO,SACPC,WAAS,EACTC,QAAM,EACNC,MAAO,gBACPC,KAAK,eACLC,MAAOtE,EACPuE,SAAWC,GAAUvE,EAAwBuE,EAAEC,OAAOH,OAAO1G,SAAA,EAE7DK,EAAAA,EAAAA,KAACyG,EAAAA,EAAQ,CAACJ,MAAO,GAAG1G,SAAC,UACrBK,EAAAA,EAAAA,KAACyG,EAAAA,EAAQ,CAAaJ,MAAO,MAAM1G,SAAC,WAArB,QACfK,EAAAA,EAAAA,KAACyG,EAAAA,EAAQ,CAAgBJ,MAAO,SAAS1G,SAAC,WAA3B,aAES,WAAzBoC,IACCxC,EAAAA,EAAAA,MAACoG,EAAAA,EAAS,CACRpF,GAAI,CACFqF,WAAY,OACZC,UAAW,OACXC,OAAQ,cACRC,MAAO,SAETC,OAAO,SACPC,WAAS,EACTC,QAAM,EACNC,MAAO,gBACPC,KAAK,SACLC,MAAOlE,EACPmE,SA/DYI,IACpB,MACMC,EF5EqBC,KAC7B,MAeOlI,EAAKI,EAAO+H,GAAQD,EAAQ9B,MAAM,KACnCgC,EAAYD,EAAKE,MAAM,GAC7B,MAAO,GAAGrI,IAjBS,CACjB,IAAO,MACP,IAAO,MACP,IAAO,MACP,IAAO,MACP,IAAO,MACP,IAAO,MACP,IAAO,MACP,IAAO,MACP,IAAO,MACP,IAAO,MACP,IAAO,MACP,IAAO,OAKcI,KAASgI,GAAW,EE0DtBE,CADAN,EAAMF,OAAOH,OAE1BY,EAAkBrF,EAAgBuC,QAAQC,GAAeA,EAAOH,cAAcC,SAAS,YAAYyC,OACzGvE,EAAwBsE,EAAMF,OAAOH,OACrCvC,QAAQC,IAAIkD,GACZ3E,EAA2B2E,EAAgB,EAyDVtH,SAAA,EAEzBK,EAAAA,EAAAA,KAACyG,EAAAA,EAAQ,CAACJ,MAAO,GAAG1G,SAAC,SACpBsC,EAAepB,KAAKC,IACnBd,EAAAA,EAAAA,KAACyG,EAAAA,EAAQ,CAAYJ,MAAOvF,EAAKnB,SAAEmB,GAApBA,SAKrBvB,EAAAA,EAAAA,MAACoG,EAAAA,EAAS,CACNpF,GAAI,CACFqF,WAAY,OACZC,UAAW,OACXC,OAAQ,cACRC,MAAO,SAETC,OAAO,SACPC,WAAS,EACTC,QAAM,EACNC,MAAO,kBACPC,KAAK,WACLC,MAAOlD,EACPmD,SAAWC,GAAUnD,EAAoBmD,EAAEC,OAAOH,OAAO1G,SAAA,EAEzDK,EAAAA,EAAAA,KAACyG,EAAAA,EAAQ,CAACJ,MAAO,GAAG1G,SAAC,UACrBK,EAAAA,EAAAA,KAACyG,EAAAA,EAAQ,CAACJ,MAAO,aAAa1G,SAAC,cAC/BK,EAAAA,EAAAA,KAACyG,EAAAA,EAAQ,CAACJ,MAAO,cAAc1G,SAAC,iBAEpCJ,EAAAA,EAAAA,MAACoG,EAAAA,EAAS,CACRpF,GAAI,CACFqF,WAAY,OACZC,UAAW,OACXC,OAAQ,cACRC,MAAO,SAETC,OAAO,SACPC,WAAS,EACTC,QAAM,EACNC,MAAO,gBACPC,KAAK,kBACLC,MAAO9D,EACP+D,SAAWI,GAAclE,EAAkBkE,EAAMF,OAAOH,OAAO1G,SAAA,EAE/DK,EAAAA,EAAAA,KAACyG,EAAAA,EAAQ,CAACJ,MAAO,GAAG1G,SAAC,SACG,OAAvB0C,QAAuB,IAAvBA,OAAuB,EAAvBA,EAAyBxB,KAAKC,IAC/Bd,EAAAA,EAAAA,KAACyG,EAAAA,EAAQ,CAEPJ,MAAOvF,EAAKX,YAAYR,SAEvBmB,EAAKmD,eAHDnD,EAAKX,sBAQhBZ,EAAAA,EAAAA,MAACgG,EAAAA,EAAI,CAACzE,MAAI,EAAC2E,GAAI,EAAGlF,GAAI,CAAEmF,QAAS,WAAY/F,SAAA,EAC7CJ,EAAAA,EAAAA,MAAC2H,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAezH,SAAA,EAC9CK,EAAAA,EAAAA,KAACqH,EAAAA,EAAU,CACTlB,MAAM,cACNE,MAAOxD,EACPyD,SAAWgB,IACTxE,EAAgBwE,EAAS,EAE3BC,YAAcC,IACdxH,EAAAA,EAAAA,KAAC2F,EAAAA,EAAS,CAACpF,GAAI,CACbqF,WAAY,OACZC,UAAW,OACXC,OAAQ,cACRC,MAAO,YACFyB,OAETxH,EAAAA,EAAAA,KAACyH,EAAAA,EAAU,CACTtB,MAAM,OACNE,MAAOtD,EACPuD,SAAWgB,IACTtE,EAAoBsE,EAAS,EAE/BC,YAAcC,IACdxH,EAAAA,EAAAA,KAAC2F,EAAAA,EAAS,CACRpF,GAAI,CACJqF,WAAY,OACZC,UAAW,OACXC,OAAQ,cACRC,MAAO,YAELyB,OAENxH,EAAAA,EAAAA,KAACyH,EAAAA,EAAU,CACTtB,MAAM,KACNE,MAAOpD,EACPqD,SAAWgB,IACTpE,EAAkBoE,EAAS,EAE7BC,YAAcC,IACdxH,EAAAA,EAAAA,KAAC2F,EAAAA,EAAS,CACRpF,GAAI,CACJqF,WAAY,OACZC,UAAW,OACXC,OAAQ,cACRC,MAAO,YAELyB,UAGRxH,EAAAA,EAAAA,KAAC0H,EAAAA,EAAa,CACV/E,QAASA,EACTpC,GAAI,CACFqF,WAAY,OACZC,UAAW,OACXC,OAAQ,eAEV6B,QAAQ,WACRC,QArKWtE,UACnB,IACEV,GAAa,GACb,MAAMiF,EAAkB,GAAGvJ,EAAWuE,EAAaiF,mBAAmB7I,EAAW8D,EAAiBgF,cAC5FC,EAAgB,GAAG1J,EAAWuE,EAAaiF,mBAAmB7I,EAAWgE,EAAe8E,cACxFE,QAAeC,EAAAA,EAAAA,IAAaL,EAAUG,EAAQ7E,EAAiBZ,GACrEG,EAAYuF,EACd,CAAE,MAAO3D,GACP5C,EAAS4C,MAAMA,EAAMC,QACvB,CAAC,QACC3B,GAAa,EACf,GA0J8BjD,UAEtBK,EAAAA,EAAAA,KAACmI,EAAAA,EAAU,aAInBnI,EAAAA,EAAAA,KAACuF,EAAAA,EAAI,CAACC,WAAS,EAAC1F,QAAS,EAAEH,UACzBK,EAAAA,EAAAA,KAACuF,EAAAA,EAAI,CAACzE,MAAI,EAAC2E,GAAI,GAAIlF,GAAI,CAAE6H,YAAa,mBAAoBzI,UACxDJ,EAAAA,EAAAA,MAAC8I,EAAAA,EAAI,CAACV,QAAQ,WAAWpH,GAAI,CAAE+H,QAAS,QAAS3I,SAAA,EAC/CK,EAAAA,EAAAA,KAACuI,EAAAA,EAAU,CACTjD,MAAO,8BACP/E,GAAI,CAAE+H,QAAS,sBAEjBtI,EAAAA,EAAAA,KAACwI,EAAAA,EAAW,CAAA7I,SACR8C,IAAYzC,EAAAA,EAAAA,KAACyI,EAAc,CAACxI,KAAMwC,eAK7B,C,+DCzQrB,MAAMiG,GAAWC,E,SAAAA,KACXC,EAAuB,wBACvBC,EAAuB,4BACvBC,EAAiB,qBAGhBxF,eAAeK,IAElB,IACI,MAAMoF,QAAiBC,MAAM,GAAGN,IAAWE,KAE3C,aADmBG,EAASE,QAChBhJ,IAChB,CAAE,MAAOqE,GAEL,MADAR,QAAQC,IAAI,uBAAwBO,GAC9B,IAAI4E,MAAM,uBACpB,CACJ,CAEO5F,eAAeoB,IAElB,IAAK,IAADyE,EAAAC,EAAAC,EAAAC,EACA,MAAMP,QAAiBC,MAAM,GAAGN,IAAWG,gCACrCI,QAAaF,EAASE,OAC5B,MAAO,IAAa,QAAZE,EAAGF,EAAKhJ,YAAI,IAAAkJ,GAAa,QAAbC,EAATD,EAAWI,mBAAW,IAAAH,OAAb,EAATA,EAAwBI,YAAqB,QAAZH,EAAGJ,EAAKhJ,YAAI,IAAAoJ,GAAa,QAAbC,EAATD,EAAWE,mBAAW,IAAAD,OAAb,EAATA,EAAwBG,KAC3E,CAAE,MAAOnF,GAEL,MADAR,QAAQC,IAAI,uBAAwBO,GAC9B,IAAI4E,MAAM,uBACpB,CACJ,CAEO5F,eAAe4E,EAAaL,EAAiBG,EAAe0B,EAAiBC,GAChF,MAAMC,EAAQ,aAAa/B,YAAmBG,cAAmB0B,iBAAwBC,IACzF,IACI,MAAMZ,QAAiBC,MAAM,GAAGN,IAAWI,IAAiBc,KAE5D,aADmBb,EAASE,QAChBhJ,IAChB,CAAE,MAAOqE,GAEL,MADAR,QAAQC,IAAI,uBAAwBO,GAC9B,IAAI4E,MAAM,uBACpB,CACJ,CAEO,MAAMW,EAAyBvG,eAAO9E,GAAkC,IAAxBsL,EAAaC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACnE,IACE,IAAIG,EAAuB,GAC3B,MAAMN,EAAM,SACZ,IAAIO,EAAU3L,EAAKQ,cAAc,KAAKR,EAAKO,WAAa,GAAI,IAAIP,EAAKI,UACnE,MAAMmK,QAAiBC,MAAM,GAAGN,UAA6BkB,IAAQO,KAC/DlB,QAAaF,EAASE,OAY5B,MAVa,IAAVa,EACDb,EAAKmB,UAAUjG,QAAQrD,IAAY,IAADuJ,EAClB,QAAdA,EAAGvJ,EAAKgJ,cAAM,IAAAO,GAAXA,EAAaC,cAAcpG,SAAS4F,EAAOQ,gBAC5CJ,EAAgBK,KAAKzJ,EACvB,IAIFoJ,EAAkBjB,EAAKmB,UAElBF,CAET,CAAE,MAAO5F,GAEP,MADAR,QAAQC,IAAI,uBAAwBO,GAC9B,IAAI4E,MAAM,uBAClB,CACN,C","sources":["bankNifty/helper/formatDateHelper.ts","bankNifty/components/FRVPPivotTable.tsx","bankNifty/pages/BankNiftyTrading.tsx","bankNifty/hooks/bankNiftyServices.tsx"],"sourcesContent":["export const formatExpiryDate = (dateStr:string) => {\r\n    const months:any = {\r\n      \"Jan\": \"JAN\",\r\n      \"Feb\": \"FEB\",\r\n      \"Mar\": \"MAR\",\r\n      \"Apr\": \"APR\",\r\n      \"May\": \"MAY\",\r\n      \"Jun\": \"JUN\",\r\n      \"Jul\": \"JUL\",\r\n      \"Aug\": \"AUG\",\r\n      \"Sep\": \"SEP\",\r\n      \"Oct\": \"OCT\",\r\n      \"Nov\": \"NOV\",\r\n      \"Dec\": \"DEC\"\r\n    };\r\n  \r\n    const [day, month, year] = dateStr.split('-');\r\n    const shortYear = year.slice(2); // Get last two digits of the year\r\n    return `${day}${months[month]}${shortYear}`;\r\n  };\r\n\r\n\r\n  export const formatDate = (isoString:string) => {\r\n    const date = new Date(isoString);\r\n    \r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // getMonth() is zero-based\r\n    const year = date.getFullYear();\r\n    \r\n    return `${year}-${month}-${day}`;\r\n  };\r\n\r\n  export const formatTime = (isoString:string, isTime=false) => {\r\n    const date = new Date(isoString);\r\n    \r\n    const hours = String(date.getHours()).padStart(2, '0');\r\n    const minutes = String(date.getMinutes()).padStart(2, '0');\r\n        \r\n    return `${hours}:${minutes}`;\r\n    \r\n  };\r\n  \r\n  ","\r\nimport React from 'react';\r\nimport {\r\n  Table, TableBody, TableCell, TableContainer,\r\n  TableHead, TableRow, Paper, Typography, Box,\r\n  Stack\r\n} from '@mui/material';\r\nimport { formatTime } from '../helper/formatDateHelper';\r\n\r\nconst FRVPPivotTable = (props:any) => {\r\n    return (\r\n    <TableContainer component={Paper}>\r\n        <Stack direction='row' spacing={2}>\r\n            <Typography><b>Counted FRVP: </b> {props.data.countedFRVP}</Typography>\r\n            <Typography><b>Symbol Token: </b> {props.data.symboltoken}</Typography>\r\n        </Stack>\r\n        <Stack direction='row' spacing={2}>\r\n            <Typography><b>From Date: </b> {props.data.fromDateTime}</Typography>\r\n            <Typography><b>To Date: </b> {props.data.toDateTime}</Typography>\r\n        </Stack>\r\n      <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Candle Time</TableCell>\r\n            {props.data?.candelData?.map((item:any, index:any) => (\r\n              <TableCell key={index} align=\"center\">{formatTime(item.bankNiftyTime)}</TableCell>\r\n            ))}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {['volume', 'open', 'high', 'low', 'close'].map((field) => (\r\n            <TableRow key={field}>\r\n              <TableCell style={{fontWeight:'bold'}}>{field}</TableCell>\r\n              {props.data?.candelData?.map((item:any, index:any) => (\r\n                <TableCell key={index} align=\"center\">{item[field.toLowerCase()]}</TableCell>\r\n              ))}\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default FRVPPivotTable;","\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\nimport AdminAppBar from \"../../admin/components/AdminAppBar\";\r\nimport AdminToolbar from \"../../admin/components/AdminToolbar\";\r\nimport { Button, Card, CardContent, CardHeader, Grid, MenuItem, TextField } from \"@material-ui/core\";\r\nimport { getBankNiftyExpiryList, getFRVPCount, getSymbolTokenList } from \"../hooks/bankNiftyServices\";\r\nimport { useSnackbar } from \"../../core/contexts/SnackbarProvider\";\r\nimport { SymbolTokens } from \"../types/symbolTokens\";\r\nimport { formatDate,formatTime, formatExpiryDate } from \"../helper/formatDateHelper\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport { LoadingButton, TimePicker } from \"@material-ui/lab\";\r\nimport FRVPPivotTable from \"../components/FRVPPivotTable\";\r\nimport {LocalizationProvider, DatePicker} from \"@material-ui/lab\";\r\nimport AdapterDateFns from \"@material-ui/lab/AdapterDateFns\";\r\n\r\nconst BankNiftyTrading = () =>{\r\n\r\n    const snackbar = useSnackbar();\r\n    const [symbolTokenList, setSymbolTokenList] = useState<any>([]);\r\n    const [selectedMarketOption, setSelectedMarketOption] = useState('');\r\n    const [expiryDateList, setExpiryDateList] = useState<any>([]);\r\n    const [selectedExpiryOption, setSelectedExpiryOption] = useState('');\r\n\r\n    const [filteredSymbolTokenList, setFilteredSymbolTokenList] = useState<any>([]);\r\n    const [selectedOption, setSelectedOption] = useState('');\r\n    const [frvpData, setFRVPData] = useState([]);\r\n    const [loading, setIsLoading] = useState(false);\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [selectedFromTime, setSelectedFromTime] = useState(new Date(0, 0, 0, 9, 15));\r\n    const [selectedToTime, setSelectedToTime] = useState(new Date(0, 0, 0, 9, 25));\r\n    const [selectedInterval, setSelectedInterval] = useState('');\r\n\r\n    const fetchSymbolTokens = async () => {\r\n      try {\r\n          const lsSymbolTokenList = JSON.parse(localStorage.getItem('symbolTokenList')!);\r\n          const symbolTokenList = lsSymbolTokenList ? lsSymbolTokenList : await getSymbolTokenList();\r\n          setSymbolTokenList(symbolTokenList);\r\n          localStorage.setItem('symbolTokenList',JSON.stringify(symbolTokenList));\r\n          console.log(symbolTokenList.find((item:any) => item.tradingsymbol.includes('FUT')));\r\n          setFilteredSymbolTokenList(symbolTokenList.filter((record:any) => record.tradingsymbol.endsWith(\"FUT\")));\r\n      } catch (error: any) {\r\n        snackbar.error(error.message);\r\n      }\r\n    };\r\n\r\n    const fetchExpiryDates = async() =>{\r\n      const expiryList = await getBankNiftyExpiryList();\r\n      expiryList.sort((a, b) => {\r\n        const dateA = new Date(a.split('-').reverse().join('-')).getTime();\r\n        const dateB = new Date(b.split('-').reverse().join('-')).getTime();\r\n        return dateA - dateB;\r\n      });\r\n      setExpiryDateList(expiryList);\r\n    } \r\n\r\n    useEffect(()=>{\r\n      fetchSymbolTokens();\r\n    },[]);\r\n\r\n    useEffect(()=>{\r\n      try {\r\n        if(selectedMarketOption === 'FUT'){\r\n          setFilteredSymbolTokenList([]);\r\n          setFilteredSymbolTokenList(symbolTokenList.filter((record:any) => record.tradingsymbol.endsWith(\"FUT\")));\r\n        }\r\n        else if(selectedMarketOption === 'STRIKE'){\r\n          fetchExpiryDates();\r\n        }  \r\n      } catch (error:any) {\r\n        snackbar.error(error.message);\r\n      }\r\n      \r\n    },[selectedMarketOption]);\r\n\r\n    const onExpiryChange=(event:any)=>{\r\n      const expiryDate = event.target.value;\r\n      const targetDate = formatExpiryDate(expiryDate);\r\n      const filteredRecords = symbolTokenList.filter((record:any) => record.tradingsymbol.includes(`BANKNIFTY${targetDate}`));\r\n      setSelectedExpiryOption(event.target.value);\r\n      console.log(filteredRecords);\r\n      setFilteredSymbolTokenList(filteredRecords);\r\n    }\r\n\r\n    const onFRVPsearch = async () =>{\r\n      try {\r\n        setIsLoading(true);\r\n        const fromDate:string = `${formatDate(selectedDate.toDateString())} ${formatTime(selectedFromTime.toString())}`;\r\n        const toDate:string = `${formatDate(selectedDate.toDateString())} ${formatTime(selectedToTime.toString())}`;\r\n        const result = await getFRVPCount(fromDate, toDate, selectedInterval,selectedOption);\r\n        setFRVPData(result);\r\n      } catch (error:any) {\r\n        snackbar.error(error.message);\r\n      }finally{\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n\r\n  return(\r\n    <React.Fragment>\r\n      <AdminAppBar>\r\n        <AdminToolbar title={\"Bank Nifty\"}></AdminToolbar>\r\n      </AdminAppBar>\r\n      <Grid container spacing={2}>\r\n        <Grid item sm={8} sx={{ display: \"content\" }}>\r\n          <TextField\r\n            sx={{\r\n              marginLeft: \"10px\",\r\n              marginTop: \"15px\",\r\n              height: \"fit-content\",\r\n              width: \"150px\",\r\n            }}\r\n            margin=\"normal\"\r\n            fullWidth\r\n            select\r\n            label={\"Select Market\"}\r\n            name=\"bankNiftyF&O\"\r\n            value={selectedMarketOption}\r\n            onChange={(e:any) => setSelectedMarketOption(e.target.value)}\r\n          >\r\n            <MenuItem value={\"\"}>None</MenuItem>\r\n            <MenuItem key={\"FUT\"} value={'FUT'}>Futures</MenuItem>\r\n            <MenuItem key={\"STRIKE\"} value={'STRIKE'}>Strikes</MenuItem>\r\n          </TextField>\r\n          {selectedMarketOption === 'STRIKE' && \r\n            <TextField\r\n              sx={{\r\n                marginLeft: \"10px\",\r\n                marginTop: \"15px\",\r\n                height: \"fit-content\",\r\n                width: \"150px\",\r\n              }}\r\n              margin=\"normal\"\r\n              fullWidth\r\n              select\r\n              label={\"Select Expiry\"}\r\n              name=\"expiry\"\r\n              value={selectedExpiryOption}\r\n              onChange={onExpiryChange}\r\n            >\r\n              <MenuItem value={\"\"}>None</MenuItem>\r\n              {expiryDateList.map((item:any)=>(\r\n                <MenuItem key={item} value={item}>{item}</MenuItem>\r\n              ))}\r\n              \r\n            </TextField>\r\n          }\r\n          <TextField\r\n              sx={{\r\n                marginLeft: \"10px\",\r\n                marginTop: \"15px\",\r\n                height: \"fit-content\",\r\n                width: \"150px\",\r\n              }}\r\n              margin=\"normal\"\r\n              fullWidth\r\n              select\r\n              label={\"Select interval\"}\r\n              name=\"interval\"\r\n              value={selectedInterval}\r\n              onChange={(e:any) => setSelectedInterval(e.target.value)}\r\n            >\r\n              <MenuItem value={\"\"}>None</MenuItem>\r\n              <MenuItem value={\"ONE_MINUTE\"}>1 Minute</MenuItem>\r\n              <MenuItem value={\"FIVE_MINUTE\"}>5 Minute</MenuItem>\r\n            </TextField>\r\n          <TextField\r\n            sx={{\r\n              marginLeft: \"10px\",\r\n              marginTop: \"15px\",\r\n              height: \"fit-content\",\r\n              width: \"150px\",\r\n            }}\r\n            margin=\"normal\"\r\n            fullWidth\r\n            select\r\n            label={\"Select Option\"}\r\n            name=\"bankNiftyTokens\"\r\n            value={selectedOption}\r\n            onChange={(event:any) => setSelectedOption(event.target.value)}\r\n          >\r\n            <MenuItem value={\"\"}>None</MenuItem>\r\n            {filteredSymbolTokenList?.map((item:any) => (\r\n            <MenuItem\r\n              key={item.symboltoken}\r\n              value={item.symboltoken}\r\n            >\r\n              {item.tradingsymbol}\r\n            </MenuItem>\r\n          ))}\r\n          </TextField>\r\n        </Grid>\r\n        <Grid item sm={8} sx={{ display: \"content\" }}>\r\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n            <DatePicker\r\n              label=\"Select Date\"\r\n              value={selectedDate}\r\n              onChange={(newValue:any) => {\r\n                setSelectedDate(newValue);\r\n              }}\r\n              renderInput={(params:any) => \r\n              <TextField sx={{\r\n                marginLeft: \"10px\",\r\n                marginTop: \"15px\",\r\n                height: \"fit-content\",\r\n                width: \"150px\",\r\n              }} {...params} />}\r\n            />\r\n            <TimePicker\r\n              label=\"From\"\r\n              value={selectedFromTime}\r\n              onChange={(newValue:any) => {\r\n                setSelectedFromTime(newValue);\r\n              }}\r\n              renderInput={(params:any) => \r\n              <TextField\r\n                sx={{\r\n                marginLeft: \"10px\",\r\n                marginTop: \"15px\",\r\n                height: \"fit-content\",\r\n                width: \"150px\",\r\n                }} \r\n              {...params} />}\r\n            />\r\n            <TimePicker\r\n              label=\"To\"\r\n              value={selectedToTime}\r\n              onChange={(newValue:any) => {\r\n                setSelectedToTime(newValue);\r\n              }}\r\n              renderInput={(params:any) => \r\n              <TextField \r\n                sx={{\r\n                marginLeft: \"10px\",\r\n                marginTop: \"15px\",\r\n                height: \"fit-content\",\r\n                width: \"150px\",\r\n                }}\r\n              {...params} />}\r\n            />\r\n          </LocalizationProvider>\r\n          <LoadingButton\r\n              loading={loading}\r\n              sx={{\r\n                marginLeft: \"10px\",\r\n                marginTop: \"15px\",\r\n                height: \"fit-content\",\r\n              }}\r\n              variant=\"outlined\"\r\n              onClick={onFRVPsearch}\r\n            >\r\n              <SearchIcon />\r\n          </LoadingButton>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={2}>\r\n        <Grid item sm={12} sx={{ paddingLeft: \"20px !important\" }}>\r\n          <Card variant=\"outlined\" sx={{ padding: \"20px\" }}>\r\n            <CardHeader\r\n              title={`Fixed Range Volume Profile:`}\r\n              sx={{ padding: \"5px 24px 0 24px\" }}\r\n            ></CardHeader>\r\n            <CardContent>\r\n              { frvpData && <FRVPPivotTable data={frvpData}/>}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default BankNiftyTrading;","import {getBaseUrl} from '../../http/globalUrl'\r\n\r\nconst BASE_URL = getBaseUrl();\r\nconst GET_SYMBOL_TOKEN_LIST ='orders/getSymbolToken';\r\nconst GET_OPTION_CHAIN_LIST ='orders/getOptionChainData';\r\nconst GET_FRVP_COUNT = 'orders/getPrevData';\r\nconst GET_ORDERS_DATA = 'orders';\r\n\r\nexport async function getSymbolTokenList(){\r\n\r\n    try {\r\n        const response = await fetch(`${BASE_URL}${GET_SYMBOL_TOKEN_LIST}`);\r\n        const json = await response.json();\r\n        return json.data;\r\n    } catch (error) {\r\n        console.log('Error fetching data:', error);\r\n        throw new Error('Failed to fetch data');\r\n    }\r\n}\r\n\r\nexport async function getBankNiftyExpiryList(){\r\n\r\n    try {\r\n        const response = await fetch(`${BASE_URL}${GET_OPTION_CHAIN_LIST}?symbol=BANKNIFTY&index=NFO`);\r\n        const json = await response.json();\r\n        return [...json.data?.expiryDates?.monthEnd,...json.data?.expiryDates?.week];\r\n    } catch (error) {\r\n        console.log('Error fetching data:', error);\r\n        throw new Error('Failed to fetch data');\r\n    }\r\n}\r\n\r\nexport async function getFRVPCount(fromDate:string, toDate:string, interval:string, symbolToken:string){\r\n    const query = `?fromDate=${fromDate}&toDate=${toDate}&interval=${interval}&symbolToken=${symbolToken}`;\r\n    try {\r\n        const response = await fetch(`${BASE_URL}${GET_FRVP_COUNT}${query}`);\r\n        const json = await response.json();\r\n        return json.data;\r\n    } catch (error) {\r\n        console.log('Error fetching data:', error);\r\n        throw new Error('Failed to fetch data');\r\n    }\r\n}\r\n\r\nexport const FetchOrdersDataService = async (date:Date,symbol:string = '') => {\r\n    try {\r\n      let ordersDataFinal: any = []; \r\n      const query='?date=';\r\n      let strDate = date.getFullYear()+'-'+(date.getMonth() + 1) +'-'+date.getDate();\r\n        const response = await fetch(`${BASE_URL}${GET_ORDERS_DATA}${query}${strDate}`);\r\n        const json = await response.json();\r\n        \r\n        if(symbol != \"\"){\r\n          json.orderData.filter((item:any)=>{\r\n            if(item.symbol?.toUpperCase().includes(symbol.toUpperCase())){\r\n              ordersDataFinal.push(item);\r\n            }\r\n          });\r\n        }\r\n        else{\r\n          ordersDataFinal = json.orderData;\r\n        }\r\n        return ordersDataFinal;\r\n\r\n      } catch (error) {\r\n        console.log('Error fetching data:', error);\r\n        throw new Error('Failed to fetch data');\r\n      }\r\n};\r\n\r\n\r\n\r\n\r\n"],"names":["formatDate","isoString","date","Date","day","String","getDate","padStart","month","getMonth","getFullYear","formatTime","getHours","getMinutes","props","_props$data","_props$data$candelDat","_jsxs","TableContainer","component","Paper","children","Stack","direction","spacing","Typography","_jsx","data","countedFRVP","symboltoken","fromDateTime","toDateTime","Table","sx","minWidth","TableHead","TableRow","TableCell","candelData","map","item","index","align","bankNiftyTime","TableBody","field","_props$data2","_props$data2$candelDa","style","fontWeight","toLowerCase","BankNiftyTrading","snackbar","useSnackbar","symbolTokenList","setSymbolTokenList","useState","selectedMarketOption","setSelectedMarketOption","expiryDateList","setExpiryDateList","selectedExpiryOption","setSelectedExpiryOption","filteredSymbolTokenList","setFilteredSymbolTokenList","selectedOption","setSelectedOption","frvpData","setFRVPData","loading","setIsLoading","selectedDate","setSelectedDate","selectedFromTime","setSelectedFromTime","selectedToTime","setSelectedToTime","selectedInterval","setSelectedInterval","useEffect","async","JSON","parse","localStorage","getItem","getSymbolTokenList","setItem","stringify","console","log","find","tradingsymbol","includes","filter","record","endsWith","error","message","fetchSymbolTokens","expiryList","getBankNiftyExpiryList","sort","a","b","split","reverse","join","getTime","fetchExpiryDates","React","AdminAppBar","AdminToolbar","title","Grid","container","sm","display","TextField","marginLeft","marginTop","height","width","margin","fullWidth","select","label","name","value","onChange","e","target","MenuItem","event","targetDate","dateStr","year","shortYear","slice","formatExpiryDate","filteredRecords","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","newValue","renderInput","params","TimePicker","LoadingButton","variant","onClick","fromDate","toDateString","toString","toDate","result","getFRVPCount","SearchIcon","paddingLeft","Card","padding","CardHeader","CardContent","FRVPPivotTable","BASE_URL","getBaseUrl","GET_SYMBOL_TOKEN_LIST","GET_OPTION_CHAIN_LIST","GET_FRVP_COUNT","response","fetch","json","Error","_json$data","_json$data$expiryDate","_json$data2","_json$data2$expiryDat","expiryDates","monthEnd","week","interval","symbolToken","query","FetchOrdersDataService","symbol","arguments","length","undefined","ordersDataFinal","strDate","orderData","_item$symbol","toUpperCase","push"],"sourceRoot":""}