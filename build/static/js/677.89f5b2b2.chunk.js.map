{"version":3,"file":"static/js/677.89f5b2b2.chunk.js","mappings":"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","sources":["AlgoTrading/hooks/strategyService.ts","AlgoTrading/Components/CreateStrategyDialog.tsx","AlgoTrading/Components/StrategyWebsocketData.tsx","AlgoTrading/pages/Strategies.tsx","candleOperations/hooks/candleServices.tsx"],"sourcesContent":["import { IndicatorsResponse } from '../types/strategy';\r\nimport { getBaseUrl } from '../../http/globalUrl';\r\nimport { getRequiredHeaders } from '../../services/userService';\r\n\r\n\r\nconst BASE_URL = getBaseUrl();\r\nconst GET_INDICATOS = 'strategies/indicators';\r\nconst POST_CREATE_STRATEGY = 'strategies/createStrategy';\r\nconst GET_STRATEGIES = 'strategies/getStrategies';\r\nconst DELETE_STRATEGY = 'strategies/deleteStrategy';\r\nconst DEPLOY_STRATEGY = 'strategies/deployStrategy';\r\nconst STOP_STRATEGY = 'strategies/stopStrategy';\r\nconst UPDATE_STRATEGY = 'strategies/updateStrategy';\r\n\r\nexport const fetchIndicators = async (): Promise<IndicatorsResponse> => {\r\n    const response = await fetch(`${BASE_URL}${GET_INDICATOS}`,{\r\n        method: 'GET',\r\n        headers: await getRequiredHeaders()\r\n    });\r\n    return response.json();\r\n};\r\n\r\nexport const createStrategy = async (strategyData: any): Promise<any> => {\r\n    const response = await fetch(`${BASE_URL}${POST_CREATE_STRATEGY}`, {\r\n        method: 'POST',\r\n        headers: await getRequiredHeaders(),\r\n        body: JSON.stringify(strategyData)\r\n    });\r\n    return response.json();\r\n};\r\n\r\nexport const fetchStrategies = async () => {\r\n    const response = await fetch(`${BASE_URL}${GET_STRATEGIES}`, {\r\n        method: 'GET',\r\n        headers: await getRequiredHeaders()\r\n    });\r\n\r\n    return response.json();\r\n};\r\n\r\nexport const deleteStrategy = async (id: string) => {\r\n    const response = await fetch(`${BASE_URL}${DELETE_STRATEGY}/${id}`, {\r\n        method: 'DELETE',\r\n        headers: await getRequiredHeaders()\r\n    });\r\n    \r\n    return response.json();\r\n};\r\n\r\nexport const deployStrategy = async (id: string) => {\r\n    const response = await fetch(`${BASE_URL}${DEPLOY_STRATEGY}/${id}`, {\r\n        method: 'POST',\r\n        headers: await getRequiredHeaders()\r\n    });\r\n\r\n    return response.json();\r\n};\r\n\r\nexport const stopStrategy = async (id: string) => {\r\n    const response = await fetch(`${BASE_URL}${STOP_STRATEGY}/${id}`, {\r\n        method: 'POST',\r\n        headers: await getRequiredHeaders()\r\n    });\r\n    \r\n    if (!response.ok) {\r\n        throw new Error('Failed to stop strategy');\r\n    }\r\n\r\n    return response.json();\r\n};\r\n\r\nexport const updateStrategy = async (id: string, strategyData: any): Promise<any> => {\r\n    const response = await fetch(`${BASE_URL}${UPDATE_STRATEGY}/${id}`, {\r\n        method: 'PUT',\r\n        headers: await getRequiredHeaders(),\r\n        body: JSON.stringify(strategyData)\r\n    });\r\n    \r\n    if (!response.ok) {\r\n        throw new Error('Failed to update strategy');\r\n    }\r\n\r\n    return response.json();\r\n};","import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    TextField,\r\n    Button,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    Typography,\r\n    Box,\r\n    SelectChangeEvent,\r\n    FormControlLabel\r\n} from '@mui/material';\r\nimport { IndicatorsResponse, StrategyData } from '../types/strategy';\r\nimport { fetchIndicators } from '../hooks/strategyService';\r\nimport { useSnackbar } from '../../core/contexts/SnackbarProvider';\r\nimport { set } from 'date-fns';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\ninterface CreateStrategyDialogProps {\r\n    open: boolean;\r\n    strategyData?: StrategyData;\r\n    onClose: () => void;\r\n    onSubmit: (strategyData: StrategyData) => void;\r\n}\r\n\r\nexport default function CreateStrategyDialog({ open, onClose, onSubmit, strategyData }: CreateStrategyDialogProps) {\r\n    const snackbar = useSnackbar();\r\n    const intervalOptions = [\r\n        { value: 'ONE_MINUTE', label: '1 Minute' },\r\n        { value: 'FIVE_MINUTE', label: '5 Minutes' },\r\n        { value: 'FIFTEEN_MINUTE', label: '15 Minutes' },\r\n        { value: 'ONE_HOUR', label: '1 Hour' },\r\n        { value: 'ONE_DAY', label: '1 Day' }\r\n    ];\r\n\r\n    const indexOptions = [\r\n        { value: 'NIFTY 50', label: 'NIFTY' },\r\n        { value: 'BANKNIFTY', label: 'Bank Nifty' },\r\n        { value: 'FINNIFTY', label: 'Fin Nifty' }\r\n    ];\r\n    const [loading, setLoading] = useState(false);\r\n    const [indicators, setIndicators] = useState<IndicatorsResponse['indicators']>({});\r\n    const [selectedIndicator, setSelectedIndicator] = useState<string>('');\r\n    const [strategyName, setStrategyName] = useState('');\r\n    const [strategyDescription, setStrategyDescription] = useState('');\r\n    const [parameters, setParameters] = useState<Record<string, any>>({\r\n        minContractPrice: 150,\r\n        maxContractPrice: 200\r\n    });\r\n    const isEditMode = !!strategyData;\r\n\r\n    useEffect(() => {\r\n        const loadIndicators = async () => {\r\n            try {\r\n                setLoading(true);\r\n                const response = await fetchIndicators();\r\n                if (!response.status) {\r\n                    snackbar.error (response.message);\r\n                }\r\n                setIndicators(response.indicators);\r\n            } catch (error) {\r\n                console.error('Error loading indicators:', error);\r\n                snackbar.error('Failed to load indicators');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        if (open) {\r\n            loadIndicators();\r\n        }\r\n        if (isEditMode && strategyData) {\r\n            setStrategyName(strategyData.name);\r\n            setStrategyDescription(strategyData.description);\r\n            setSelectedIndicator(strategyData.indicator);\r\n            \r\n            setParameters(strategyData.parameters || {\r\n                minContractPrice: 150,\r\n                maxContractPrice: 200,\r\n                useStopLoss: false,\r\n                stopLossPoints: null,\r\n                targetPoints: null,\r\n            });\r\n        } else {\r\n            resetForm();\r\n        }\r\n    }, [open, snackbar, strategyData]);\r\n\r\n    const handleIndicatorChange = (event: SelectChangeEvent) => {\r\n        const value = event.target.value;\r\n        setSelectedIndicator(value);\r\n        \r\n        // Reset parameters when indicator changes but preserve price range\r\n        const { minContractPrice, maxContractPrice, interval, index, useStopLoss, stopLossPoints, targetPoints } = parameters;\r\n        const defaultParams: Record<string, number | null> = {\r\n            minContractPrice,\r\n            maxContractPrice,\r\n            interval,\r\n            index,\r\n            useStopLoss,\r\n            stopLossPoints,\r\n            targetPoints\r\n        };\r\n        // If an indicator is selected, load its default parameters\r\n        if (value && indicators[value]) {\r\n            indicators[value].parameters.forEach(param => {\r\n                defaultParams[param.name] = param.default;\r\n            });\r\n        }\r\n        setParameters(defaultParams);\r\n    };\r\n\r\n    const handleParameterChange = (paramName: string, value: any) => {\r\n        setParameters(prev => ({\r\n            ...prev,\r\n            [paramName]: isNaN(value) ? value : Number(value)\r\n        }));\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        \r\n        if(parameters.useStopLoss){\r\n            const { stopLossPoints, targetPoints } = parameters;\r\n            if (stopLossPoints == null || targetPoints == null || stopLossPoints < 0 || targetPoints < 0) {\r\n                snackbar.error(\"Please enter valid stop loss and target points.\");\r\n                return;\r\n            }\r\n        }\r\n        \r\n        const strategyData: StrategyData = {\r\n            name: strategyName,\r\n            description: strategyDescription,\r\n            indicator: selectedIndicator,\r\n            parameters: parameters\r\n        };\r\n        onSubmit(strategyData);\r\n        resetForm();\r\n        onClose();\r\n    };\r\n\r\n    const resetForm = () => {\r\n        setStrategyName('');\r\n        setStrategyDescription('');\r\n        setSelectedIndicator('');\r\n        setParameters({\r\n            minContractPrice: 150,\r\n            maxContractPrice: 200,\r\n            useStopLoss: false,\r\n            stopLossPoints: null,\r\n            targetPoints: null,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose} maxWidth=\"sm\" fullWidth>\r\n            <DialogTitle>{isEditMode ? 'Edit Strategy' : 'Create New Strategy'}</DialogTitle>\r\n            <DialogContent>\r\n                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 2 }}>\r\n                    <TextField\r\n                        label=\"Strategy Name\"\r\n                        fullWidth\r\n                        value={strategyName}\r\n                        onChange={(e) => setStrategyName(e.target.value)}\r\n                        required\r\n                    />\r\n                    \r\n                    <TextField\r\n                        label=\"Strategy Description\"\r\n                        sx={{ mt: 2 }}\r\n                        fullWidth\r\n                        multiline\r\n                        rows={3}\r\n                        value={strategyDescription}\r\n                        onChange={(e) => setStrategyDescription(e.target.value)}\r\n                        required\r\n                    />\r\n\r\n                    <Box sx={{ display: 'flex', gap: 2, mt: 2 }}>\r\n                        <TextField\r\n                            label=\"Min Contract Price\"\r\n                            type=\"number\"\r\n                            value={parameters.minContractPrice ?? ''}\r\n                            onChange={(e) => {\r\n                                const value = e.target.value;\r\n                                handleParameterChange('minContractPrice', Number(value));\r\n                            }}\r\n                            fullWidth\r\n                            required\r\n                            inputProps={{ min: 0 }}\r\n                        />\r\n                        <TextField\r\n                            label=\"Max Contract Price\"\r\n                            type=\"number\"\r\n                            value={parameters.maxContractPrice ?? ''}\r\n                            onChange={(e) => {\r\n                                const value = e.target.value;\r\n                                handleParameterChange('maxContractPrice', Number(value));\r\n                            }}\r\n                            fullWidth\r\n                            required\r\n                            inputProps={{ min: parameters.minContractPrice || 0 }}\r\n                            error={parameters.maxContractPrice != null && parameters.minContractPrice != null && parameters.maxContractPrice <= parameters.minContractPrice}\r\n                            helperText={parameters.maxContractPrice != null && parameters.minContractPrice != null && parameters.maxContractPrice <= parameters.minContractPrice \r\n                                ? \"Max price must be greater than min price\" \r\n                                : \"\"}\r\n                        />\r\n                    </Box>\r\n\r\n                    <Box sx={{ display: 'flex', gap: 2, mt: 2 }}>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={parameters.useStopLoss}\r\n                                    onChange={(e:any) => handleParameterChange('useStopLoss',e.target.checked)}\r\n                                />\r\n                            }\r\n                            label=\"Use Stop Loss\"\r\n                        />\r\n                    </Box>\r\n                    {parameters.useStopLoss && <Box sx={{ display: 'flex', gap: 2, mt: 2 }}>\r\n                        <TextField\r\n                            label=\"Stop Loss Points\"\r\n                            type=\"number\"\r\n                            value={parameters.stopLossPoints ?? ''}\r\n                            onChange={(e) => {\r\n                                const value = e.target.value;\r\n                                handleParameterChange('stopLossPoints', Number(value));\r\n                            }}\r\n                            fullWidth\r\n                            required\r\n                            inputProps={{ min: 0 }}\r\n                        />\r\n                        <TextField\r\n                            label=\"Target Points\"\r\n                            type=\"number\"\r\n                            value={parameters.targetPoints ?? ''}\r\n                            onChange={(e) => {\r\n                                const value = e.target.value;\r\n                                handleParameterChange('targetPoints', Number(value));\r\n                            }}\r\n                            fullWidth\r\n                            required\r\n                            inputProps={{ min: parameters.stopLossPoints || 0 }}\r\n                            error={parameters.targetPoints != null && parameters.stopLossPoints != null && parameters.targetPoints < parameters.stopLossPoints}\r\n                            helperText={parameters.targetPoints != null && parameters.stopLossPoints != null && parameters.targetPoints < parameters.stopLossPoints\r\n                                ? \"Target points must be greater than stop loss points\"\r\n                                : \"\"}\r\n                        />\r\n                    </Box>}\r\n\r\n                    <FormControl sx={{ mt: 2 }} fullWidth required>\r\n                        <InputLabel>Select Interval</InputLabel>\r\n                        <Select\r\n                            value={parameters?.interval}\r\n                            onChange={(e: SelectChangeEvent) => {\r\n                                const value = e.target.value;\r\n                                handleParameterChange('interval', value);\r\n                            }}\r\n                            label=\"Select Interval\"\r\n                        >\r\n                            <MenuItem value=\"\">\r\n                                <em>None</em>\r\n                            </MenuItem>\r\n                            {intervalOptions.map((option) => (\r\n                                <MenuItem key={option.value} value={option.value}>\r\n                                    {option.label}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <FormControl sx={{ mt: 2 }} fullWidth required>\r\n                        <InputLabel>Select Index</InputLabel>\r\n                        <Select\r\n                            value={parameters?.index || ''}\r\n                            onChange={(e: SelectChangeEvent) => {\r\n                                const value = e.target.value;\r\n                                handleParameterChange('index', value);\r\n                            }}\r\n                            label=\"Select Index\"\r\n                        >\r\n                            <MenuItem value=\"\">\r\n                                <em>None</em>\r\n                            </MenuItem>\r\n                           {indexOptions.map((option) => (\r\n                                <MenuItem key={option.value} value={option.value}>\r\n                                    {option.label}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <FormControl sx={{ mt: 2 }} fullWidth required>\r\n                        <InputLabel>Select Indicator</InputLabel>\r\n                        <Select\r\n                            value={selectedIndicator}\r\n                            onChange={handleIndicatorChange}\r\n                            label=\"Select Indicator\"\r\n                        >\r\n                            {Object.entries(indicators).map(([key, indicator]) => (\r\n                                <MenuItem key={key} value={key}>\r\n                                    {indicator.name}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    {selectedIndicator && indicators[selectedIndicator] && (\r\n                        <Box sx={{ mt: 2 }}>\r\n                            <Typography variant=\"subtitle2\" gutterBottom>\r\n                                Indicator Parameters\r\n                            </Typography>\r\n                            {indicators[selectedIndicator].parameters.map((param) => (\r\n                                <TextField\r\n                                    key={param.name}\r\n                                    label={param.label}\r\n                                    type=\"number\"\r\n                                    fullWidth\r\n                                    value={parameters[param.name] ?? ''}\r\n                                    onChange={(e) => {\r\n                                        const value = e.target.value === '' ? null : Number(e.target.value);\r\n                                        handleParameterChange(param.name, value);\r\n                                    }}\r\n                                    inputProps={{\r\n                                        min: param.min,\r\n                                        max: param.max,\r\n                                        step: param.step || 1\r\n                                    }}\r\n                                    helperText={param.description}\r\n                                    sx={{ mt: 2 }}\r\n                                    required\r\n                                />\r\n                            ))}\r\n                        </Box>\r\n                    )}\r\n\r\n                </Box>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => {\r\n                    resetForm();\r\n                    onClose();\r\n                }}>\r\n                    Cancel\r\n                </Button>\r\n                <Button \r\n                    onClick={handleSubmit}\r\n                    variant=\"contained\" \r\n                    color=\"primary\"\r\n                    disabled={!strategyName || !selectedIndicator || loading}\r\n                >\r\n                    {isEditMode ? 'Update Strategy' : 'Create Strategy'}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    Grid,\r\n    Typography,\r\n    Box,\r\n    alpha,\r\n    Stack,\r\n    CircularProgress,\r\n} from '@mui/material';\r\nimport moment from 'moment';\r\nimport * as postal from 'postal';\r\n\r\ninterface StrategyWebsocketDataProps {\r\n    isVisible: boolean;\r\n    strategyId: string;\r\n    strategyData: any;\r\n}\r\n\r\nconst StrategyWebsocketData: React.FC<StrategyWebsocketDataProps> = ({ isVisible, strategyId, strategyData }) => {\r\n    const [wsData, setWsData] = useState<any>(null);\r\n    const ws = useRef<WebSocket | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (isVisible && strategyId) {\r\n            const token = localStorage.getItem('authkey');\r\n            if (ws.current) {\r\n                ws.current.close();\r\n            }\r\n\r\n            ws.current = new WebSocket(`ws://localhost:5001/ws/strategy?token=${token}&strategy=${strategyId}`);\r\n\r\n            ws.current.onopen = () => console.log('Connected to strategy websocket');\r\n            ws.current.onmessage = (event: MessageEvent) => {\r\n                const data = JSON.parse(event.data);\r\n                if(data.status === 'inactive'){\r\n                    postal.publish({\r\n                        topic: 'strategy_update_inactive',\r\n                    });\r\n                }\r\n                if (data.type === 'strategy_update') {\r\n                    setWsData(data);\r\n                }\r\n            };\r\n            ws.current.onclose = () => {\r\n                console.log('Disconnected from strategy websocket');\r\n                setWsData(null);\r\n            };\r\n        }\r\n\r\n        return () => {\r\n            if (ws.current) {\r\n                ws.current.close();\r\n            }\r\n        };\r\n    }, [isVisible, strategyId]);\r\n\r\n    const priceChangePercent = () => {\r\n        if (!wsData?.data?.tikData?.last_traded_price || !wsData?.data?.supertrend?.previousDayClose) {\r\n            return 0;\r\n        }\r\n\r\n        const lastPrice = wsData.data.tikData?.last_traded_price / 100;\r\n        const openPrice = wsData.data.supertrend?.previousDayClose;\r\n        const priceChangePercent =\r\n            typeof openPrice === 'number' &&\r\n            typeof lastPrice === 'number' &&\r\n            openPrice !== 0\r\n                ? +(((lastPrice - openPrice) / openPrice) * 100).toFixed(2)  // “+” turns the string from toFixed into a number\r\n                : null;\r\n\r\n        return priceChangePercent !== null ? priceChangePercent : 0;\r\n    };\r\n\r\n    if (!isVisible || !wsData?.data?.supertrend) {\r\n\r\n        return (\r\n            <Box sx={{\r\n                backgroundColor: (theme) => theme.palette.background.paper,\r\n                borderRadius: 2,\r\n                padding: 2,\r\n                mt: 3,\r\n                textAlign: 'center'\r\n                    }}>\r\n                {isVisible ? (\r\n                    <Stack direction=\"row\" spacing={2} alignItems=\"center\" justifyContent=\"center\">\r\n                        <CircularProgress size={20} color=\"primary\" />\r\n                        <Typography variant='h6' color='textSecondary'>\r\n                            Waiting for strategy data...\r\n                        </Typography>\r\n                    </Stack>\r\n                ) : (\r\n                    <Typography variant='h6' color='textSecondary'>\r\n                        Select a strategy to view data\r\n                    </Typography>\r\n                )}\r\n            </Box>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Box sx={{ \r\n            backgroundColor: (theme) => theme.palette.background.paper,\r\n            borderRadius: 2,\r\n            padding: 2,\r\n            mt: 3\r\n        }}>\r\n            <Grid container spacing={2} sx={{ mb: 2 }}>\r\n                <Grid item xs={12}>\r\n                    <Typography variant='h4' sx={{\r\n                            color: theme => theme.palette.primary.main,\r\n                            alignItems: 'center',\r\n                            ml: 3,\r\n                            mt: 2,\r\n                        }}>\r\n                            Strategy: {strategyData?.name || ''} \r\n                        </Typography>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container spacing={4}>\r\n                <Grid item xs={12} md={6}>\r\n                    <Card elevation={0} sx={{\r\n                        backgroundColor: theme => theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.05)' : 'rgba(255, 255, 255, 0.9)',\r\n                        borderRadius: 2,\r\n                        border: theme => `1px solid ${theme.palette.divider}`,\r\n                        transition: 'transform 0.2s, box-shadow 0.2s',\r\n                        '&:hover': {\r\n                            transform: 'translateY(-2px)',\r\n                            boxShadow: theme => theme.palette.mode === 'dark' \r\n                                ? '0 4px 20px rgba(0, 0, 0, 0.5)'\r\n                                : '0 4px 20px rgba(0, 0, 0, 0.1)'\r\n                        }\r\n                    }}>\r\n                        <CardContent>\r\n                            <Typography variant=\"h6\" sx={{\r\n                                color: theme => theme.palette.primary.main,\r\n                                fontWeight: 600,\r\n                                mb: 2,\r\n                                display: 'flex',\r\n                                alignItems: 'center',\r\n                            }}>\r\n                                <Box component=\"span\" sx={{\r\n                                    width: 4,\r\n                                    height: 20,\r\n                                    backgroundColor: 'primary.main',\r\n                                    borderRadius: 1,\r\n                                    mr: 1\r\n                                }} />\r\n                                Supertrend Analysis\r\n                            </Typography>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={12}>\r\n                                    <Box sx={{\r\n                                        p: 2,\r\n                                        borderRadius: 1,\r\n                                        backgroundColor: theme => theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.02)',\r\n                                    }}>\r\n                                        <Typography variant=\"body2\" color=\"textSecondary\">Super Trend</Typography>\r\n                                        <Typography variant=\"h6\">{wsData.data.supertrend.superTrend}</Typography>\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <Box sx={{\r\n                                        mt: 0.5,\r\n                                        p: 2,\r\n                                        borderRadius: 1,\r\n                                        backgroundColor: theme => \r\n                                            wsData.data.supertrend.trend === 'PUT' \r\n                                                ? alpha(theme.palette.error.main, 0.1)\r\n                                                : alpha(theme.palette.success.main, 0.1),\r\n                                        display: 'flex',\r\n                                        justifyContent: 'space-between',\r\n                                        alignItems: 'center'\r\n                                    }}>\r\n                                        <Box>\r\n                                            <Typography variant=\"body2\" color=\"textSecondary\">Trend</Typography>\r\n                                            <Typography variant=\"h6\" sx={{\r\n                                                color: wsData.data.supertrend.trend === 'PUT' ? 'error.main' : 'success.main',\r\n                                                fontWeight: 'bold'\r\n                                            }}>\r\n                                                {wsData.data.supertrend.trend}\r\n                                            </Typography>\r\n                                        </Box>\r\n                                        <Typography sx={{\r\n                                            px: 2,\r\n                                            py: 0.5,\r\n                                            borderRadius: 1,\r\n                                            backgroundColor: theme => theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.05)',\r\n                                            fontSize: '0.875rem'\r\n                                        }}>\r\n                                            {wsData.data.supertrend.trendChanged ? 'Changed' : 'Stable'}\r\n                                        </Typography>\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={4}>\r\n                                    <Box sx={{ mt: 0.5, ml: 0.8 }}>\r\n                                        <Typography variant=\"body2\" color=\"textSecondary\">Previous Close</Typography>\r\n                                        <Typography variant=\"h6\">{wsData.data.supertrend.previousClose}</Typography>\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={4}>\r\n                                    <Box sx={{ mt: 0.5 }}>\r\n                                        <Typography variant=\"body2\" color=\"textSecondary\">Current Close</Typography>\r\n                                        <Typography variant=\"h6\">{wsData.data.supertrend.currentClose}</Typography>\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={4}>\r\n                                    <Box sx={{ mt: 0.5 }}>\r\n                                        <Typography variant=\"body2\" color=\"textSecondary\">Last Update</Typography>\r\n                                        <Typography variant=\"h6\">{moment(wsData.data.supertrend.timestamp).format(\"DD-MM-YYYY hh:mm A\")}</Typography>\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                    <Card elevation={0} sx={{\r\n                        backgroundColor: theme => theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.05)' : 'rgba(255, 255, 255, 0.9)',\r\n                        borderRadius: 2,\r\n                        border: theme => `1px solid ${theme.palette.divider}`,\r\n                        transition: 'transform 0.2s, box-shadow 0.2s',\r\n                        '&:hover': {\r\n                            transform: 'translateY(-2px)',\r\n                            boxShadow: theme => theme.palette.mode === 'dark' \r\n                                ? '0 4px 20px rgba(0, 0, 0, 0.5)'\r\n                                : '0 4px 20px rgba(0, 0, 0, 0.1)'\r\n                        }\r\n                    }}>\r\n                        <CardContent>\r\n                            <Typography variant=\"h6\" sx={{\r\n                                color: theme => theme.palette.primary.main,\r\n                                fontWeight: 600,\r\n                                mb: 2,\r\n                                height: 50,\r\n                                display: 'flex',\r\n                                alignItems: 'center',\r\n                            }}>\r\n                                <Box component=\"span\" sx={{\r\n                                    width: 4,\r\n                                    height: 20,\r\n                                    backgroundColor: 'primary.main',\r\n                                    borderRadius: 1,\r\n                                    mr: 1\r\n                                }} />\r\n                                Market Data\r\n                            </Typography>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={12}>\r\n                                    <Box sx={{\r\n                                        p: 2,\r\n                                        borderRadius: 1,\r\n                                        backgroundColor: theme => theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.02)',\r\n                                    }}>\r\n                                        <Typography variant=\"body2\" color=\"textSecondary\">Last Price</Typography>\r\n                                        <Typography variant=\"h6\">\r\n                                            {(wsData.data.tikData?.last_traded_price) / 100 || 'N/A'}\r\n                                            {priceChangePercent() !== null && (\r\n                                                <Typography\r\n                                                component=\"span\"\r\n                                                variant=\"body2\"\r\n                                                color={priceChangePercent() >= 0 ? 'success.main' : 'error.main'}\r\n                                                sx={{ ml: 1 }}\r\n                                                >\r\n                                                ({priceChangePercent()}%)\r\n                                                </Typography>\r\n                                            )}\r\n                                        </Typography>\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <Box sx={{\r\n                                        mt: 0.5,\r\n                                        p: 2,\r\n                                        borderRadius: 1,\r\n                                        backgroundColor: theme => theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.02)',\r\n                                    }}>\r\n                                        <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>Day Range</Typography>\r\n                                        <Grid container spacing={2}>\r\n                                            <Grid item xs={6}>\r\n                                                <Typography variant=\"body2\" color=\"error.main\">Low: {(wsData.data.tikData?.low_price_day)/100 || 'N/A'}</Typography>\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n                                                <Typography variant=\"body2\" color=\"success.main\">High: {(wsData.data.tikData?.high_price_day)/100 || 'N/A'}</Typography>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} md={12}>\r\n                    <Card elevation={0} sx={{\r\n                        backgroundColor: theme => theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.05)' : 'rgba(255, 255, 255, 0.9)',\r\n                        borderRadius: 2,\r\n                        border: theme => `1px solid ${theme.palette.divider}`,\r\n                        transition: 'transform 0.2s, box-shadow 0.2s',\r\n                        '&:hover': {\r\n                            transform: 'translateY(-2px)',\r\n                            boxShadow: theme => theme.palette.mode === 'dark' \r\n                                ? '0 4px 20px rgba(0, 0, 0, 0.5)'\r\n                                : '0 4px 20px rgba(0, 0, 0, 0.1)'\r\n                        }\r\n                    }}>\r\n                        <CardContent>\r\n                             <Typography variant=\"h6\" sx={{\r\n                                color: theme => theme.palette.primary.main,\r\n                                fontWeight: 600,\r\n                                mb: 2,\r\n                                display: 'flex',\r\n                                alignItems: 'center',\r\n                            }}>\r\n                                <Box component=\"span\" sx={{\r\n                                    width: 4,\r\n                                    height: 20,\r\n                                    backgroundColor: 'primary.main',\r\n                                    borderRadius: 1,\r\n                                    mr: 1\r\n                                }} />\r\n                                Strategy Parameters\r\n                            </Typography>\r\n                            <Grid container spacing={2}>\r\n                                {Object.entries(strategyData?.parameters || {}).map(([key, value]:any) => (\r\n                                    <Grid item xs={6} key={key}>\r\n                                        <Box sx={{\r\n                                            p: 2,\r\n                                            borderRadius: 1,\r\n                                            backgroundColor: (theme) => theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.02)',\r\n                                        }}>\r\n                                            <Typography variant=\"body2\" color=\"textSecondary\">{key}</Typography>\r\n                                            <Typography variant=\"h6\">{typeof value === 'boolean' ? (value ? 'True' : 'False') : value}</Typography>\r\n                                        </Box>\r\n                                    </Grid>\r\n                                ))}\r\n                            </Grid>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n            </Grid>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default StrategyWebsocketData;\r\n","import { Grid, Paper } from \"@material-ui/core\";\r\nimport AdminAppBar from \"../../admin/components/AdminAppBar\";\r\nimport AdminToolbar from \"../../admin/components/AdminToolbar\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Tooltip,\r\n  Theme,\r\n  alpha,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\nimport { useSnackbar } from \"../../core/contexts/SnackbarProvider\";\r\nimport { fetchOptionContracts, fetchSymbolList } from \"../../candleOperations/hooks/candleServices\";\r\nimport SaveAltIcon from \"@mui/icons-material/SaveAlt\";\r\nimport AddchartIcon from \"@mui/icons-material/Addchart\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport RocketLaunchIcon from \"@mui/icons-material/RocketLaunch\";\r\nimport CancelIcon from \"@mui/icons-material/Cancel\";\r\nimport VisibilityIcon from \"@mui/icons-material/Visibility\";\r\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\r\nimport CreateStrategyDialog from \"../Components/CreateStrategyDialog\";\r\nimport StrategyWebsocketData from \"../Components/StrategyWebsocketData\";\r\nimport { Strategy, StrategyData } from \"../types/strategy\";\r\nimport {\r\n  createStrategy,\r\n  fetchStrategies,\r\n  deleteStrategy,\r\n  deployStrategy,\r\n  stopStrategy,\r\n  updateStrategy,\r\n} from \"../hooks/strategyService\";\r\nimport postal from \"postal\";\r\n\r\n// Common styles for table cells\r\nconst commonCellStyles = (theme: Theme) => ({\r\n  color: theme.palette.text.primary,\r\n  padding: {\r\n    xs: \"8px\",\r\n    sm: \"8px 12px\",\r\n  },\r\n  borderBottom: `1px solid ${theme.palette.divider}`,\r\n  fontSize: {\r\n    xs: \"0.875rem\",\r\n    sm: \"1rem\",\r\n  },\r\n});\r\n\r\n// Common styles for action buttons\r\nconst commonButtonStyles = (theme: Theme) => ({\r\n  color: theme.palette.text.primary,\r\n  backgroundColor: theme.palette.action.selected,\r\n  \"&:hover\": {\r\n    backgroundColor: theme.palette.action.hover,\r\n  },\r\n  \"&.Mui-disabled\": {\r\n    backgroundColor: theme.palette.action.disabledBackground,\r\n    color: theme.palette.action.disabled,\r\n  },\r\n});\r\n\r\nconst Strategies: React.FC = () => {\r\n  const snackbar = useSnackbar();\r\n\r\n  const [loading, setLoading] = useState<string | null>(null);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [strategies, setStrategies] = useState<Strategy[]>([]);\r\n  const [editStrategy, setEditStrategy] = useState<Strategy | null>(null);\r\n  const [deleteConfirmation, setDeleteConfirmation] = useState(false);\r\n  const [strategyToDelete, setStrategyToDelete] = useState<string | null>(null);\r\n  const [showStandaloneWsData, setShowStandaloneWsData] = useState(false);\r\n  const [activeStrategyId, setActiveStrategyId] = useState<string | null>(null);\r\n\r\n  const loadingRef = useRef(false);\r\n\r\n  const loadStrategies = async () => {\r\n    try {\r\n      setLoading(\"fetchStrategies\");\r\n      const response = await fetchStrategies();\r\n      if (response.status) {\r\n        setStrategies(response.strategies);\r\n      } else {\r\n        snackbar.error(response.message);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching strategies:\", error);\r\n      snackbar.error(\"Failed to fetch strategies\");\r\n    } finally {\r\n      setLoading(null);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadStrategies();\r\n  }, []);\r\n\r\n  useEffect(() =>{\r\n    postal.subscribe({\r\n      topic: 'strategy_update_inactive',\r\n      callback: () => {\r\n        loadStrategies();\r\n        setShowStandaloneWsData(false);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const handleSaveSymbolList = async () => {\r\n    try {\r\n      setLoading(\"saveSymbolList\");\r\n      const response = await fetchSymbolList();\r\n      if (response.status) {\r\n        snackbar.success(response.message);\r\n      } else {\r\n        snackbar.error(response.message);\r\n      }\r\n    } catch (error) {\r\n      snackbar.error(\"Failed to save symbol list\");\r\n    } finally {\r\n      setLoading(null);\r\n    }\r\n  };\r\n\r\n  const handleFetchOptionContracts = async () =>{\r\n    try {\r\n      setLoading(\"fetchOptionContracts\");\r\n       const response = await fetchOptionContracts();\r\n       if(response.status){\r\n        snackbar.success(response.message);\r\n       }else{\r\n        snackbar.error(\"Failed to fetch option contracts\");\r\n       }\r\n      \r\n    } catch (error) {\r\n      snackbar.error(\"Failed to fetch option contracts\");\r\n    }finally{\r\n      setLoading(null);\r\n\r\n    }\r\n  }\r\n\r\n  const handleCreateStrategy = () => {\r\n    setEditStrategy(null);\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleEditStrategy = (strategy: Strategy) => {\r\n    setEditStrategy(strategy);\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleDelete = (strategyId: string) => {\r\n    setStrategyToDelete(strategyId);\r\n    setDeleteConfirmation(true);\r\n  };\r\n\r\n  const handleStrategySubmit = async (strategyData: StrategyData) => {\r\n    try {\r\n      setLoading(editStrategy ? \"updateStrategy\" : \"createStrategy\");\r\n\r\n      let response;\r\n      if (editStrategy) {\r\n        response = await updateStrategy(editStrategy.id, strategyData);\r\n      } else {\r\n        response = await createStrategy(strategyData);\r\n      }\r\n\r\n      if (response.status) {\r\n        snackbar.success(\r\n          `Strategy ${editStrategy ? \"updated\" : \"created\"} successfully`\r\n        );\r\n        loadStrategies();\r\n      } else {\r\n        snackbar.error(response.message);\r\n      }\r\n    } catch (error) {\r\n      console.error(\r\n        `Error ${editStrategy ? \"updating\" : \"creating\"} strategy:`,\r\n        error\r\n      );\r\n      snackbar.error(\r\n        `Failed to ${editStrategy ? \"update\" : \"create\"} strategy`\r\n      );\r\n    } finally {\r\n      setLoading(null);\r\n      setOpenDialog(false);\r\n      setEditStrategy(null);\r\n    }\r\n  };\r\n\r\n  const handleDeleteStrategy = async (id: string) => {\r\n    try {\r\n      if (!id) return;\r\n\r\n      setLoading(`delete-${id}`);\r\n      const response = await deleteStrategy(id);\r\n      if (response.status) {\r\n        snackbar.success(\"Strategy deleted successfully\");\r\n        loadStrategies(); // Reload the strategies list\r\n      } else {\r\n        snackbar.error(response.message);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error deleting strategy:\", error);\r\n      snackbar.error(\"Failed to delete strategy\");\r\n    } finally {\r\n      setLoading(null);\r\n    }\r\n  };\r\n\r\n  const handleDeployStrategy = async (id: string) => {\r\n    try {\r\n      setLoading(`deploy-${id}`);\r\n      const response = await deployStrategy(id);\r\n      if (response.status) {\r\n        snackbar.success(\"Strategy deployed successfully\");\r\n        loadStrategies(); // Reload the strategies list\r\n      } else {\r\n        snackbar.error(response.message);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error deploying strategy:\", error);\r\n      snackbar.error(\"Failed to deploy strategy\");\r\n    } finally {\r\n      setLoading(null);\r\n    }\r\n  };\r\n\r\n  const handleStopStrategy = async (id: string) => {\r\n    try {\r\n      setLoading(`stop-${id}`);\r\n      const response = await stopStrategy(id);\r\n      if (response.status) {\r\n        snackbar.success(\"Strategy stopped successfully\");\r\n        loadStrategies(); // Reload the strategies list\r\n        setShowStandaloneWsData(false);\r\n        setActiveStrategyId(null);\r\n      } else {\r\n        snackbar.error(response.message);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error stopping strategy:\", error);\r\n      snackbar.error(\"Failed to stop strategy\");\r\n    } finally {\r\n      setLoading(null);\r\n    }\r\n  };\r\n\r\n  const openDeleteConfirmationDialog = (id: string) => {\r\n    setDeleteConfirmation(true);\r\n    setStrategyToDelete(id);\r\n  };\r\n\r\n  const closeDeleteConfirmationDialog = () => {\r\n    setDeleteConfirmation(false);\r\n    setStrategyToDelete(null);\r\n  };\r\n\r\n  const confirmDeleteStrategy = async () => {\r\n    if (strategyToDelete) {\r\n      await handleDeleteStrategy(strategyToDelete);\r\n    }\r\n    closeDeleteConfirmationDialog();\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <AdminAppBar>\r\n        <AdminToolbar title={\"Strategies\"} />\r\n      </AdminAppBar>\r\n\r\n      <Grid container spacing={2}>\r\n        {/* Control Buttons */}\r\n        <Grid item xs={12}>\r\n          <Box sx={{ display: \"flex\", gap: 2, mb: 2 }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<AddchartIcon />}\r\n              onClick={handleCreateStrategy}\r\n              sx={{\r\n                py: 0.5,\r\n                px: 1.5,\r\n                textTransform: 'none',\r\n                fontSize: '0.875rem'}}\r\n            >\r\n              Create Strategy\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<SaveAltIcon />}\r\n              onClick={handleSaveSymbolList}\r\n              disabled={loading === \"saveSymbolList\"}\r\n              sx={{\r\n                py: 0.5,\r\n                px: 1.5,\r\n                textTransform: 'none',\r\n                fontSize: '0.875rem'}}\r\n            >\r\n              {loading === \"saveSymbolList\" ? (\r\n                <CircularProgress size={24} />\r\n              ) : (\r\n                \"Update Symbol List\"\r\n              )}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<SaveAltIcon />}\r\n              onClick={handleFetchOptionContracts}\r\n              disabled={loading === \"fetchOptionContracts\"}\r\n              sx={{\r\n                py: 0.5,\r\n                px: 1.5,\r\n                textTransform: 'none',\r\n                fontSize: '0.875rem'}}\r\n            >\r\n              {loading === \"fetchOptionContracts\" ? (\r\n                <CircularProgress size={24} />\r\n              ) : (\r\n                \"Fetch Option Contracts\"\r\n              )}\r\n            </Button>\r\n          </Box>\r\n        </Grid>\r\n\r\n        {/* Main Table Section */}\r\n        <Grid item xs={12}>\r\n          <TableContainer component={Paper}>\r\n            <Table stickyHeader size=\"small\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  {[\"Name\", \"Description\", \"Indicator\", \"Price Range\", \"Status\", \"Last Modified\", \"Actions\"].map((header) => (\r\n                    <TableCell\r\n                      key={header}\r\n                      align=\"center\"\r\n                      sx={{\r\n                        color: (theme) => theme.palette.text.primary,\r\n                        backgroundColor: (theme) => theme.palette.background.default,\r\n                        fontWeight: 600,\r\n                        padding: { xs: \"12px 8px\", sm: \"16px\" },\r\n                        position: \"sticky\",\r\n                        top: 0,\r\n                        zIndex: 1,\r\n                        whiteSpace: \"nowrap\",\r\n                      }}\r\n                    >\r\n                      {header}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {strategies.length === 0 ? (\r\n                  <TableRow>\r\n                    <TableCell\r\n                      colSpan={7}\r\n                      align=\"center\"\r\n                      sx={{ color: (theme) => theme.palette.text.secondary, padding: \"24px 8px\" }}\r\n                    >\r\n                      No strategies found\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ) : (\r\n                  strategies.map((strategy) => (\r\n                    <TableRow\r\n                      key={strategy.id}\r\n                      hover\r\n                      sx={{\r\n                        \"&:nth-of-type(odd)\": {\r\n                          backgroundColor: (theme) => theme.palette.action.selected,\r\n                        },\r\n                        \"&:hover\": {\r\n                          backgroundColor: (theme) => theme.palette.action.hover,\r\n                        },\r\n                        \"&:last-child td\": {\r\n                          borderBottom: 0,\r\n                        },\r\n                      }}\r\n                    >\r\n                      <TableCell sx={(theme) => commonCellStyles(theme)}>\r\n                        {strategy.name}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        sx={(theme) => ({\r\n                          ...commonCellStyles(theme),\r\n                          maxWidth: \"200px\",\r\n                          overflow: \"hidden\",\r\n                          textOverflow: \"ellipsis\",\r\n                          whiteSpace: \"nowrap\",\r\n                        })}\r\n                      >\r\n                        {strategy.description}\r\n                      </TableCell>\r\n                      <TableCell sx={(theme) => commonCellStyles(theme)}>\r\n                        {strategy.indicator}\r\n                      </TableCell>\r\n                      <TableCell sx={(theme) => commonCellStyles(theme)}>\r\n                        {strategy.parameters.minContractPrice} - {strategy.parameters.maxContractPrice}\r\n                      </TableCell>\r\n                      <TableCell sx={(theme) => commonCellStyles(theme)}>\r\n                        <Box\r\n                          sx={{\r\n                            color: strategy.isActive ? \r\n                              (theme) => theme.palette.success.main :\r\n                              (theme) => theme.palette.error.main,\r\n                            backgroundColor: strategy.isActive ?\r\n                              (theme) => alpha(theme.palette.success.main, 0.1) :\r\n                              (theme) => alpha(theme.palette.error.main, 0.1),\r\n                            display: \"inline-block\",\r\n                            px: 2,\r\n                            py: 0.5,\r\n                            borderRadius: 1,\r\n                            fontWeight: 500,\r\n                          }}\r\n                        >\r\n                          {strategy.isActive ? \"Active\" : \"Inactive\"}\r\n                        </Box>\r\n                      </TableCell>\r\n                      <TableCell sx={(theme) => commonCellStyles(theme)}>\r\n                        {new Date(strategy.modified_time).toLocaleString()}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"right\"\r\n                        sx={(theme) => ({\r\n                          ...commonCellStyles(theme),\r\n                          display: \"flex\",\r\n                          gap: 1,\r\n                          justifyContent: \"flex-end\",\r\n                          flexWrap: \"nowrap\",\r\n                        })}\r\n                      >\r\n                        {/* Actions for inactive strategy */}\r\n                        {!strategy.isActive && (\r\n                          <>\r\n                            <Tooltip title=\"Edit Strategy\">\r\n                              <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => handleEditStrategy(strategy)}\r\n                                sx={(theme) => commonButtonStyles(theme)}\r\n                              >\r\n                                <EditIcon fontSize=\"small\" />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title=\"Delete Strategy\">\r\n                              <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => openDeleteConfirmationDialog(strategy.id)}\r\n                                disabled={loading === `delete-${strategy.id}`}\r\n                                sx={(theme) => ({\r\n                                  ...commonButtonStyles(theme),\r\n                                  color: theme.palette.error.main,\r\n                                })}\r\n                              >\r\n                                <DeleteIcon fontSize=\"small\" />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title=\"Deploy Strategy\">\r\n                              <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => handleDeployStrategy(strategy.id)}\r\n                                disabled={loading === `deploy-${strategy.id}`}\r\n                                sx={(theme) => commonButtonStyles(theme)}\r\n                              >\r\n                                <RocketLaunchIcon fontSize=\"small\" color=\"primary\" />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                          </>\r\n                        )}\r\n                        {/* Actions for active strategy */}\r\n                        {strategy.isActive && (\r\n                          <>\r\n                            <Tooltip title={activeStrategyId === strategy.id && showStandaloneWsData ? \"Hide Strategy Data\" : \"View Strategy Data\"}>\r\n                              <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => {\r\n                                  if (activeStrategyId === strategy.id && showStandaloneWsData) {\r\n                                    setShowStandaloneWsData(false);\r\n                                    setActiveStrategyId(null);\r\n                                  } else {\r\n                                    setActiveStrategyId(strategy.id);\r\n                                    setShowStandaloneWsData(true);\r\n                                  }\r\n                                }}\r\n                                sx={(theme) => ({\r\n                                  ...commonButtonStyles(theme),\r\n                                  backgroundColor: activeStrategyId === strategy.id && showStandaloneWsData\r\n                                    ? theme.palette.primary.main\r\n                                    : \"transparent\",\r\n                                  color: activeStrategyId === strategy.id && showStandaloneWsData\r\n                                    ? theme.palette.primary.contrastText\r\n                                    : theme.palette.text.primary,\r\n                                  \"&:hover\": {\r\n                                    backgroundColor: activeStrategyId === strategy.id && showStandaloneWsData\r\n                                      ? theme.palette.primary.dark\r\n                                      : theme.palette.action.hover,\r\n                                  },\r\n                                })}\r\n                              >\r\n                                {activeStrategyId === strategy.id && showStandaloneWsData ? (\r\n                                  <VisibilityOffIcon fontSize=\"small\" />\r\n                                ) : (\r\n                                  <VisibilityIcon fontSize=\"small\" />\r\n                                )}\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title=\"Stop Strategy\">\r\n                              <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => handleStopStrategy(strategy.id)}\r\n                                disabled={loading === `stop-${strategy.id}`}\r\n                                sx={(theme) => commonButtonStyles(theme)}\r\n                              >\r\n                                <CancelIcon fontSize=\"small\" color=\"error\" />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                          </>\r\n                        )}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Grid>\r\n\r\n        {/* Strategy Data Section */}\r\n        {showStandaloneWsData && activeStrategyId && (\r\n          <Grid item xs={12}>\r\n            <StrategyWebsocketData\r\n              isVisible={showStandaloneWsData}\r\n              strategyData={strategies.find((s) => s.id === activeStrategyId) || {}}\r\n              strategyId={activeStrategyId}\r\n            />\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n\r\n      {/* Create/Edit Strategy Dialog */}\r\n      <CreateStrategyDialog\r\n        open={openDialog}\r\n        onClose={() => {\r\n          setOpenDialog(false);\r\n          setEditStrategy(null);\r\n        }}\r\n        onSubmit={handleStrategySubmit}\r\n        strategyData={editStrategy!}\r\n      />\r\n\r\n      {/* Delete Confirmation Dialog */}\r\n      <Dialog\r\n        open={deleteConfirmation}\r\n        onClose={closeDeleteConfirmationDialog}\r\n        PaperProps={{\r\n          style: {\r\n            backgroundColor: \"#1E1E1E\",\r\n            color: \"#FFFFFF\",\r\n          },\r\n        }}\r\n      >\r\n        <DialogTitle>Delete Strategy</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText sx={{ color: \"inherit\" }}>\r\n            Are you sure you want to delete this strategy?\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions sx={{ padding: 2 }}>\r\n          <Button\r\n            onClick={closeDeleteConfirmationDialog}\r\n            variant=\"contained\"\r\n            color=\"error\"\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={confirmDeleteStrategy}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={loading === `delete-${strategyToDelete}` || loadingRef.current}\r\n          >\r\n            {loading === `delete-${strategyToDelete}` ? (\r\n              <CircularProgress size={24} />\r\n            ) : (\r\n              \"Delete\"\r\n            )}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Strategies;\r\n","import { getBaseUrl } from '../../http/globalUrl';\r\nimport { getRequiredHeaders } from '../../services/userService';\r\n\r\nconst BASE_URL = getBaseUrl();\r\nconst FETCH_SYMBOL_LIST = 'candles/fetchSymbolList';\r\nconst GET_SYMBOL_DETAILS = 'candles/getSymbolDetails';\r\nconst POST_OPTION_CONTRACTS = 'candles/fetchOptionContracts'\r\n\r\nexport const fetchOptionContracts = async () =>{\r\n    try {\r\n        const response = await fetch(`${BASE_URL}${POST_OPTION_CONTRACTS}`, {\r\n        method: 'POST',\r\n        headers: await getRequiredHeaders(),\r\n        body: JSON.stringify({index: 'NIFTY'})\r\n    });\r\n        const json = await response.json();\r\n        return json;\r\n    } catch (error) {\r\n        throw new Error('Failed to fetch symbol list');\r\n    }\r\n}\r\n\r\nexport async function fetchSymbolList() {\r\n    try {\r\n        const response = await fetch(`${BASE_URL}${FETCH_SYMBOL_LIST}`, {\r\n            method: 'POST',\r\n            headers: await getRequiredHeaders(),\r\n        });\r\n        const json = await response.json();\r\n        return json;\r\n    } catch (error) {\r\n        console.log('Error fetching symbol list:', error);\r\n        throw new Error('Failed to fetch symbol list');\r\n    }\r\n}\r\n\r\nexport async function getSymbolDetails(symbol: string) {\r\n    try {\r\n        const response = await fetch(`${BASE_URL}${GET_SYMBOL_DETAILS}`, {\r\n            method: 'POST',\r\n            headers: await getRequiredHeaders(),\r\n            body: JSON.stringify({symbol: symbol}),\r\n        });\r\n        const json = await response.json();\r\n        return json;\r\n    } catch (error) {\r\n        console.log('Error fetching symbol details:', error);\r\n    }\r\n}\r\n"],"names":["BASE_URL","getBaseUrl","CreateStrategyDialog","_ref","_parameters$minContra","_parameters$maxContra","_parameters$stopLossP","_parameters$targetPoi","open","onClose","onSubmit","strategyData","snackbar","useSnackbar","loading","setLoading","useState","indicators","setIndicators","selectedIndicator","setSelectedIndicator","strategyName","setStrategyName","strategyDescription","setStrategyDescription","parameters","setParameters","minContractPrice","maxContractPrice","isEditMode","useEffect","async","response","fetch","method","headers","getRequiredHeaders","json","fetchIndicators","status","error","message","console","loadIndicators","name","description","indicator","useStopLoss","stopLossPoints","targetPoints","resetForm","handleParameterChange","paramName","value","prev","isNaN","Number","_jsxs","Dialog","maxWidth","fullWidth","children","_jsx","DialogTitle","DialogContent","Box","sx","display","flexDirection","gap","mt","TextField","label","onChange","e","target","required","multiline","rows","type","inputProps","min","helperText","FormControlLabel","control","Checkbox","checked","FormControl","InputLabel","Select","interval","MenuItem","map","option","index","event","defaultParams","forEach","param","default","Object","entries","_ref2","key","Typography","variant","gutterBottom","_parameters$param$nam","max","step","DialogActions","Button","onClick","handleSubmit","color","disabled","_wsData$data3","_wsData$data$tikData3","_wsData$data$tikData4","_wsData$data$tikData5","isVisible","strategyId","wsData","setWsData","ws","useRef","token","localStorage","getItem","current","close","WebSocket","onopen","log","onmessage","data","JSON","parse","postal","publish","topic","onclose","priceChangePercent","_wsData$data","_wsData$data$tikData","_wsData$data2","_wsData$data2$supertr","_wsData$data$tikData2","_wsData$data$supertre","tikData","last_traded_price","supertrend","previousDayClose","lastPrice","openPrice","toFixed","backgroundColor","theme","palette","background","paper","borderRadius","padding","Grid","container","spacing","mb","item","xs","primary","main","alignItems","ml","md","Card","elevation","mode","border","divider","transition","transform","boxShadow","CardContent","fontWeight","component","width","height","mr","p","superTrend","trend","alpha","success","justifyContent","px","py","fontSize","trendChanged","previousClose","currentClose","moment","timestamp","format","low_price_day","high_price_day","textAlign","Stack","direction","CircularProgress","size","commonCellStyles","text","sm","borderBottom","commonButtonStyles","action","selected","hover","disabledBackground","Strategies","openDialog","setOpenDialog","strategies","setStrategies","editStrategy","setEditStrategy","deleteConfirmation","setDeleteConfirmation","strategyToDelete","setStrategyToDelete","showStandaloneWsData","setShowStandaloneWsData","activeStrategyId","setActiveStrategyId","loadingRef","loadStrategies","fetchStrategies","callback","handleDeleteStrategy","id","deleteStrategy","handleDeployStrategy","deployStrategy","handleStopStrategy","ok","Error","stopStrategy","closeDeleteConfirmationDialog","React","AdminAppBar","AdminToolbar","title","startIcon","AddchartIcon","handleCreateStrategy","textTransform","SaveAltIcon","fetchSymbolList","fetchOptionContracts","TableContainer","Paper","Table","stickyHeader","TableHead","TableRow","header","TableCell","align","position","top","zIndex","whiteSpace","TableBody","length","colSpan","secondary","strategy","overflow","textOverflow","isActive","Date","modified_time","toLocaleString","flexWrap","_Fragment","Tooltip","IconButton","handleEditStrategy","EditIcon","openDeleteConfirmationDialog","DeleteIcon","RocketLaunchIcon","contrastText","dark","VisibilityOffIcon","VisibilityIcon","CancelIcon","StrategyWebsocketData","find","s","body","stringify","updateStrategy","createStrategy","PaperProps","style","DialogContentText","FETCH_SYMBOL_LIST"],"sourceRoot":""}